%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: star18-21.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: í∑íJêÏ çÅïc
%%CreationDate: 4/3/18
%%BoundingBox: 0 0 567 567
%%HiResBoundingBox: 0 0 566.9287 566.9287
%%CropBox: 0 0 566.9287 566.9287
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">star18-1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2018-04-03T11:01:53+09:00</xap:CreateDate>
         <xap:ModifyDate>2018-04-03T11:01:53+09:00</xap:ModifyDate>
         <xap:MetadataDate>2018-04-03T11:01:53+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqxrXfzL8gaDefUtW16ztbwGj27SBpEP+Wq8in+yplsME5CwCtp1per&#xA;6Vq1kl9pd5DfWcn2Li3kWWM06jkpIqMhKJiaOyovIq7FXYq7FXYq7FXYq7FXYq7FUu1fWotMn0uK&#xA;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&#xA;dir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:FBD663B6B638E811B08A97BCD54E944A</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:FCD663B6B638E811B08A97BCD54E944A</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:FAD663B6B638E811B08A97BCD54E944A</stRef:instanceID>
            <stRef:documentID>uuid:F9D663B6B638E811B08A97BCD54E944A</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999994</stDim:w>
            <stDim:h>297.000002</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>ÂàùÊúüË®≠ÂÆö„ÅÆ„Çπ„Ç¶„Ç©„ÉÉ„ÉÅ„Ç∞„É´„Éº„Éó</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>„Éõ„ÉØ„Ç§„Éà</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>„Éñ„É©„ÉÉ„ÇØ</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>„Éó„É™„É≥„Éà„Ç´„É©„Éº„Ç∞„É´„Éº„Éó</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=70 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>70.000000</xapG:magenta>
                           <xapG:yellow>90.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -566.929 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 566.929 li
566.929 566.929 li
566.929 0 li
cp
clp
[1 0 0 1 0 0 ]ct
566.929 566.929 mo
0 566.929 li
0 0 li
566.929 0 li
566.929 566.929 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
348.642 73.5161 mo
346.369 74.4531 342.755 75.1167 340.903 75.1533 cv
342.989 75.1104 346.512 75.7344 348.678 76.7764 cv
348.229 78.8003 347.61 81.8008 346.665 83.1284 cv
347.533 81.9102 349.56 79.8584 351.252 78.6855 cv
352.292 80.8984 353.044 84.8813 353.085 86.8604 cv
353.042 84.6968 353.751 80.1118 354.864 78.041 cv
356.854 78.582 359.491 79.8843 360.725 80.7607 cv
359.595 79.9531 357.745 78.1484 356.548 76.541 cv
358.748 75.4844 362.796 74.7173 364.794 74.6787 cv
362.493 74.7236 357.438 73.9116 355.603 72.6782 cv
356.123 70.6758 357.461 67.9561 358.353 66.6992 cv
357.575 67.7949 355.853 69.5737 354.279 70.7749 cv
353.325 68.5103 352.651 64.8428 352.612 62.9717 cv
352.655 65.1802 351.905 69.9238 350.754 71.9219 cv
348.732 71.5205 345.655 70.04 344.298 69.0688 cv
345.479 69.9111 347.454 71.8491 348.642 73.5161 cv
cp
1 1 0.2 0.2 cmyk
f
398.769 105.34 mo
394.869 105.34 391.253 106.261 389.043 108.376 cv
386.843 110.485 385.573 114.842 385.573 118.745 cv
385.573 114.842 384.995 110.485 382.797 108.376 cv
380.585 106.261 377.205 105.471 373.306 105.471 cv
377.205 105.471 379.926 104.212 382.136 102.098 cv
384.336 99.9883 385.84 96.3057 385.84 92.4131 cv
385.84 96.3057 387.114 99.9883 389.32 102.098 cv
391.522 104.212 394.869 105.34 398.769 105.34 cv
cp
f
106.152 240.226 mo
109.953 238.118 115.83 236.818 120.335 236.818 cv
115.885 236.818 110.097 235.549 106.292 233.487 cv
107.255 229.882 109.616 226.053 112.651 223.017 cv
109.608 226.056 105.579 228.227 101.88 229.094 cv
99.8032 225.294 98.5181 219.47 98.5181 215.001 cv
98.5181 219.453 97.2466 225.246 95.1831 229.05 cv
91.5474 228.099 87.6509 225.763 84.6089 222.725 cv
87.6538 225.765 89.8794 229.777 90.7793 233.469 cv
86.9751 235.538 81.1621 236.818 76.6968 236.818 cv
81.1655 236.818 86.9775 238.097 90.7832 240.169 cv
89.8896 243.906 87.6572 248.006 84.6089 251.055 cv
87.6538 248.01 91.5547 245.593 95.1948 244.604 cv
97.2485 248.409 98.5181 254.189 98.5181 258.635 cv
98.5181 254.139 99.8193 248.275 101.917 244.474 cv
105.225 245.172 108.506 246.91 111.484 249.888 cv
108.506 246.905 106.818 243.564 106.152 240.226 cv
cp
f
97.4038 202.908 mo
97.4038 185.458 li
97.4038 185.042 97.7388 184.707 98.1528 184.707 cv
98.1528 184.707 li
98.5669 184.707 98.9038 185.042 98.9038 185.458 cv
98.9038 185.458 li
98.9038 202.908 li
98.9038 203.322 98.5669 203.657 98.1528 203.657 cv
98.1528 203.657 li
97.7388 203.657 97.4038 203.322 97.4038 202.908 cv
97.4038 202.908 li
cp
f
90.2617 206.945 mo
86.1733 193.272 li
86.0532 192.876 86.2788 192.458 86.6768 192.34 cv
86.6768 192.34 li
87.0728 192.22 87.4912 192.445 87.6089 192.843 cv
87.6089 192.843 li
91.6997 206.514 li
91.8174 206.912 91.5918 207.331 91.1958 207.448 cv
91.1958 207.448 li
91.1235 207.47 91.0513 207.48 90.98 207.48 cv
90.98 207.48 li
90.6567 207.48 90.3599 207.269 90.2617 206.945 cv
90.2617 206.945 li
cp
f
81.5571 207.945 mo
72.0366 192.126 li
71.8237 191.773 71.9395 191.312 72.293 191.096 cv
72.293 191.096 li
72.6484 190.883 73.1094 190.999 73.3228 191.352 cv
73.3228 191.352 li
82.8428 207.171 li
83.0562 207.527 82.9424 207.988 82.5869 208.201 cv
82.5869 208.201 li
82.4653 208.274 82.332 208.309 82.2002 208.309 cv
82.2002 208.309 li
81.9458 208.309 81.6978 208.179 81.5571 207.945 cv
81.5571 207.945 li
cp
f
75.1318 213.336 mo
66.9873 205.194 li
66.6948 204.899 66.6948 204.426 66.9873 204.133 cv
66.9873 204.133 li
67.2803 203.84 67.7559 203.84 68.0483 204.133 cv
68.0483 204.133 li
76.1924 212.275 li
76.4854 212.568 76.4854 213.043 76.1924 213.336 cv
76.1924 213.336 li
76.0464 213.482 75.854 213.556 75.6621 213.556 cv
75.6621 213.556 li
75.4702 213.556 75.2778 213.482 75.1318 213.336 cv
75.1318 213.336 li
cp
f
73.3164 221.485 mo
60.3765 214.468 li
60.0127 214.269 59.876 213.815 60.0737 213.451 cv
60.0737 213.451 li
60.2729 213.087 60.7266 212.951 61.0908 213.148 cv
61.0908 213.148 li
74.0322 220.165 li
74.3965 220.364 74.5308 220.818 74.3335 221.182 cv
74.3335 221.182 li
74.1978 221.433 73.939 221.576 73.6724 221.576 cv
73.6724 221.576 li
73.5518 221.576 73.4297 221.547 73.3164 221.485 cv
73.3164 221.485 li
cp
f
67.4634 228.102 mo
45.9531 222.125 li
45.5542 222.015 45.3198 221.602 45.4321 221.203 cv
45.4321 221.203 li
45.542 220.804 45.9551 220.569 46.3545 220.68 cv
46.3545 220.68 li
67.8643 226.656 li
68.2637 226.768 68.4976 227.181 68.3857 227.58 cv
68.3857 227.58 li
68.2944 227.912 67.9937 228.129 67.6655 228.129 cv
67.6655 228.129 li
67.5986 228.129 67.5308 228.12 67.4634 228.102 cv
67.4634 228.102 li
cp
f
44.707 235.713 mo
44.707 235.297 45.0435 234.963 45.457 234.963 cv
45.457 234.963 li
66.7524 234.959 li
67.1665 234.959 67.5024 235.295 67.5024 235.709 cv
67.5024 235.709 li
67.5024 236.125 67.1665 236.459 66.7524 236.459 cv
66.7524 236.459 li
45.457 236.463 li
45.0435 236.463 44.707 236.127 44.707 235.713 cv
44.707 235.713 li
cp
f
56.1934 247.181 mo
56.0791 246.783 56.3076 246.367 56.7061 246.252 cv
56.7061 246.252 li
71.9854 241.858 li
72.3833 241.744 72.7979 241.973 72.9121 242.371 cv
72.9121 242.371 li
73.0264 242.769 72.7979 243.185 72.3999 243.299 cv
72.3999 243.299 li
57.1201 247.694 li
57.0508 247.713 56.981 247.723 56.9121 247.723 cv
56.9121 247.723 li
56.5869 247.723 56.2881 247.51 56.1934 247.181 cv
56.1934 247.181 li
cp
f
52.832 262.259 mo
52.6255 261.899 52.752 261.441 53.1118 261.237 cv
53.1118 261.237 li
71.0327 251.019 li
71.3931 250.814 71.8511 250.939 72.0576 251.299 cv
72.0576 251.299 li
72.2617 251.659 72.1372 252.117 71.7773 252.321 cv
71.7773 252.321 li
53.8545 262.539 li
53.7368 262.606 53.6094 262.638 53.4834 262.638 cv
53.4834 262.638 li
53.2231 262.638 52.9697 262.502 52.832 262.259 cv
52.832 262.259 li
cp
f
67.9854 266.871 mo
67.6929 266.578 67.6929 266.103 67.9854 265.811 cv
67.9854 265.811 li
76.1221 257.676 li
76.415 257.381 76.8896 257.383 77.1841 257.676 cv
77.1841 257.676 li
77.4766 257.969 77.4766 258.443 77.1841 258.736 cv
77.1841 258.736 li
69.0474 266.871 li
68.9004 267.018 68.7085 267.091 68.5166 267.091 cv
68.5166 267.091 li
68.3242 267.091 68.1323 267.017 67.9854 266.871 cv
67.9854 266.871 li
cp
f
72.6563 282.083 mo
72.2954 281.877 72.1704 281.42 72.3755 281.06 cv
72.3755 281.06 li
82.7632 262.791 li
82.9683 262.432 83.4253 262.305 83.7861 262.51 cv
83.7861 262.51 li
84.145 262.715 84.272 263.172 84.0669 263.532 cv
84.0669 263.532 li
73.6787 281.802 li
73.5405 282.044 73.2871 282.181 73.0259 282.181 cv
73.0259 282.181 li
72.9004 282.181 72.7729 282.149 72.6563 282.083 cv
72.6563 282.083 li
cp
f
88.061 278.039 mo
87.6592 277.937 87.4175 277.527 87.52 277.125 cv
87.52 277.125 li
91.4902 261.681 li
91.5928 261.279 92.0005 261.037 92.4019 261.14 cv
92.4019 261.14 li
92.8037 261.244 93.0454 261.652 92.9429 262.053 cv
92.9429 262.053 li
88.9727 277.5 li
88.8862 277.838 88.5815 278.063 88.2471 278.063 cv
88.2471 278.063 li
88.186 278.063 88.123 278.055 88.061 278.039 cv
88.061 278.039 li
cp
f
98.8105 288.413 mo
98.8125 267.106 li
98.8125 266.692 99.1489 266.355 99.563 266.355 cv
99.563 266.355 li
99.9775 266.358 100.314 266.692 100.314 267.106 cv
100.314 267.106 li
100.31 288.413 li
100.31 288.827 99.9736 289.164 99.5591 289.164 cv
99.5591 289.164 li
99.1445 289.162 98.8105 288.827 98.8105 288.413 cv
98.8105 288.413 li
cp
f
112.089 284.763 mo
106.082 262.058 li
105.975 261.658 106.212 261.248 106.615 261.141 cv
106.615 261.141 li
107.014 261.036 107.424 261.274 107.531 261.676 cv
107.531 261.676 li
113.539 284.379 li
113.646 284.779 113.408 285.189 113.006 285.296 cv
113.006 285.296 li
112.941 285.313 112.876 285.321 112.813 285.321 cv
112.813 285.321 li
112.481 285.321 112.179 285.1 112.089 284.763 cv
112.089 284.763 li
cp
f
120.62 272.794 mo
114.87 262.827 li
114.662 262.469 114.787 262.01 115.145 261.804 cv
115.145 261.804 li
115.503 261.597 115.961 261.72 116.168 262.078 cv
116.168 262.078 li
121.918 272.045 li
122.126 272.403 122.001 272.862 121.644 273.069 cv
121.644 273.069 li
121.525 273.137 121.396 273.169 121.27 273.169 cv
121.27 273.169 li
121.01 273.169 120.758 273.035 120.62 272.794 cv
120.62 272.794 li
cp
f
135.663 271.143 mo
119.868 255.221 li
119.577 254.927 119.58 254.452 119.874 254.161 cv
119.874 254.161 li
120.167 253.868 120.642 253.87 120.935 254.165 cv
120.935 254.165 li
136.729 270.087 li
137.02 270.381 137.018 270.856 136.723 271.147 cv
136.723 271.147 li
136.578 271.293 136.387 271.365 136.196 271.365 cv
136.196 271.365 li
136.003 271.365 135.81 271.291 135.663 271.143 cv
135.663 271.143 li
cp
f
136.575 256.837 mo
123.957 248.902 li
123.605 248.682 123.501 248.218 123.722 247.869 cv
123.722 247.869 li
123.943 247.517 124.405 247.413 124.756 247.631 cv
124.756 247.631 li
137.374 255.566 li
137.724 255.787 137.83 256.25 137.609 256.6 cv
137.609 256.6 li
137.466 256.827 137.223 256.951 136.974 256.951 cv
136.974 256.951 li
136.837 256.951 136.699 256.914 136.575 256.837 cv
136.575 256.837 li
cp
f
149.248 248.998 mo
129.836 243.351 li
129.438 243.235 129.209 242.818 129.326 242.42 cv
129.326 242.42 li
129.442 242.022 129.859 241.796 130.255 241.91 cv
130.255 241.91 li
149.668 247.559 li
150.064 247.673 150.293 248.089 150.179 248.487 cv
150.179 248.487 li
150.083 248.815 149.784 249.028 149.459 249.028 cv
149.459 249.028 li
149.389 249.028 149.318 249.019 149.248 248.998 cv
149.248 248.998 li
cp
f
130.955 235.046 mo
130.541 235.046 130.205 234.709 130.207 234.296 cv
130.207 234.296 li
130.207 233.882 130.541 233.546 130.957 233.546 cv
130.957 233.546 li
142.466 233.55 li
142.88 233.55 143.216 233.886 143.216 234.3 cv
143.216 234.3 li
143.214 234.716 142.878 235.05 142.464 235.05 cv
142.464 235.05 li
130.955 235.046 li
130.955 235.046 li
cp
f
128.959 226.229 mo
128.841 225.833 129.067 225.415 129.464 225.297 cv
129.464 225.297 li
149.591 219.287 li
149.988 219.169 150.405 219.395 150.523 219.792 cv
150.523 219.792 li
150.643 220.189 150.417 220.606 150.02 220.725 cv
150.02 220.725 li
129.892 226.734 li
129.821 226.755 129.749 226.766 129.678 226.766 cv
129.678 226.766 li
129.354 226.766 129.057 226.555 128.959 226.229 cv
128.959 226.229 li
cp
f
122.233 220.965 mo
122.02 220.611 122.134 220.149 122.49 219.936 cv
122.49 219.936 li
141.392 208.545 li
141.746 208.331 142.208 208.445 142.421 208.799 cv
142.421 208.799 li
142.635 209.155 142.521 209.615 142.165 209.829 cv
142.165 209.829 li
123.263 221.22 li
123.142 221.293 123.008 221.328 122.876 221.328 cv
122.876 221.328 li
122.622 221.328 122.374 221.198 122.233 220.965 cv
122.233 220.965 li
cp
f
120.524 212.338 mo
120.231 212.045 120.229 211.572 120.522 211.277 cv
120.522 211.277 li
128.655 203.138 li
128.948 202.845 129.423 202.843 129.716 203.136 cv
129.716 203.136 li
130.009 203.429 130.009 203.904 129.716 204.197 cv
129.716 204.197 li
121.585 212.338 li
121.439 212.484 121.247 212.558 121.055 212.558 cv
121.055 212.558 li
120.863 212.558 120.67 212.484 120.524 212.338 cv
120.524 212.338 li
cp
f
113.904 207.494 mo
113.548 207.28 113.435 206.819 113.65 206.464 cv
113.65 206.464 li
122.989 191.002 li
123.202 190.646 123.663 190.533 124.018 190.748 cv
124.018 190.748 li
124.374 190.961 124.487 191.422 124.272 191.778 cv
124.272 191.778 li
114.934 207.24 li
114.792 207.473 114.543 207.601 114.29 207.601 cv
114.29 207.601 li
114.158 207.601 114.024 207.566 113.904 207.494 cv
113.904 207.494 li
cp
f
105.368 207.452 mo
104.968 207.343 104.734 206.928 104.844 206.53 cv
104.844 206.53 li
108.728 192.504 li
108.839 192.104 109.251 191.871 109.651 191.98 cv
109.651 191.98 li
110.049 192.092 110.285 192.504 110.173 192.904 cv
110.173 192.904 li
106.29 206.93 li
106.197 207.262 105.896 207.48 105.569 207.48 cv
105.569 207.48 li
105.502 207.48 105.435 207.471 105.368 207.452 cv
105.368 207.452 li
cp
f
398.218 49.6875 mo
394.869 49.6875 391.022 50.3149 389.405 51.8618 cv
387.79 53.4106 386.888 60.3052 386.888 63.6523 cv
386.888 60.3052 386.439 53.4106 384.827 51.8618 cv
383.208 50.3149 379.703 49.8013 376.355 49.8013 cv
379.703 49.8013 382.721 48.811 384.341 47.2642 cv
385.955 45.7153 387.115 41.9341 387.115 38.5889 cv
387.115 41.9341 387.989 45.7153 389.605 47.2642 cv
391.221 48.811 394.869 49.6875 398.218 49.6875 cv
cp
f
99.6958 63.9238 mo
96.3477 63.9238 92.501 64.5513 90.8838 66.0981 cv
89.2686 67.647 88.3662 74.5415 88.3662 77.8887 cv
88.3662 74.5415 87.918 67.647 86.3057 66.0981 cv
84.687 64.5513 81.1816 64.0376 77.8345 64.0376 cv
81.1816 64.0376 84.1992 63.0474 85.8193 61.5005 cv
87.4336 59.9517 88.5938 56.1704 88.5938 52.8252 cv
88.5938 56.1704 89.4683 59.9517 91.084 61.5005 cv
92.6992 63.0474 96.3477 63.9238 99.6958 63.9238 cv
cp
f
532.117 311.092 mo
528.769 311.092 524.922 311.719 523.305 313.266 cv
521.689 314.814 520.787 321.709 520.787 325.057 cv
520.787 321.709 520.339 314.814 518.727 313.266 cv
517.107 311.719 513.603 311.205 510.255 311.205 cv
513.603 311.205 516.62 310.215 518.24 308.668 cv
519.854 307.119 521.015 303.338 521.015 299.993 cv
521.015 303.338 521.889 307.119 523.505 308.668 cv
525.12 310.215 528.769 311.092 532.117 311.092 cv
cp
f
69.1147 491.283 mo
67.1113 492.176 li
67.1113 492.176 67.3896 488.654 67.8164 488.619 cv
68.1343 488.594 69.1147 491.283 69.1147 491.283 cv
cp
74.7729 491.533 mo
75.0308 491.851 71.665 494.415 71.665 494.415 cv
70.7061 492.543 li
70.7061 492.543 74.5127 491.21 74.7729 491.533 cv
cp
73.0088 500.759 mo
72.5908 501.094 69.5889 499.391 69.5889 499.391 cv
71.4629 496.813 li
71.4629 496.813 73.3848 500.456 73.0088 500.759 cv
cp
65.064 502.432 mo
64.7632 502.2 65.3887 498.749 65.3887 498.749 cv
67.709 500.165 li
67.1934 500.642 65.251 502.576 65.064 502.432 cv
cp
65.6055 493.474 mo
64.7944 496.967 li
64.7944 496.967 61.0703 494.849 61.1689 494.423 cv
61.2935 493.883 65.6055 493.474 65.6055 493.474 cv
cp
69.4209 492.913 mo
69.4209 492.913 70.7573 495.271 70.6401 495.65 cv
70.5498 495.943 68.4971 498.929 68.4971 498.929 cv
65.6772 497.524 li
65.6772 497.524 66.6992 493.57 66.9224 493.301 cv
67.1489 493.026 69.4209 492.913 69.4209 492.913 cv
cp
67.0322 485.985 mo
65.7183 492.109 li
65.7065 492.109 li
65.686 492.194 li
59.3955 493.581 li
59.2119 493.614 59.0537 493.781 59.0034 493.996 cv
58.9526 494.211 59.0205 494.423 59.1729 494.522 cv
64.0498 498.075 li
63.5947 503.578 li
63.5625 504.181 63.9448 504.695 64.0972 504.771 cv
64.2485 504.848 64.6655 504.631 64.7979 504.481 cv
68.521 500.66 li
74.8374 503.493 li
74.9995 503.573 75.6689 503.605 75.7998 503.433 cv
75.9297 503.259 75.959 503.015 75.8706 502.834 cv
73.2324 496.116 li
73.3291 495.986 li
77.6099 490.694 li
77.7612 490.543 77.8184 490.296 77.7505 490.098 cv
77.7505 490.098 77.7505 490.098 77.7495 490.092 cv
77.6826 489.898 77.1543 489.687 76.9688 489.733 cv
70.3984 490.867 li
67.8281 485.772 li
67.752 485.589 67.5801 485.496 67.396 485.548 cv
67.2158 485.596 67.0693 485.771 67.0322 485.985 cv
cp
f
69.7266 464.163 mo
71.4736 451.28 li
85.8647 450.044 li
72.4526 444.208 li
75.2026 431.51 li
66.7891 440.746 li
53.4238 433.878 li
62.0264 446.347 li
51.5781 454.708 li
64.6245 452.671 li
69.7266 464.163 li
cp
f
186.942 110.993 mo
180.751 117.795 li
184.953 127.782 li
174.267 121.625 li
166.565 130.917 li
168.229 118.51 li
161.181 113.447 li
169.85 111.202 li
172.837 100.949 li
177.067 111.035 li
186.942 110.993 li
cp
f
171.975 92.8447 mo
171.559 92.8286 171.237 92.4819 171.251 92.0684 cv
171.251 92.0684 li
171.456 86.3452 li
171.47 85.9297 171.819 85.6074 172.232 85.6216 cv
172.232 85.6216 li
172.646 85.6357 172.97 85.9844 172.954 86.3979 cv
172.954 86.3979 li
172.751 92.1211 li
172.735 92.5259 172.403 92.8452 172.001 92.8452 cv
172.001 92.8452 li
171.992 92.8452 171.983 92.8452 171.975 92.8447 cv
171.975 92.8447 li
cp
f
171.457 82.04 mo
171.251 72.8823 li
171.241 72.4688 171.57 72.126 171.983 72.1162 cv
171.983 72.1162 li
172.397 72.106 172.742 72.4346 172.75 72.8481 cv
172.75 72.8481 li
172.957 82.0054 li
172.965 82.4189 172.638 82.7637 172.223 82.7715 cv
172.223 82.7715 li
172.216 82.772 172.21 82.772 172.204 82.772 cv
172.204 82.772 li
171.799 82.772 171.466 82.4473 171.457 82.04 cv
171.457 82.04 li
cp
f
164.313 90.9297 mo
159.061 71.1138 li
158.956 70.7144 159.194 70.3032 159.593 70.1982 cv
159.593 70.1982 li
159.995 70.0908 160.406 70.3296 160.511 70.731 cv
160.511 70.731 li
165.763 90.5444 li
165.869 90.9458 165.631 91.355 165.23 91.4624 cv
165.23 91.4624 li
165.167 91.479 165.102 91.4868 165.039 91.4868 cv
165.039 91.4868 li
164.706 91.4868 164.401 91.2646 164.313 90.9297 cv
164.313 90.9297 li
cp
f
159.185 96.5835 mo
153.422 86.8311 li
153.211 86.4746 153.329 86.0151 153.685 85.8047 cv
153.685 85.8047 li
154.041 85.5942 154.503 85.7114 154.713 86.0679 cv
154.713 86.0679 li
160.479 95.8203 li
160.687 96.1768 160.569 96.6382 160.213 96.8486 cv
160.213 96.8486 li
160.094 96.9194 159.963 96.9526 159.833 96.9526 cv
159.833 96.9526 li
159.577 96.9526 159.326 96.8208 159.185 96.5835 cv
159.185 96.5835 li
cp
f
151.412 83.2563 mo
148.514 78.2368 li
148.308 77.877 148.431 77.418 148.789 77.2114 cv
148.789 77.2114 li
149.149 77.0054 149.606 77.1284 149.814 77.4868 cv
149.814 77.4868 li
152.71 82.5059 li
152.918 82.8657 152.795 83.3247 152.435 83.5313 cv
152.435 83.5313 li
152.317 83.5991 152.189 83.6313 152.062 83.6313 cv
152.062 83.6313 li
151.803 83.6313 151.55 83.4966 151.412 83.2563 cv
151.412 83.2563 li
cp
f
156.952 102.638 mo
140.843 87.4116 li
140.544 87.1284 140.53 86.6528 140.815 86.3511 cv
140.815 86.3511 li
141.099 86.0518 141.574 86.0376 141.875 86.3228 cv
141.875 86.3228 li
157.981 101.549 li
158.283 101.832 158.295 102.308 158.012 102.609 cv
158.012 102.609 li
157.864 102.764 157.666 102.843 157.467 102.843 cv
157.467 102.843 li
157.282 102.843 157.097 102.775 156.952 102.638 cv
156.952 102.638 li
cp
f
155.894 108.561 mo
142.381 101.317 li
142.015 101.121 141.878 100.666 142.074 100.301 cv
142.074 100.301 li
142.271 99.937 142.726 99.7998 143.09 99.9937 cv
143.09 99.9937 li
156.602 107.239 li
156.968 107.436 157.105 107.889 156.909 108.255 cv
156.909 108.255 li
156.773 108.507 156.515 108.65 156.247 108.65 cv
156.247 108.65 li
156.127 108.65 156.006 108.622 155.894 108.561 cv
155.894 108.561 li
cp
f
137.669 98.8403 mo
133.529 96.4844 li
133.167 96.2783 133.042 95.8203 133.246 95.4609 cv
133.246 95.4609 li
133.452 95.1016 133.91 94.9761 134.27 95.1802 cv
134.27 95.1802 li
138.41 97.5361 li
138.77 97.7397 138.896 98.1982 138.69 98.5576 cv
138.69 98.5576 li
138.553 98.8018 138.299 98.938 138.039 98.938 cv
138.039 98.938 li
137.913 98.938 137.786 98.9063 137.669 98.8403 cv
137.669 98.8403 li
cp
f
149.06 112.7 mo
141.428 110.652 li
141.028 110.545 140.792 110.133 140.899 109.732 cv
140.899 109.732 li
141.006 109.333 141.416 109.096 141.818 109.203 cv
141.818 109.203 li
149.448 111.251 li
149.848 111.358 150.085 111.768 149.978 112.17 cv
149.978 112.17 li
149.888 112.504 149.585 112.726 149.254 112.726 cv
149.254 112.726 li
149.19 112.726 149.125 112.718 149.06 112.7 cv
149.06 112.7 li
cp
f
136.084 109.223 mo
130.487 107.721 li
130.088 107.614 129.85 107.202 129.958 106.803 cv
129.958 106.803 li
130.065 106.403 130.477 106.165 130.877 106.272 cv
130.877 106.272 li
136.474 107.773 li
136.873 107.88 137.111 108.292 137.002 108.692 cv
137.002 108.692 li
136.913 109.027 136.609 109.249 136.278 109.248 cv
136.278 109.248 li
136.214 109.248 136.149 109.24 136.084 109.223 cv
136.084 109.223 li
cp
f
128.842 118.439 mo
128.84 118.025 129.174 117.688 129.588 117.685 cv
129.588 117.685 li
150.975 117.566 li
151.387 117.564 151.725 117.897 151.727 118.312 cv
151.727 118.312 li
151.731 118.727 151.396 119.064 150.983 119.066 cv
150.983 119.066 li
129.596 119.186 li
129.595 119.186 129.594 119.186 129.593 119.186 cv
129.593 119.186 li
129.18 119.186 128.844 118.853 128.842 118.439 cv
128.842 118.439 li
cp
f
138.984 127.675 mo
138.881 127.274 139.122 126.866 139.521 126.761 cv
139.521 126.761 li
149.883 124.066 li
150.286 123.962 150.694 124.203 150.799 124.604 cv
150.799 124.604 li
150.902 125.004 150.662 125.414 150.261 125.518 cv
150.261 125.518 li
139.9 128.212 li
139.836 128.229 139.772 128.237 139.709 128.237 cv
139.709 128.237 li
139.375 128.237 139.072 128.013 138.984 127.675 cv
138.984 127.675 li
cp
f
129.104 130.36 mo
128.997 129.96 129.235 129.548 129.635 129.441 cv
129.635 129.441 li
135.231 127.942 li
135.63 127.835 136.042 128.073 136.149 128.473 cv
136.149 128.473 li
136.258 128.872 136.02 129.284 135.62 129.391 cv
135.62 129.391 li
130.022 130.891 li
129.958 130.908 129.893 130.916 129.828 130.916 cv
129.828 130.916 li
129.497 130.916 129.193 130.694 129.104 130.36 cv
129.104 130.36 li
cp
f
145.435 134.929 mo
145.229 134.571 145.352 134.112 145.71 133.904 cv
145.71 133.904 li
152.552 129.956 li
152.912 129.75 153.371 129.871 153.578 130.231 cv
153.578 130.231 li
153.784 130.589 153.661 131.048 153.302 131.254 cv
153.302 131.254 li
146.46 135.205 li
146.343 135.272 146.214 135.304 146.087 135.304 cv
146.087 135.304 li
145.828 135.304 145.575 135.17 145.435 134.929 cv
145.435 134.929 li
cp
f
136.367 140.384 mo
136.148 140.032 136.256 139.57 136.607 139.352 cv
136.607 139.352 li
140.899 136.684 li
141.25 136.466 141.712 136.573 141.931 136.926 cv
141.931 136.926 li
142.151 137.278 142.042 137.74 141.69 137.958 cv
141.69 137.958 li
137.399 140.624 li
137.275 140.701 137.139 140.738 137.003 140.738 cv
137.003 140.738 li
136.753 140.738 136.508 140.612 136.367 140.384 cv
136.367 140.384 li
cp
f
141.49 151.717 mo
141.19 151.432 141.18 150.958 141.465 150.659 cv
141.465 150.659 li
158.546 132.76 li
158.833 132.461 159.307 132.449 159.607 132.736 cv
159.607 132.736 li
159.906 133.021 159.918 133.495 159.631 133.796 cv
159.631 133.796 li
142.55 151.693 li
142.403 151.848 142.206 151.926 142.007 151.926 cv
142.007 151.926 li
141.821 151.926 141.635 151.857 141.49 151.717 cv
141.49 151.717 li
cp
f
158.243 146.579 mo
157.884 146.373 157.761 145.913 157.97 145.555 cv
157.97 145.555 li
161.92 138.714 li
162.126 138.356 162.586 138.234 162.945 138.441 cv
162.945 138.441 li
163.303 138.647 163.427 139.107 163.218 139.465 cv
163.218 139.465 li
159.268 146.306 li
159.129 146.546 158.877 146.681 158.618 146.681 cv
158.618 146.681 li
158.49 146.681 158.361 146.648 158.243 146.579 cv
158.243 146.579 li
cp
f
152.581 156.391 mo
152.221 156.182 152.099 155.725 152.306 155.365 cv
152.306 155.365 li
155.203 150.347 li
155.409 149.989 155.869 149.866 156.227 150.072 cv
156.227 150.072 li
156.584 150.281 156.708 150.738 156.502 151.096 cv
156.502 151.096 li
153.604 156.116 li
153.466 156.356 153.213 156.491 152.954 156.491 cv
152.954 156.491 li
152.827 156.491 152.698 156.458 152.581 156.391 cv
152.581 156.391 li
cp
f
166.457 149.537 mo
166.057 149.425 165.822 149.014 165.932 148.614 cv
165.932 148.614 li
168.889 137.834 li
168.998 137.435 169.41 137.2 169.811 137.31 cv
169.811 137.31 li
170.21 137.419 170.445 137.832 170.335 138.231 cv
170.335 138.231 li
167.379 149.011 li
167.287 149.345 166.984 149.563 166.653 149.563 cv
166.653 149.563 li
166.588 149.563 166.522 149.554 166.457 149.537 cv
166.457 149.537 li
cp
f
163.528 160.479 mo
163.129 160.371 162.89 159.96 162.997 159.559 cv
162.997 159.559 li
164.498 153.962 li
164.605 153.563 165.017 153.324 165.417 153.432 cv
165.417 153.432 li
165.816 153.539 166.056 153.95 165.948 154.351 cv
165.948 154.351 li
164.447 159.948 li
164.357 160.284 164.055 160.504 163.723 160.504 cv
163.723 160.504 li
163.659 160.504 163.593 160.496 163.528 160.479 cv
163.528 160.479 li
cp
f
174.41 160.844 mo
174.412 138.324 li
174.412 137.911 174.747 137.574 175.163 137.574 cv
175.163 137.574 li
175.576 137.576 175.911 137.911 175.911 138.324 cv
175.911 138.324 li
175.911 160.844 li
175.911 161.257 175.574 161.594 175.161 161.594 cv
175.161 161.594 li
174.747 161.594 174.41 161.257 174.41 160.844 cv
174.41 160.844 li
cp
f
184.313 153.949 mo
180.793 140.555 li
180.688 140.153 180.928 139.743 181.328 139.639 cv
181.328 139.639 li
181.73 139.534 182.138 139.773 182.244 140.173 cv
182.244 140.173 li
185.763 153.567 li
185.868 153.969 185.628 154.379 185.229 154.483 cv
185.229 154.483 li
185.165 154.5 185.1 154.508 185.037 154.508 cv
185.037 154.508 li
184.705 154.508 184.401 154.285 184.313 153.949 cv
184.313 153.949 li
cp
f
185.778 159.164 mo
185.148 157.19 li
185.022 156.796 185.239 156.374 185.636 156.248 cv
185.636 156.248 li
186.029 156.122 186.452 156.341 186.578 156.735 cv
186.578 156.735 li
187.206 158.709 li
187.332 159.103 187.114 159.525 186.72 159.651 cv
186.72 159.651 li
186.644 159.675 186.567 159.687 186.492 159.687 cv
186.492 159.687 li
186.174 159.687 185.879 159.482 185.778 159.164 cv
185.778 159.164 li
cp
f
196.292 154.531 mo
186.017 136.532 li
185.811 136.172 185.937 135.714 186.297 135.509 cv
186.297 135.509 li
186.657 135.304 187.115 135.43 187.32 135.79 cv
187.32 135.79 li
197.596 153.789 li
197.801 154.148 197.675 154.606 197.315 154.812 cv
197.315 154.812 li
197.198 154.878 197.07 154.91 196.944 154.91 cv
196.944 154.91 li
196.684 154.91 196.431 154.774 196.292 154.531 cv
196.292 154.531 li
cp
f
197.262 139.362 mo
191.681 133.776 li
191.388 133.483 191.388 133.007 191.681 132.714 cv
191.681 132.714 li
191.974 132.421 192.45 132.423 192.741 132.716 cv
192.741 132.716 li
198.323 138.303 li
198.616 138.596 198.616 139.072 198.323 139.362 cv
198.323 139.362 li
198.177 139.51 197.985 139.583 197.793 139.583 cv
197.793 139.583 li
197.601 139.583 197.408 139.509 197.262 139.362 cv
197.262 139.362 li
cp
f
205.271 147.372 mo
201.177 143.274 li
200.884 142.981 200.884 142.506 201.177 142.213 cv
201.177 142.213 li
201.47 141.92 201.944 141.92 202.237 142.213 cv
202.237 142.213 li
206.332 146.312 li
206.625 146.604 206.625 147.079 206.332 147.372 cv
206.332 147.372 li
206.185 147.519 205.993 147.592 205.801 147.592 cv
205.801 147.592 li
205.609 147.592 205.417 147.519 205.271 147.372 cv
205.271 147.372 li
cp
f
212.081 138.126 mo
194.396 127.613 li
194.04 127.401 193.923 126.941 194.133 126.584 cv
194.133 126.584 li
194.345 126.228 194.806 126.111 195.162 126.323 cv
195.162 126.323 li
212.847 136.836 li
213.204 137.048 213.32 137.509 213.11 137.863 cv
213.11 137.863 li
212.97 138.1 212.72 138.231 212.463 138.231 cv
212.463 138.231 li
212.333 138.231 212.201 138.198 212.081 138.126 cv
212.081 138.126 li
cp
f
209.916 125.706 mo
197.717 122.459 li
197.316 122.354 197.077 121.942 197.186 121.543 cv
197.186 121.543 li
197.291 121.142 197.703 120.903 198.102 121.009 cv
198.102 121.009 li
210.301 124.256 li
210.702 124.362 210.94 124.773 210.834 125.173 cv
210.834 125.173 li
210.744 125.509 210.439 125.731 210.108 125.731 cv
210.108 125.731 li
210.044 125.731 209.98 125.723 209.916 125.706 cv
209.916 125.706 li
cp
f
216.27 127.437 mo
213.535 126.646 li
213.137 126.532 212.909 126.116 213.023 125.719 cv
213.023 125.719 li
213.137 125.319 213.555 125.091 213.953 125.205 cv
213.953 125.205 li
216.686 125.996 li
217.085 126.11 217.314 126.526 217.2 126.923 cv
217.2 126.923 li
217.104 127.252 216.803 127.466 216.477 127.466 cv
216.477 127.466 li
216.409 127.466 216.339 127.457 216.27 127.437 cv
216.27 127.437 li
cp
f
195.908 115.395 mo
195.901 114.982 196.231 114.64 196.646 114.634 cv
196.646 114.634 li
205.734 114.487 li
206.147 114.481 206.489 114.811 206.496 115.226 cv
206.496 115.226 li
206.503 115.639 206.172 115.981 205.758 115.987 cv
205.758 115.987 li
196.669 116.134 li
196.665 116.134 196.662 116.134 196.658 116.134 cv
196.658 116.134 li
196.25 116.134 195.914 115.805 195.908 115.395 cv
195.908 115.395 li
cp
f
209.068 115.313 mo
209.066 114.899 209.401 114.561 209.814 114.561 cv
209.814 114.561 li
217.565 114.528 li
217.979 114.526 218.318 114.86 218.318 115.274 cv
218.318 115.274 li
218.32 115.688 217.986 116.024 217.572 116.026 cv
217.572 116.026 li
209.821 116.059 li
209.819 116.059 209.818 116.059 209.817 116.059 cv
209.817 116.059 li
209.405 116.059 209.07 115.726 209.068 115.313 cv
209.068 115.313 li
cp
f
196.395 109.125 mo
196.293 108.724 196.538 108.316 196.939 108.214 cv
196.939 108.214 li
218.363 102.835 li
218.765 102.733 219.172 102.978 219.272 103.379 cv
219.272 103.379 li
219.375 103.781 219.13 104.189 218.728 104.289 cv
218.728 104.289 li
197.305 109.669 li
197.244 109.685 197.182 109.692 197.122 109.692 cv
197.122 109.692 li
196.786 109.692 196.48 109.466 196.395 109.125 cv
196.395 109.125 li
cp
f
193.587 103.482 mo
193.378 103.124 193.498 102.666 193.856 102.457 cv
193.856 102.457 li
202.458 97.4302 li
202.816 97.2222 203.276 97.3423 203.486 97.7007 cv
203.486 97.7007 li
203.693 98.0586 203.574 98.5166 203.215 98.7261 cv
203.215 98.7261 li
194.613 103.751 li
194.494 103.821 194.363 103.854 194.234 103.854 cv
194.234 103.854 li
193.977 103.854 193.726 103.721 193.587 103.482 cv
193.587 103.482 li
cp
f
205.506 96.5459 mo
205.3 96.1875 205.422 95.729 205.781 95.521 cv
205.781 95.521 li
210.803 92.6265 li
211.161 92.4209 211.62 92.543 211.827 92.9014 cv
211.827 92.9014 li
212.035 93.2598 211.911 93.7183 211.552 93.9263 cv
211.552 93.9263 li
206.531 96.8208 li
206.413 96.8892 206.284 96.9214 206.157 96.9214 cv
206.157 96.9214 li
205.898 96.9214 205.646 96.7866 205.506 96.5459 cv
205.506 96.5459 li
cp
f
188.304 100.102 mo
188.009 99.811 188.004 99.3369 188.295 99.0415 cv
188.295 99.0415 li
203.037 84.1074 li
203.328 83.814 203.802 83.8101 204.097 84.1011 cv
204.097 84.1011 li
204.392 84.3921 204.394 84.8662 204.103 85.1616 cv
204.103 85.1616 li
189.364 100.096 li
189.218 100.245 189.024 100.319 188.832 100.319 cv
188.832 100.319 li
188.641 100.319 188.45 100.247 188.304 100.102 cv
188.304 100.102 li
cp
f
184.06 95.7593 mo
183.7 95.5562 183.574 95.0972 183.777 94.7378 cv
183.777 94.7378 li
186.833 89.3325 li
187.038 88.9712 187.495 88.8452 187.856 89.0483 cv
187.856 89.0483 li
188.216 89.2534 188.344 89.7104 188.139 90.0698 cv
188.139 90.0698 li
185.083 95.4751 li
184.945 95.7197 184.691 95.8564 184.429 95.8564 cv
184.429 95.8564 li
184.304 95.8564 184.177 95.8252 184.06 95.7593 cv
184.06 95.7593 li
cp
f
188.529 87.73 mo
188.171 87.5225 188.049 87.063 188.259 86.7056 cv
188.259 86.7056 li
193.561 77.5942 li
193.77 77.2363 194.227 77.1143 194.585 77.3218 cv
194.585 77.3218 li
194.943 77.5313 195.065 77.9907 194.857 78.3481 cv
194.857 78.3481 li
189.556 87.4595 li
189.416 87.6987 189.164 87.8325 188.906 87.8325 cv
188.906 87.8325 li
188.778 87.8325 188.648 87.7993 188.529 87.73 cv
188.529 87.73 li
cp
f
178.002 94.5254 mo
177.603 94.4194 177.365 94.0093 177.47 93.6094 cv
177.47 93.6094 li
182.716 73.7646 li
182.822 73.3647 183.232 73.1255 183.634 73.2329 cv
183.634 73.2329 li
184.034 73.3384 184.271 73.7485 184.166 74.1484 cv
184.166 74.1484 li
178.92 93.9932 li
178.832 94.3291 178.528 94.5503 178.195 94.5503 cv
178.195 94.5503 li
178.132 94.5503 178.067 94.542 178.002 94.5254 cv
178.002 94.5254 li
cp
f
427.046 328.945 mo
427.046 315.604 li
427.046 315.188 427.381 314.853 427.797 314.853 cv
427.797 314.853 li
428.211 314.853 428.545 315.188 428.545 315.604 cv
428.545 315.604 li
428.545 328.945 li
428.545 329.359 428.211 329.693 427.797 329.693 cv
427.797 329.693 li
427.381 329.693 427.046 329.359 427.046 328.945 cv
427.046 328.945 li
cp
f
427.046 310.71 mo
427.046 307.924 li
427.046 307.508 427.381 307.173 427.797 307.173 cv
427.797 307.173 li
428.211 307.173 428.545 307.508 428.545 307.924 cv
428.545 307.924 li
428.545 310.71 li
428.545 311.124 428.211 311.46 427.797 311.46 cv
427.797 311.46 li
427.381 311.46 427.046 311.124 427.046 310.71 cv
427.046 310.71 li
cp
f
413.102 315.377 mo
411.329 311.03 li
411.174 310.648 411.358 310.21 411.742 310.053 cv
411.742 310.053 li
412.124 309.896 412.563 310.08 412.72 310.464 cv
412.72 310.464 li
414.492 314.812 li
414.648 315.195 414.463 315.634 414.078 315.788 cv
414.078 315.788 li
413.986 315.826 413.891 315.845 413.796 315.845 cv
413.796 315.845 li
413.501 315.845 413.22 315.668 413.102 315.377 cv
413.102 315.377 li
cp
f
401.637 323.145 mo
398.526 318.949 li
398.278 318.617 398.349 318.146 398.681 317.9 cv
398.681 317.9 li
399.014 317.654 399.483 317.724 399.729 318.057 cv
399.729 318.057 li
402.84 322.25 li
403.088 322.583 403.018 323.053 402.686 323.299 cv
402.686 323.299 li
402.551 323.399 402.394 323.447 402.237 323.447 cv
402.237 323.447 li
402.009 323.447 401.783 323.343 401.637 323.145 cv
401.637 323.145 li
cp
f
396.683 336.078 mo
389.354 332.134 li
388.99 331.938 388.854 331.484 389.05 331.117 cv
389.05 331.117 li
389.246 330.753 389.702 330.617 390.067 330.813 cv
390.067 330.813 li
397.394 334.758 li
397.758 334.953 397.896 335.41 397.698 335.774 cv
397.698 335.774 li
397.563 336.025 397.305 336.168 397.038 336.168 cv
397.038 336.168 li
396.918 336.168 396.796 336.14 396.683 336.078 cv
396.683 336.078 li
cp
f
385.777 346.597 mo
383.034 346.111 li
382.627 346.041 382.354 345.652 382.427 345.244 cv
382.427 345.244 li
382.498 344.836 382.887 344.563 383.295 344.635 cv
383.295 344.635 li
386.039 345.119 li
386.447 345.192 386.72 345.581 386.647 345.989 cv
386.647 345.989 li
386.582 346.353 386.267 346.608 385.909 346.608 cv
385.909 346.608 li
385.866 346.608 385.821 346.604 385.777 346.597 cv
385.777 346.597 li
cp
f
382.427 361.244 mo
382.354 360.837 382.627 360.447 383.034 360.375 cv
383.034 360.375 li
385.777 359.892 li
386.186 359.819 386.574 360.092 386.647 360.5 cv
386.647 360.5 li
386.72 360.907 386.447 361.297 386.039 361.369 cv
386.039 361.369 li
383.295 361.853 li
383.25 361.86 383.206 361.864 383.162 361.864 cv
383.162 361.864 li
382.806 361.864 382.49 361.608 382.427 361.244 cv
382.427 361.244 li
cp
f
387.894 376.271 mo
387.691 375.909 387.82 375.453 388.183 375.251 cv
388.183 375.251 li
396.165 370.796 li
396.528 370.594 396.982 370.723 397.185 371.086 cv
397.185 371.086 li
397.387 371.448 397.257 371.904 396.896 372.106 cv
396.896 372.106 li
388.914 376.56 li
388.798 376.624 388.672 376.655 388.548 376.655 cv
388.548 376.655 li
388.285 376.655 388.03 376.517 387.894 376.271 cv
387.894 376.271 li
cp
f
398.697 388.468 mo
398.357 388.23 398.276 387.763 398.515 387.423 cv
398.515 387.423 li
401.168 383.639 li
401.404 383.302 401.873 383.22 402.213 383.458 cv
402.213 383.458 li
402.551 383.695 402.634 384.162 402.395 384.502 cv
402.395 384.502 li
399.742 388.284 li
399.597 388.493 399.364 388.604 399.129 388.604 cv
399.129 388.604 li
398.979 388.604 398.829 388.56 398.697 388.468 cv
398.697 388.468 li
cp
f
412.533 395.034 mo
412.144 394.894 411.942 394.464 412.085 394.073 cv
412.085 394.073 li
413.037 391.455 li
413.179 391.064 413.609 390.864 413.997 391.006 cv
413.997 391.006 li
414.388 391.148 414.588 391.578 414.446 391.967 cv
414.446 391.967 li
413.494 394.587 li
413.383 394.891 413.096 395.079 412.79 395.079 cv
412.79 395.079 li
412.705 395.079 412.618 395.064 412.533 395.034 cv
412.533 395.034 li
cp
f
427.665 399.782 mo
427.251 399.77 426.925 399.425 426.938 399.011 cv
426.938 399.011 li
427.14 392.064 li
427.152 391.65 427.498 391.324 427.912 391.337 cv
427.912 391.337 li
428.326 391.35 428.652 391.694 428.64 392.108 cv
428.64 392.108 li
428.437 399.055 li
428.425 399.461 428.092 399.783 427.688 399.783 cv
427.688 399.783 li
427.681 399.783 427.673 399.783 427.665 399.782 cv
427.665 399.782 li
cp
f
442.596 396.091 mo
441.641 393.474 li
441.5 393.084 441.699 392.654 442.089 392.512 cv
442.089 392.512 li
442.479 392.371 442.908 392.57 443.051 392.96 cv
443.051 392.96 li
444.004 395.577 li
444.146 395.967 443.945 396.396 443.558 396.539 cv
443.558 396.539 li
443.473 396.569 443.387 396.584 443.302 396.584 cv
443.302 396.584 li
442.994 396.584 442.706 396.396 442.596 396.091 cv
442.596 396.091 li
cp
f
456.793 388.725 mo
453.053 384.548 li
452.775 384.239 452.803 383.766 453.111 383.488 cv
453.111 383.488 li
453.42 383.213 453.895 383.238 454.171 383.547 cv
454.171 383.547 li
457.911 387.726 li
458.188 388.034 458.161 388.509 457.853 388.784 cv
457.853 388.784 li
457.71 388.912 457.53 388.976 457.353 388.976 cv
457.353 388.976 li
457.146 388.976 456.941 388.892 456.793 388.725 cv
456.793 388.725 li
cp
f
467.393 376.282 mo
462.764 373.909 li
462.396 373.72 462.249 373.269 462.438 372.898 cv
462.438 372.898 li
462.627 372.53 463.079 372.386 463.448 372.575 cv
463.448 372.575 li
468.078 374.947 li
468.446 375.137 468.593 375.588 468.404 375.958 cv
468.404 375.958 li
468.271 376.217 468.009 376.365 467.736 376.365 cv
467.736 376.365 li
467.621 376.365 467.503 376.338 467.393 376.282 cv
467.393 376.282 li
cp
f
473.131 361.778 mo
463.504 360.128 li
463.096 360.059 462.822 359.671 462.892 359.264 cv
462.892 359.264 li
462.961 358.855 463.349 358.58 463.756 358.651 cv
463.756 358.651 li
473.384 360.3 li
473.791 360.369 474.066 360.757 473.995 361.166 cv
473.995 361.166 li
473.934 361.532 473.616 361.789 473.258 361.789 cv
473.258 361.789 li
473.216 361.789 473.174 361.785 473.131 361.778 cv
473.131 361.778 li
cp
f
468.949 345.989 mo
468.877 345.582 469.15 345.192 469.559 345.121 cv
469.559 345.121 li
472.303 344.636 li
472.708 344.562 473.1 344.835 473.171 345.243 cv
473.171 345.243 li
473.245 345.651 472.972 346.04 472.563 346.114 cv
472.563 346.114 li
469.819 346.598 li
469.774 346.605 469.73 346.609 469.687 346.609 cv
469.687 346.609 li
469.33 346.609 469.015 346.353 468.949 345.989 cv
468.949 345.989 li
cp
f
462.507 333.754 mo
462.299 333.396 462.423 332.937 462.78 332.73 cv
462.78 332.73 li
465.194 331.336 li
465.553 331.128 466.011 331.25 466.219 331.608 cv
466.219 331.608 li
466.427 331.968 466.304 332.426 465.944 332.634 cv
465.944 332.634 li
463.532 334.027 li
463.413 334.096 463.284 334.129 463.156 334.129 cv
463.156 334.129 li
462.897 334.129 462.646 333.994 462.507 333.754 cv
462.507 333.754 li
cp
f
452.633 323.535 mo
452.31 323.277 452.258 322.806 452.518 322.482 cv
452.518 322.482 li
456.398 317.663 li
456.658 317.34 457.131 317.289 457.452 317.548 cv
457.452 317.548 li
457.775 317.808 457.827 318.28 457.567 318.604 cv
457.567 318.604 li
453.687 323.422 li
453.538 323.606 453.321 323.702 453.103 323.702 cv
453.103 323.702 li
452.938 323.702 452.771 323.647 452.633 323.535 cv
452.633 323.535 li
cp
f
441.031 316.866 mo
440.65 316.705 440.473 316.265 440.632 315.883 cv
440.632 315.883 li
442.938 310.423 li
443.1 310.041 443.54 309.863 443.921 310.024 cv
443.921 310.024 li
444.303 310.186 444.482 310.626 444.321 311.007 cv
444.321 311.007 li
442.015 316.466 li
441.894 316.753 441.615 316.926 441.323 316.926 cv
441.323 316.926 li
441.226 316.926 441.127 316.906 441.031 316.866 cv
441.031 316.866 li
cp
f
417.996 328.424 mo
415.339 321.207 li
415.196 320.818 415.395 320.387 415.783 320.244 cv
415.783 320.244 li
416.172 320.101 416.604 320.301 416.747 320.689 cv
416.747 320.689 li
419.404 327.905 li
419.548 328.294 419.348 328.727 418.959 328.868 cv
418.959 328.868 li
418.874 328.9 418.786 328.915 418.7 328.915 cv
418.7 328.915 li
418.395 328.915 418.108 328.727 417.996 328.424 cv
417.996 328.424 li
cp
f
408.846 331.827 mo
405.132 327.398 li
404.866 327.08 404.908 326.608 405.226 326.341 cv
405.226 326.341 li
405.543 326.073 406.014 326.117 406.281 326.435 cv
406.281 326.435 li
409.996 330.863 li
410.263 331.181 410.219 331.652 409.902 331.919 cv
409.902 331.919 li
409.762 332.037 409.591 332.095 409.421 332.095 cv
409.421 332.095 li
409.207 332.095 408.995 332.004 408.846 331.827 cv
408.846 331.827 li
cp
f
407.389 342.449 mo
402.022 339.098 li
401.67 338.877 401.563 338.413 401.782 338.063 cv
401.782 338.063 li
402.002 337.713 402.465 337.604 402.815 337.825 cv
402.815 337.825 li
408.184 341.178 li
408.534 341.397 408.643 341.86 408.422 342.211 cv
408.422 342.211 li
408.279 342.438 408.035 342.563 407.785 342.563 cv
407.785 342.563 li
407.649 342.563 407.513 342.526 407.389 342.449 cv
407.389 342.449 li
cp
f
399.513 349.019 mo
393.82 348.014 li
393.412 347.942 393.141 347.553 393.212 347.145 cv
393.212 347.145 li
393.285 346.735 393.673 346.465 394.081 346.536 cv
394.081 346.536 li
399.773 347.543 li
400.183 347.613 400.455 348.003 400.382 348.409 cv
400.382 348.409 li
400.317 348.773 400.003 349.03 399.646 349.03 cv
399.646 349.03 li
399.602 349.03 399.558 349.026 399.513 349.019 cv
399.513 349.019 li
cp
f
391.524 359.274 mo
391.491 358.859 391.798 358.498 392.211 358.465 cv
392.211 358.465 li
404.723 357.464 li
405.136 357.431 405.497 357.736 405.53 358.151 cv
405.53 358.151 li
405.563 358.564 405.255 358.926 404.842 358.959 cv
404.842 358.959 li
392.332 359.96 li
392.312 359.962 392.291 359.963 392.271 359.963 cv
392.271 359.963 li
391.884 359.963 391.557 359.666 391.524 359.274 cv
391.524 359.274 li
cp
f
400.35 369.091 mo
400.142 368.732 400.26 368.273 400.616 368.063 cv
400.616 368.063 li
403.47 366.386 li
403.828 366.175 404.287 366.296 404.498 366.652 cv
404.498 366.652 li
404.708 367.01 404.587 367.471 404.23 367.679 cv
404.23 367.679 li
401.378 369.357 li
401.258 369.427 401.127 369.46 400.998 369.46 cv
400.998 369.46 li
400.74 369.46 400.49 369.328 400.35 369.091 cv
400.35 369.091 li
cp
f
405.225 380.147 mo
404.907 379.881 404.865 379.407 405.13 379.09 cv
405.13 379.09 li
408.847 374.663 li
409.112 374.347 409.586 374.305 409.903 374.571 cv
409.903 374.571 li
410.221 374.837 410.262 375.311 409.995 375.628 cv
409.995 375.628 li
406.28 380.054 li
406.132 380.23 405.919 380.322 405.705 380.322 cv
405.705 380.322 li
405.535 380.322 405.364 380.265 405.225 380.147 cv
405.225 380.147 li
cp
f
415.785 386.247 mo
415.396 386.105 415.197 385.675 415.338 385.286 cv
415.338 385.286 li
419.093 375.015 li
419.236 374.624 419.667 374.425 420.056 374.567 cv
420.056 374.567 li
420.444 374.709 420.645 375.14 420.503 375.528 cv
420.503 375.528 li
416.748 385.801 li
416.636 386.104 416.348 386.293 416.042 386.293 cv
416.042 386.293 li
415.956 386.293 415.869 386.278 415.785 386.247 cv
415.785 386.247 li
cp
f
427.14 386.186 mo
427.05 378.788 li
427.044 378.374 427.376 378.035 427.79 378.029 cv
427.79 378.029 li
428.204 378.024 428.543 378.355 428.548 378.77 cv
428.548 378.77 li
428.64 386.167 li
428.646 386.581 428.313 386.922 427.899 386.926 cv
427.899 386.926 li
427.896 386.926 427.892 386.926 427.888 386.926 cv
427.888 386.926 li
427.479 386.926 427.145 386.596 427.14 386.186 cv
427.14 386.186 li
cp
f
438.849 385.797 mo
436.872 380.366 li
436.729 379.979 436.931 379.547 437.32 379.407 cv
437.32 379.407 li
437.709 379.265 438.139 379.463 438.281 379.855 cv
438.281 379.855 li
440.259 385.284 li
440.4 385.673 440.2 386.104 439.811 386.245 cv
439.811 386.245 li
439.726 386.276 439.639 386.291 439.553 386.291 cv
439.553 386.291 li
439.247 386.291 438.96 386.102 438.849 385.797 cv
438.849 385.797 li
cp
f
449.319 380.058 mo
442.389 371.897 li
442.12 371.581 442.158 371.107 442.475 370.839 cv
442.475 370.839 li
442.789 370.572 443.264 370.61 443.532 370.925 cv
443.532 370.925 li
450.463 379.087 li
450.73 379.403 450.691 379.875 450.377 380.144 cv
450.377 380.144 li
450.235 380.264 450.063 380.322 449.891 380.322 cv
449.891 380.322 li
449.679 380.322 449.468 380.232 449.319 380.058 cv
449.319 380.058 li
cp
f
457.188 371.079 mo
452.182 368.189 li
451.823 367.981 451.699 367.523 451.907 367.165 cv
451.907 367.165 li
452.112 366.806 452.572 366.682 452.932 366.89 cv
452.932 366.89 li
457.938 369.778 li
458.296 369.985 458.42 370.445 458.212 370.802 cv
458.212 370.802 li
458.073 371.045 457.82 371.179 457.562 371.179 cv
457.562 371.179 li
457.435 371.179 457.306 371.146 457.188 371.079 cv
457.188 371.079 li
cp
f
458.306 359.351 mo
452.703 358.425 li
452.294 358.357 452.019 357.971 452.086 357.562 cv
452.086 357.562 li
452.153 357.154 452.539 356.877 452.948 356.944 cv
452.948 356.944 li
458.551 357.87 li
458.958 357.938 459.235 358.323 459.168 358.733 cv
459.168 358.733 li
459.106 359.1 458.789 359.36 458.429 359.36 cv
458.429 359.36 li
458.388 359.36 458.347 359.356 458.306 359.351 cv
458.306 359.351 li
cp
f
453.087 348.5 mo
453.021 348.091 453.303 347.708 453.713 347.646 cv
453.713 347.646 li
462.903 346.217 li
463.312 346.152 463.695 346.432 463.759 346.843 cv
463.759 346.843 li
463.823 347.251 463.542 347.635 463.133 347.698 cv
463.133 347.698 li
453.941 349.126 li
453.902 349.133 453.862 349.136 453.823 349.136 cv
453.823 349.136 li
453.461 349.136 453.144 348.87 453.087 348.5 cv
453.087 348.5 li
cp
f
451.906 339.325 mo
451.7 338.966 451.822 338.507 452.183 338.301 cv
452.183 338.301 li
457.191 335.41 li
457.55 335.203 458.008 335.326 458.216 335.686 cv
458.216 335.686 li
458.423 336.045 458.3 336.504 457.94 336.71 cv
457.94 336.71 li
452.931 339.601 li
452.813 339.669 452.685 339.701 452.558 339.701 cv
452.558 339.701 li
452.298 339.701 452.046 339.566 451.906 339.325 cv
451.906 339.325 li
cp
f
442.933 335.974 mo
442.603 335.722 442.542 335.25 442.794 334.923 cv
442.794 334.923 li
449.297 326.459 li
449.549 326.13 450.021 326.069 450.348 326.321 cv
450.348 326.321 li
450.677 326.572 450.739 327.045 450.488 327.372 cv
450.488 327.372 li
443.985 335.835 li
443.837 336.028 443.614 336.129 443.389 336.129 cv
443.389 336.129 li
443.229 336.129 443.068 336.078 442.933 335.974 cv
442.933 335.974 li
cp
f
437.318 327.082 mo
436.93 326.942 436.73 326.511 436.871 326.123 cv
436.871 326.123 li
438.85 320.692 li
438.992 320.303 439.422 320.102 439.812 320.244 cv
439.812 320.244 li
440.201 320.385 440.401 320.816 440.26 321.205 cv
440.26 321.205 li
438.28 326.634 li
438.171 326.94 437.884 327.129 437.577 327.129 cv
437.577 327.129 li
437.491 327.129 437.404 327.113 437.318 327.082 cv
437.318 327.082 li
cp
f
438.84 353.249 mo
436.292 353.249 432.803 354.544 430.951 356.398 cv
429.097 358.252 427.801 361.74 427.801 364.288 cv
427.801 361.74 426.504 358.252 424.649 356.398 cv
422.797 354.544 419.308 353.249 416.761 353.249 cv
419.308 353.249 422.797 351.951 424.649 350.099 cv
426.504 348.245 427.8 344.754 427.797 342.207 cv
427.8 344.754 429.097 348.245 430.949 350.099 cv
432.803 351.951 436.292 353.249 438.84 353.249 cv
cp
f
204.52 294.779 mo
204.52 275.027 li
204.52 274.612 204.854 274.278 205.269 274.278 cv
205.269 274.278 li
205.684 274.278 206.019 274.612 206.019 275.027 cv
206.019 275.027 li
206.019 294.779 li
206.019 295.194 205.684 295.529 205.269 295.529 cv
205.269 295.529 li
204.854 295.529 204.52 295.194 204.52 294.779 cv
204.52 294.779 li
cp
f
200.071 295.563 mo
196.745 283.198 li
196.638 282.797 196.875 282.387 197.275 282.28 cv
197.275 282.28 li
197.675 282.171 198.086 282.409 198.194 282.81 cv
198.194 282.81 li
201.521 295.172 li
201.627 295.573 201.392 295.983 200.991 296.092 cv
200.991 296.092 li
200.926 296.109 200.861 296.118 200.796 296.118 cv
200.796 296.118 li
200.465 296.118 200.162 295.897 200.071 295.563 cv
200.071 295.563 li
cp
f
195.978 297.47 mo
186.102 280.365 li
185.895 280.005 186.018 279.547 186.375 279.34 cv
186.375 279.34 li
186.734 279.133 187.195 279.256 187.402 279.613 cv
187.402 279.613 li
197.278 296.72 li
197.485 297.08 197.362 297.538 197.003 297.745 cv
197.003 297.745 li
196.885 297.813 196.756 297.846 196.628 297.846 cv
196.628 297.846 li
196.369 297.846 196.117 297.711 195.978 297.47 cv
195.978 297.47 li
cp
f
192.52 300.372 mo
183.456 291.326 li
183.164 291.035 183.164 290.56 183.456 290.266 cv
183.456 290.266 li
183.75 289.972 184.224 289.972 184.516 290.264 cv
184.516 290.264 li
193.579 299.31 li
193.871 299.603 193.871 300.078 193.579 300.372 cv
193.579 300.372 li
193.432 300.518 193.24 300.591 193.047 300.591 cv
193.047 300.591 li
192.856 300.591 192.665 300.518 192.52 300.372 cv
192.52 300.372 li
cp
f
189.926 304.069 mo
172.822 294.193 li
172.462 293.988 172.339 293.528 172.547 293.17 cv
172.547 293.17 li
172.754 292.811 173.213 292.689 173.572 292.895 cv
173.572 292.895 li
190.676 302.77 li
191.036 302.978 191.159 303.436 190.952 303.796 cv
190.952 303.796 li
190.813 304.036 190.561 304.17 190.301 304.17 cv
190.301 304.17 li
190.174 304.17 190.044 304.138 189.926 304.069 cv
189.926 304.069 li
cp
f
188.381 308.313 mo
176.011 305.011 li
175.612 304.904 175.374 304.493 175.48 304.092 cv
175.48 304.092 li
175.587 303.693 175.999 303.455 176.397 303.562 cv
176.397 303.562 li
188.768 306.864 li
189.167 306.971 189.406 307.382 189.299 307.782 cv
189.299 307.782 li
189.209 308.117 188.906 308.339 188.575 308.339 cv
188.575 308.339 li
188.511 308.339 188.446 308.33 188.381 308.313 cv
188.381 308.313 li
cp
f
169.502 312.071 mo
169.502 311.658 169.838 311.32 170.251 311.32 cv
170.251 311.32 li
187.914 311.311 li
188.33 311.311 188.665 311.646 188.665 312.06 cv
188.665 312.06 li
188.665 312.475 188.33 312.811 187.916 312.811 cv
187.916 312.811 li
170.253 312.82 li
170.252 312.82 170.251 312.82 170.25 312.82 cv
170.25 312.82 li
169.835 312.82 169.502 312.484 169.502 312.071 cv
169.502 312.071 li
cp
f
240.203 312.82 mo
222.54 312.811 li
222.125 312.811 221.789 312.475 221.791 312.06 cv
221.791 312.06 li
221.791 311.646 222.126 311.311 222.54 311.311 cv
222.54 311.311 li
240.203 311.32 li
240.619 311.32 240.954 311.658 240.954 312.071 cv
240.954 312.071 li
240.954 312.484 240.621 312.82 240.207 312.82 cv
240.207 312.82 li
240.206 312.82 240.204 312.82 240.203 312.82 cv
240.203 312.82 li
cp
f
209.432 296.092 mo
209.032 295.985 208.795 295.573 208.902 295.172 cv
208.902 295.172 li
212.227 282.81 li
212.335 282.409 212.746 282.171 213.146 282.28 cv
213.146 282.28 li
213.546 282.387 213.783 282.797 213.676 283.198 cv
213.676 283.198 li
210.352 295.563 li
210.261 295.897 209.958 296.118 209.626 296.118 cv
209.626 296.118 li
209.563 296.118 209.497 296.109 209.432 296.092 cv
209.432 296.092 li
cp
f
213.42 297.745 mo
213.061 297.538 212.938 297.08 213.145 296.72 cv
213.145 296.72 li
223.021 279.613 li
223.229 279.256 223.688 279.133 224.045 279.34 cv
224.045 279.34 li
224.405 279.547 224.528 280.005 224.321 280.365 cv
224.321 280.365 li
214.445 297.47 li
214.306 297.711 214.054 297.846 213.794 297.846 cv
213.794 297.846 li
213.667 297.846 213.538 297.813 213.42 297.745 cv
213.42 297.745 li
cp
f
216.845 300.372 mo
216.551 300.078 216.553 299.603 216.845 299.31 cv
216.845 299.31 li
225.907 290.264 li
226.2 289.972 226.675 289.972 226.969 290.266 cv
226.969 290.266 li
227.26 290.56 227.26 291.035 226.967 291.326 cv
226.967 291.326 li
217.905 300.372 li
217.758 300.518 217.566 300.591 217.375 300.591 cv
217.375 300.591 li
217.183 300.591 216.991 300.518 216.845 300.372 cv
216.845 300.372 li
cp
f
219.472 303.796 mo
219.265 303.436 219.388 302.978 219.746 302.77 cv
219.746 302.77 li
236.852 292.895 li
237.211 292.689 237.669 292.811 237.877 293.17 cv
237.877 293.17 li
238.083 293.528 237.961 293.988 237.602 294.193 cv
237.602 294.193 li
220.496 304.069 li
220.378 304.138 220.249 304.17 220.122 304.17 cv
220.122 304.17 li
219.863 304.17 219.61 304.036 219.472 303.796 cv
219.472 303.796 li
cp
f
221.124 307.782 mo
221.017 307.382 221.255 306.971 221.654 306.864 cv
221.654 306.864 li
234.025 303.562 li
234.426 303.455 234.837 303.693 234.944 304.092 cv
234.944 304.092 li
235.051 304.493 234.813 304.904 234.414 305.011 cv
234.414 305.011 li
222.041 308.313 li
221.977 308.33 221.912 308.339 221.848 308.339 cv
221.848 308.339 li
221.517 308.339 221.213 308.117 221.124 307.782 cv
221.124 307.782 li
cp
f
204.519 349.63 mo
204.519 329.879 li
204.519 329.464 204.854 329.129 205.269 329.129 cv
205.269 329.129 li
205.683 329.129 206.02 329.464 206.02 329.879 cv
206.02 329.879 li
206.02 349.63 li
206.02 350.043 205.683 350.38 205.269 350.38 cv
205.269 350.38 li
204.854 350.38 204.519 350.043 204.519 349.63 cv
204.519 349.63 li
cp
f
197.276 342.376 mo
196.875 342.27 196.638 341.858 196.745 341.458 cv
196.745 341.458 li
200.072 329.094 li
200.179 328.694 200.59 328.457 200.991 328.564 cv
200.991 328.564 li
201.391 328.672 201.629 329.083 201.519 329.483 cv
201.519 329.483 li
198.195 341.848 li
198.105 342.183 197.804 342.403 197.474 342.403 cv
197.474 342.403 li
197.408 342.403 197.342 342.395 197.276 342.376 cv
197.276 342.376 li
cp
f
186.376 345.317 mo
186.017 345.11 185.895 344.652 186.102 344.293 cv
186.102 344.293 li
195.979 327.186 li
196.186 326.828 196.645 326.704 197.004 326.912 cv
197.004 326.912 li
197.361 327.119 197.485 327.577 197.278 327.937 cv
197.278 327.937 li
187.401 345.044 li
187.262 345.284 187.011 345.419 186.751 345.419 cv
186.751 345.419 li
186.624 345.419 186.495 345.386 186.376 345.317 cv
186.376 345.317 li
cp
f
183.456 334.391 mo
183.163 334.098 183.163 333.624 183.456 333.331 cv
183.456 333.331 li
192.518 324.285 li
192.811 323.992 193.287 323.994 193.58 324.287 cv
193.58 324.287 li
193.871 324.58 193.871 325.055 193.578 325.348 cv
193.578 325.348 li
184.516 334.393 li
184.37 334.539 184.179 334.611 183.988 334.611 cv
183.988 334.611 li
183.795 334.611 183.603 334.538 183.456 334.391 cv
183.456 334.391 li
cp
f
172.547 331.487 mo
172.34 331.129 172.462 330.669 172.821 330.463 cv
172.821 330.463 li
189.927 320.587 li
190.286 320.379 190.744 320.502 190.952 320.861 cv
190.952 320.861 li
191.158 321.22 191.037 321.68 190.678 321.886 cv
190.678 321.886 li
173.572 331.762 li
173.453 331.83 173.324 331.863 173.197 331.863 cv
173.197 331.863 li
172.938 331.863 172.687 331.729 172.547 331.487 cv
172.547 331.487 li
cp
f
175.479 320.565 mo
175.373 320.164 175.611 319.754 176.011 319.646 cv
176.011 319.646 li
188.38 316.343 li
188.782 316.236 189.191 316.475 189.299 316.872 cv
189.299 316.872 li
189.406 317.274 189.167 317.687 188.768 317.791 cv
188.768 317.791 li
176.398 321.095 li
176.333 321.112 176.268 321.12 176.204 321.12 cv
176.204 321.12 li
175.873 321.12 175.569 320.899 175.479 320.565 cv
175.479 320.565 li
cp
f
212.228 341.848 mo
208.903 329.483 li
208.796 329.083 209.031 328.672 209.432 328.564 cv
209.432 328.564 li
209.833 328.457 210.243 328.694 210.351 329.094 cv
210.351 329.094 li
213.677 341.458 li
213.784 341.858 213.547 342.27 213.146 342.376 cv
213.146 342.376 li
213.08 342.395 213.014 342.403 212.949 342.403 cv
212.949 342.403 li
212.619 342.403 212.317 342.183 212.228 341.848 cv
212.228 341.848 li
cp
f
223.022 345.044 mo
213.145 327.937 li
212.938 327.577 213.062 327.119 213.419 326.912 cv
213.419 326.912 li
213.779 326.704 214.237 326.828 214.444 327.186 cv
214.444 327.186 li
224.321 344.293 li
224.528 344.652 224.404 345.11 224.047 345.317 cv
224.047 345.317 li
223.928 345.386 223.799 345.419 223.671 345.419 cv
223.671 345.419 li
223.412 345.419 223.161 345.284 223.022 345.044 cv
223.022 345.044 li
cp
f
225.908 334.393 mo
216.846 325.348 li
216.553 325.055 216.553 324.58 216.846 324.287 cv
216.846 324.287 li
217.138 323.994 217.613 323.992 217.906 324.285 cv
217.906 324.285 li
226.968 333.331 li
227.261 333.624 227.261 334.098 226.968 334.391 cv
226.968 334.391 li
226.821 334.538 226.628 334.611 226.436 334.611 cv
226.436 334.611 li
226.245 334.611 226.054 334.539 225.908 334.393 cv
225.908 334.393 li
cp
f
236.853 331.762 mo
219.747 321.886 li
219.388 321.68 219.264 321.22 219.472 320.861 cv
219.472 320.861 li
219.678 320.502 220.138 320.379 220.495 320.587 cv
220.495 320.587 li
237.601 330.463 li
237.96 330.669 238.083 331.129 237.877 331.487 cv
237.877 331.487 li
237.738 331.729 237.486 331.863 237.227 331.863 cv
237.227 331.863 li
237.1 331.863 236.971 331.83 236.853 331.762 cv
236.853 331.762 li
cp
f
234.025 321.095 mo
221.653 317.791 li
221.254 317.687 221.017 317.274 221.124 316.872 cv
221.124 316.872 li
221.229 316.475 221.641 316.236 222.043 316.343 cv
222.043 316.343 li
234.412 319.646 li
234.814 319.754 235.051 320.164 234.943 320.565 cv
234.943 320.565 li
234.854 320.899 234.552 321.12 234.22 321.12 cv
234.22 321.12 li
234.156 321.12 234.09 321.112 234.025 321.095 cv
234.025 321.095 li
cp
f
210.137 312.042 mo
213.403 307.471 li
207.524 307.906 li
205.724 302.614 li
202.981 307.642 li
196.858 307.252 li
201.211 312.26 li
197.075 317.051 li
203.388 315.743 li
205.506 321.151 li
207.524 315.525 li
212.941 316.144 li
210.137 312.042 li
cp
f
430.631 180.618 mo
433.866 173.296 li
436.186 180.836 li
442.565 182.575 li
437.346 186.635 li
440.245 192.435 li
432.425 188.505 li
426.091 193.406 li
428.499 185.869 li
424.655 180.021 li
430.631 180.618 li
cp
f
465.317 227.93 mo
467.908 222.619 li
468.79 228.447 li
473.609 228.447 li
469.619 230.936 li
471.079 237.01 li
466.82 232.179 li
462.298 236.035 li
464.437 230.521 li
460.103 227.253 li
465.317 227.93 li
cp
f
478.97 183.178 mo
481.558 175.181 li
483.581 182.156 li
490.396 182.4 li
485.771 186.782 li
488.613 192.351 li
483.581 189.947 li
481.321 196.819 li
479.44 189.764 li
474.031 191.88 li
476.619 186.941 li
473.355 181.426 li
478.97 183.178 li
cp
f
450.332 205.478 mo
450.818 205.354 451.555 205.683 451.733 206.382 cv
451.841 206.8 451.65 207.676 451.165 207.8 cv
450.677 207.924 449.827 207.476 449.749 206.971 cv
449.677 206.515 449.845 205.603 450.332 205.478 cv
cp
f
488.494 203.626 mo
488 203.489 487.516 202.822 487.715 202.113 cv
487.835 201.689 488.447 201.011 488.94 201.149 cv
489.435 201.288 489.958 202.117 489.771 202.604 cv
489.602 203.044 488.988 203.765 488.494 203.626 cv
cp
f
372.057 168.441 mo
371.59 168.206 371.236 167.442 371.573 166.771 cv
371.777 166.369 372.525 165.81 372.992 166.045 cv
373.461 166.282 373.821 167.216 373.538 167.667 cv
373.282 168.075 372.525 168.677 372.057 168.441 cv
cp
f
529.589 194.464 mo
529.364 193.872 529.587 192.945 530.333 192.663 cv
530.776 192.495 531.703 192.669 531.928 193.262 cv
532.152 193.854 531.877 194.899 531.333 195.042 cv
530.838 195.171 529.813 195.056 529.589 194.464 cv
cp
f
411.083 206.122 mo
410.915 205.679 411.083 204.987 411.64 204.776 cv
411.969 204.65 412.663 204.781 412.831 205.224 cv
412.998 205.666 412.792 206.447 412.385 206.553 cv
412.017 206.649 411.25 206.564 411.083 206.122 cv
cp
f
433.511 231.214 mo
432.999 231.131 432.409 230.615 432.511 229.99 cv
432.569 229.617 433.091 229.021 433.602 229.104 cv
434.115 229.185 434.716 229.813 434.597 230.246 cv
434.489 230.639 434.023 231.295 433.511 231.214 cv
cp
f
443.862 202.676 mo
444.152 202.231 444.861 201.942 445.35 202.261 cv
445.642 202.451 445.925 203.095 445.635 203.538 cv
445.345 203.982 444.549 204.359 444.232 204.092 cv
443.946 203.851 443.572 203.12 443.862 202.676 cv
cp
f
435.548 206.495 mo
434.741 206.162 434.057 205.075 434.464 204.091 cv
434.705 203.504 435.723 202.718 436.529 203.052 cv
437.336 203.385 438.107 204.652 437.743 205.313 cv
437.414 205.913 436.354 206.828 435.548 206.495 cv
cp
f
431.392 213.716 mo
430.945 213.458 430.535 212.667 430.877 212.076 cv
431.218 211.486 432.112 211.146 432.558 211.403 cv
433.004 211.661 433.099 212.54 432.757 213.131 cv
432.415 213.721 431.836 213.973 431.392 213.716 cv
cp
f
465.365 209.786 mo
465.807 209.672 466.559 209.917 466.71 210.504 cv
466.862 211.089 466.507 211.86 466.063 211.974 cv
465.621 212.088 465.018 211.59 464.865 211.004 cv
464.715 210.419 464.924 209.9 465.365 209.786 cv
cp
f
496.058 214.365 mo
495.787 213.697 496.019 212.468 496.905 212.11 cv
497.79 211.751 499.07 212.148 499.343 212.817 cv
499.612 213.488 498.959 214.538 498.071 214.897 cv
497.185 215.255 496.327 215.034 496.058 214.365 cv
cp
f
407.176 194.633 mo
407.28 194.16 407.883 193.667 408.563 193.817 cv
408.97 193.907 409.645 194.451 409.539 194.924 cv
409.435 195.397 408.679 195.936 408.209 195.784 cv
407.784 195.648 407.07 195.106 407.176 194.633 cv
cp
f
398.239 188.551 mo
397.749 188.459 397.22 187.93 397.334 187.315 cv
397.403 186.949 397.898 186.4 398.389 186.492 cv
398.877 186.583 399.466 187.194 399.338 187.618 cv
399.222 188.002 398.728 188.642 398.239 188.551 cv
cp
f
402.97 198.591 mo
403.214 198.159 403.87 197.802 404.398 198.099 cv
404.711 198.275 405.073 198.938 404.83 199.37 cv
404.588 199.802 403.827 200.133 403.478 199.883 cv
403.162 199.657 402.727 199.022 402.97 198.591 cv
cp
f
457.759 182.048 mo
458.003 181.616 458.659 181.259 459.188 181.556 cv
459.5 181.732 459.862 182.395 459.619 182.827 cv
459.377 183.259 458.616 183.59 458.267 183.34 cv
457.951 183.114 457.516 182.479 457.759 182.048 cv
cp
f
390.976 190.394 mo
390.259 190.144 389.613 189.258 389.888 188.471 cv
390.053 188.001 390.847 187.387 391.56 187.637 cv
392.277 187.887 393.074 188.863 392.813 189.394 cv
392.577 189.875 391.689 190.643 390.976 190.394 cv
cp
f
424.158 221.704 mo
423.622 221.407 423.232 220.595 423.594 219.941 cv
423.811 219.551 424.583 219.084 425.119 219.381 cv
425.654 219.678 426.091 220.624 425.784 221.056 cv
425.507 221.447 424.693 222 424.158 221.704 cv
cp
f
395.281 156.024 mo
395.599 155.279 396.612 154.656 397.521 155.042 cv
398.063 155.272 398.781 156.223 398.466 156.967 cv
398.146 157.712 396.966 158.416 396.355 158.072 cv
395.806 157.762 394.964 156.768 395.281 156.024 cv
cp
f
391.419 178.232 mo
391.542 177.75 392.175 177.16 392.815 177.326 cv
393.455 177.491 394.004 178.237 393.879 178.721 cv
393.754 179.204 392.959 179.519 392.317 179.354 cv
391.679 179.189 391.293 178.714 391.419 178.232 cv
cp
f
390.019 170.197 mo
389.582 170.447 388.786 170.326 388.427 169.699 cv
388.214 169.327 388.164 168.433 388.601 168.183 cv
389.034 167.935 389.973 168.14 390.184 168.605 cv
390.374 169.025 390.454 169.949 390.019 170.197 cv
cp
f
382.697 159.682 mo
382.783 160.147 382.496 160.799 381.909 160.906 cv
381.562 160.97 380.903 160.716 380.818 160.252 cv
380.734 159.786 381.074 159.055 381.494 159.023 cv
381.875 158.995 382.614 159.216 382.697 159.682 cv
cp
f
395.222 170.835 mo
394.792 170.715 394.341 170.213 394.489 169.687 cv
394.577 169.374 395.084 168.917 395.514 169.037 cv
395.945 169.16 396.396 169.758 396.251 170.117 cv
396.119 170.442 395.653 170.957 395.222 170.835 cv
cp
f
409.579 184.287 mo
409.518 184.846 408.982 185.458 408.366 185.388 cv
407.998 185.346 407.424 184.871 407.488 184.312 cv
407.553 183.752 408.126 183.016 408.555 183.119 cv
408.941 183.21 409.644 183.728 409.579 184.287 cv
cp
f
502.205 177.054 mo
502.111 177.892 501.31 178.809 500.387 178.703 cv
499.833 178.642 498.971 177.929 499.067 177.091 cv
499.164 176.252 500.025 175.147 500.668 175.302 cv
501.248 175.439 502.302 176.214 502.205 177.054 cv
cp
f
484.559 221.803 mo
484.663 221.33 485.266 220.837 485.946 220.987 cv
486.353 221.078 487.027 221.622 486.922 222.094 cv
486.817 222.568 486.062 223.106 485.592 222.955 cv
485.167 222.818 484.453 222.276 484.559 221.803 cv
cp
f
498.199 222.401 mo
497.709 222.31 497.18 221.781 497.294 221.166 cv
497.363 220.8 497.858 220.25 498.349 220.343 cv
498.837 220.434 499.426 221.045 499.298 221.469 cv
499.182 221.853 498.688 222.493 498.199 222.401 cv
cp
f
479.486 219.449 mo
478.971 219.27 478.507 218.632 478.704 218.066 cv
478.823 217.728 479.395 217.286 479.907 217.466 cv
480.423 217.646 480.997 218.348 480.809 218.729 cv
480.64 219.076 480.001 219.629 479.486 219.449 cv
cp
f
479.827 207.675 mo
479.95 207.192 480.583 206.604 481.224 206.77 cv
481.863 206.934 482.412 207.681 482.287 208.164 cv
482.162 208.647 481.367 208.963 480.726 208.797 cv
480.087 208.633 479.701 208.158 479.827 207.675 cv
cp
f
515.823 229.465 mo
515.762 230.024 515.227 230.635 514.61 230.565 cv
514.242 230.524 513.668 230.048 513.732 229.49 cv
513.797 228.93 514.37 228.194 514.799 228.297 cv
515.186 228.388 515.888 228.905 515.823 229.465 cv
cp
f
395.011 203.165 mo
394.566 203.721 393.559 204.008 392.882 203.464 cv
392.477 203.14 392.092 202.165 392.538 201.608 cv
392.982 201.054 394.152 200.737 394.588 201.175 cv
394.98 201.567 395.455 202.61 395.011 203.165 cv
cp
f
381.807 174.865 mo
381.365 175.025 380.57 174.847 380.357 174.262 cv
380.146 173.676 380.432 172.851 380.876 172.69 cv
381.315 172.531 381.986 172.978 382.2 173.565 cv
382.413 174.15 382.249 174.704 381.807 174.865 cv
cp
f
449.592 217.781 mo
450.052 217.321 451.149 217.078 451.761 217.686 cv
452.37 218.294 452.493 219.496 452.034 219.956 cv
451.575 220.416 450.476 220.246 449.861 219.636 cv
449.255 219.028 449.135 218.241 449.592 217.781 cv
cp
f
390.741 279.909 mo
391.602 273.518 li
395.089 278.833 li
400.415 278.75 li
397.286 283.061 li
399.579 287.559 li
393.897 285.61 li
390.126 290.074 li
390.27 284.449 li
385.983 280.786 li
390.741 279.909 li
cp
f
420.805 272.263 mo
420.287 272.248 419.635 271.813 419.655 271.179 cv
419.664 270.802 420.103 270.144 420.621 270.159 cv
421.141 270.173 421.817 270.718 421.756 271.162 cv
421.7 271.566 421.323 272.277 420.805 272.263 cv
cp
f
462.164 262.977 mo
461.646 262.961 460.994 262.526 461.014 261.893 cv
461.023 261.515 461.462 260.857 461.979 260.872 cv
462.499 260.887 463.177 261.431 463.114 261.875 cv
463.059 262.279 462.682 262.99 462.164 262.977 cv
cp
f
446.187 275.998 mo
445.668 275.982 445.017 275.547 445.034 274.914 cv
445.045 274.537 445.484 273.878 446.001 273.894 cv
446.521 273.908 447.199 274.452 447.138 274.897 cv
447.081 275.3 446.704 276.012 446.187 275.998 cv
cp
f
435.295 279.961 mo
434.776 279.946 434.125 279.511 434.145 278.877 cv
434.155 278.5 434.593 277.842 435.111 277.857 cv
435.631 277.872 436.308 278.416 436.246 278.86 cv
436.19 279.264 435.813 279.975 435.295 279.961 cv
cp
f
447.396 265.063 mo
446.879 265.049 446.227 264.613 446.245 263.98 cv
446.256 263.603 446.695 262.944 447.213 262.959 cv
447.733 262.974 448.41 263.518 448.348 263.963 cv
448.292 264.366 447.916 265.078 447.396 265.063 cv
cp
f
430.107 271.529 mo
429.265 271.304 428.445 270.315 428.722 269.286 cv
428.885 268.673 429.791 267.762 430.635 267.988 cv
431.478 268.214 432.407 269.37 432.132 270.073 cv
431.884 270.709 430.951 271.755 430.107 271.529 cv
cp
f
454.04 282.04 mo
453.55 281.948 453.021 281.419 453.134 280.805 cv
453.204 280.438 453.699 279.889 454.189 279.981 cv
454.678 280.072 455.267 280.684 455.139 281.107 cv
455.022 281.491 454.528 282.131 454.04 282.04 cv
cp
f
408.116 282.87 mo
407.626 282.778 407.097 282.25 407.21 281.634 cv
407.28 281.268 407.775 280.719 408.265 280.811 cv
408.754 280.902 409.343 281.514 409.215 281.938 cv
409.099 282.321 408.604 282.961 408.116 282.87 cv
cp
f
455.271 270.23 mo
454.781 270.139 454.251 269.61 454.365 268.995 cv
454.435 268.629 454.931 268.08 455.42 268.172 cv
455.909 268.263 456.497 268.874 456.37 269.298 cv
456.254 269.682 455.76 270.322 455.271 270.23 cv
cp
f
466.655 277.136 mo
465.938 276.886 465.293 276 465.568 275.213 cv
465.732 274.743 466.526 274.129 467.239 274.379 cv
467.957 274.629 468.754 275.605 468.492 276.136 cv
468.257 276.617 467.37 277.385 466.655 277.136 cv
cp
f
414.429 279.591 mo
414.061 280.2 413.098 280.614 412.356 280.164 cv
411.912 279.894 411.405 278.977 411.774 278.368 cv
412.143 277.761 413.263 277.295 413.75 277.671 cv
414.191 278.01 414.798 278.982 414.429 279.591 cv
cp
f
423.458 279.083 mo
423.854 278.566 424.911 278.182 425.597 278.707 cv
426.278 279.23 426.558 280.405 426.161 280.921 cv
425.767 281.437 424.653 281.411 423.967 280.887 cv
423.286 280.362 423.064 279.598 423.458 279.083 cv
cp
f
77.2119 123.058 mo
75.1763 130.855 67.2183 136.052 60.1953 134.218 cv
51.3418 131.906 46.7852 122.781 48.8208 114.984 cv
50.8569 107.186 60.7432 103.013 66.626 104.549 cv
74.4248 106.586 79.2476 115.259 77.2119 123.058 cv
cp
f
74.6294 120.475 mo
73.0132 126.663 66.6855 130.37 60.4971 128.755 cv
54.3081 127.139 50.6001 120.813 52.2158 114.624 cv
53.8315 108.434 60.1587 104.727 66.3477 106.342 cv
72.5361 107.958 76.2451 114.285 74.6294 120.475 cv
cp
0 0 0 0 cmyk
f
76.3984 116.031 mo
76.4976 117.817 li
81.5439 119.867 84.7451 122.396 84.4263 123.618 cv
83.8848 125.692 73.728 124.836 61.7412 121.707 cv
49.7539 118.578 40.4751 114.359 41.0166 112.286 cv
41.3696 110.935 46.0884 110.435 52.4541 111.391 cv
53.7446 109.852 li
45.1025 108.606 38.7451 109.144 38.1221 111.53 cv
37.2646 114.813 47.584 120.349 61.1694 123.896 cv
74.7549 127.443 86.4629 127.656 87.3203 124.373 cv
87.894 122.177 83.4609 118.973 76.3984 116.031 cv
cp
1 1 0.2 0.2 cmyk
f
493.792 475.319 mo
494.568 483.339 488.891 490.961 481.665 491.66 cv
472.558 492.542 465.135 485.546 464.357 477.525 cv
463.581 469.503 471.424 462.18 477.476 461.593 cv
485.498 460.817 493.015 467.296 493.792 475.319 cv
cp
f
490.478 473.783 mo
491.094 480.149 486.432 485.811 480.064 486.428 cv
473.698 487.044 468.038 482.384 467.421 476.018 cv
466.804 469.649 471.465 463.988 477.831 463.372 cv
484.198 462.755 489.86 467.417 490.478 473.783 cv
cp
0 0 0 0 cmyk
f
490.606 469.002 mo
491.315 470.646 li
496.758 470.83 500.636 472.101 500.756 473.357 cv
500.964 475.491 491.135 478.188 478.804 479.383 cv
466.473 480.577 456.309 479.815 456.103 477.683 cv
455.967 476.292 460.225 474.197 466.529 472.9 cv
467.211 471.011 li
458.668 472.82 452.887 475.517 453.124 477.971 cv
453.451 481.348 465.046 482.988 479.021 481.636 cv
492.997 480.282 504.061 476.446 503.734 473.068 cv
503.516 470.81 498.25 469.329 490.606 469.002 cv
cp
1 1 0.2 0.2 cmyk
f
493.831 64.1108 mo
497.688 67.0957 500.17 71.7017 500.17 76.8823 cv
500.17 85.8828 492.7 93.1782 483.487 93.1782 cv
477.558 93.1782 472.36 90.1455 469.401 85.5889 cv
469.73 96.9434 479.249 106.05 490.953 106.05 cv
502.862 106.05 512.519 96.6187 512.519 84.9844 cv
512.519 74.3042 504.38 65.4858 493.831 64.1108 cv
cp
f
490.164 53.0542 mo
490.164 28.3228 li
490.164 27.9097 490.499 27.5747 490.914 27.5747 cv
490.914 27.5747 li
491.327 27.5747 491.664 27.9097 491.664 28.3228 cv
491.664 28.3228 li
491.664 53.0542 li
491.664 53.4673 491.327 53.8042 490.914 53.8042 cv
490.914 53.8042 li
490.499 53.8042 490.164 53.4673 490.164 53.0542 cv
490.164 53.0542 li
cp
f
481.899 54.3188 mo
479.579 44.6157 li
479.482 44.2134 479.731 43.8071 480.133 43.7124 cv
480.133 43.7124 li
480.537 43.6157 480.941 43.8643 481.038 44.2661 cv
481.038 44.2661 li
483.358 53.9692 li
483.455 54.3716 483.207 54.7754 482.803 54.8726 cv
482.803 54.8726 li
482.744 54.8867 482.686 54.8936 482.627 54.8936 cv
482.627 54.8936 li
482.289 54.8936 481.982 54.6621 481.899 54.3188 cv
481.899 54.3188 li
cp
f
476.121 60.6875 mo
466.416 44.124 li
466.206 43.7666 466.326 43.3057 466.684 43.0977 cv
466.684 43.0977 li
467.041 42.8872 467.5 43.0073 467.71 43.3647 cv
467.71 43.3647 li
477.415 59.9302 li
477.625 60.2876 477.503 60.7461 477.147 60.9565 cv
477.147 60.9565 li
477.029 61.0259 476.898 61.0586 476.77 61.0586 cv
476.77 61.0586 li
476.512 61.0586 476.26 60.9258 476.121 60.6875 cv
476.121 60.6875 li
cp
f
469.999 65.4868 mo
460.873 55.6948 li
460.59 55.3921 460.608 54.917 460.911 54.6353 cv
460.911 54.6353 li
461.214 54.3535 461.688 54.3701 461.971 54.6729 cv
461.971 54.6729 li
471.097 64.4629 li
471.38 64.7676 471.361 65.2407 471.059 65.5244 cv
471.059 65.5244 li
470.914 65.6587 470.731 65.7251 470.549 65.7251 cv
470.549 65.7251 li
470.348 65.7251 470.147 65.645 469.999 65.4868 cv
469.999 65.4868 li
cp
f
467.582 72.3647 mo
449.23 61.8545 li
448.871 61.6484 448.747 61.1904 448.953 60.8311 cv
448.953 60.8311 li
449.159 60.4717 449.617 60.3477 449.977 60.5537 cv
449.977 60.5537 li
468.328 71.0635 li
468.688 71.2695 468.812 71.7275 468.605 72.0869 cv
468.605 72.0869 li
468.467 72.3286 468.214 72.4639 467.954 72.4639 cv
467.954 72.4639 li
467.828 72.4639 467.699 72.4321 467.582 72.3647 cv
467.582 72.3647 li
cp
f
463.423 78.4697 mo
450.228 74.6509 li
449.83 74.5376 449.602 74.1196 449.717 73.7222 cv
449.717 73.7222 li
449.832 73.3252 450.248 73.0967 450.646 73.21 cv
450.646 73.21 li
463.838 77.0283 li
464.235 77.144 464.467 77.5601 464.351 77.959 cv
464.351 77.959 li
464.256 78.2861 463.956 78.4995 463.632 78.4995 cv
463.632 78.4995 li
463.563 78.4995 463.492 78.4897 463.423 78.4697 cv
463.423 78.4697 li
cp
f
436.529 85.8062 mo
436.115 85.8062 435.779 85.4707 435.779 85.0547 cv
435.779 85.0547 li
435.779 84.6411 436.115 84.3052 436.529 84.3052 cv
436.529 84.3052 li
458.912 84.3052 li
459.327 84.3052 459.663 84.6411 459.663 85.0547 cv
459.663 85.0547 li
459.663 85.4707 459.327 85.8062 458.912 85.8062 cv
458.912 85.8062 li
436.529 85.8062 li
436.529 85.8062 li
cp
f
449.568 95.8335 mo
449.472 95.4302 449.72 95.0273 450.123 94.9307 cv
450.123 94.9307 li
459.827 92.6084 li
460.229 92.5122 460.635 92.7598 460.731 93.1631 cv
460.731 93.1631 li
460.828 93.5659 460.581 93.9712 460.176 94.0679 cv
460.176 94.0679 li
450.471 96.3901 li
450.413 96.4038 450.354 96.4106 450.296 96.4106 cv
450.296 96.4106 li
449.957 96.4106 449.649 96.1782 449.568 95.8335 cv
449.568 95.8335 li
cp
f
448.953 109.281 mo
448.747 108.922 448.869 108.462 449.229 108.256 cv
449.229 108.256 li
462.824 100.405 li
463.184 100.199 463.642 100.321 463.849 100.68 cv
463.849 100.68 li
464.057 101.039 463.934 101.497 463.574 101.705 cv
463.574 101.705 li
449.979 109.554 li
449.86 109.623 449.73 109.655 449.604 109.655 cv
449.604 109.655 li
449.345 109.655 449.093 109.521 448.953 109.281 cv
448.953 109.281 li
cp
f
460.496 115.062 mo
460.212 114.761 460.225 114.287 460.525 114.003 cv
460.525 114.003 li
467.77 107.139 li
468.07 106.855 468.545 106.868 468.831 107.168 cv
468.831 107.168 li
469.116 107.469 469.104 107.944 468.802 108.229 cv
468.802 108.229 li
461.557 115.091 li
461.412 115.228 461.227 115.296 461.042 115.296 cv
461.042 115.296 li
460.843 115.296 460.644 115.218 460.496 115.062 cv
460.496 115.062 li
cp
f
462.545 134.14 mo
462.186 133.931 462.063 133.473 462.271 133.113 cv
462.271 133.113 li
474.265 112.391 li
474.471 112.034 474.93 111.912 475.289 112.118 cv
475.289 112.118 li
475.646 112.326 475.771 112.785 475.563 113.145 cv
475.563 113.145 li
463.569 133.866 li
463.43 134.106 463.178 134.24 462.919 134.24 cv
462.919 134.24 li
462.792 134.24 462.663 134.208 462.545 134.14 cv
462.545 134.14 li
cp
f
479.575 126.25 mo
479.18 126.132 478.955 125.713 479.07 125.318 cv
479.07 125.318 li
481.912 115.751 li
482.03 115.356 482.447 115.128 482.845 115.246 cv
482.845 115.246 li
483.241 115.364 483.468 115.781 483.351 116.179 cv
483.351 116.179 li
480.508 125.745 li
480.411 126.07 480.113 126.282 479.789 126.282 cv
479.789 126.282 li
479.719 126.282 479.646 126.271 479.575 126.25 cv
479.575 126.25 li
cp
f
490.164 140.256 mo
490.164 117.055 li
490.164 116.64 490.499 116.305 490.914 116.305 cv
490.914 116.305 li
491.327 116.305 491.664 116.64 491.664 117.055 cv
491.664 117.055 li
491.664 140.256 li
491.664 140.669 491.327 141.005 490.914 141.005 cv
490.914 141.005 li
490.499 141.005 490.164 140.669 490.164 140.256 cv
490.164 140.256 li
cp
f
500.789 125.845 mo
498.466 116.139 li
498.369 115.738 498.618 115.333 499.021 115.236 cv
499.021 115.236 li
499.424 115.139 499.829 115.388 499.924 115.791 cv
499.924 115.791 li
502.247 125.495 li
502.342 125.897 502.096 126.303 501.692 126.4 cv
501.692 126.4 li
501.634 126.414 501.574 126.421 501.517 126.421 cv
501.517 126.421 li
501.178 126.421 500.87 126.189 500.789 125.845 cv
500.789 125.845 li
cp
f
514.111 126.741 mo
506.265 113.142 li
506.058 112.785 506.181 112.326 506.54 112.119 cv
506.54 112.119 li
506.896 111.912 507.357 112.034 507.564 112.394 cv
507.564 112.394 li
515.414 125.991 li
515.621 126.35 515.496 126.809 515.137 127.016 cv
515.137 127.016 li
515.02 127.083 514.892 127.116 514.765 127.116 cv
514.765 127.116 li
514.505 127.116 514.251 126.981 514.111 126.741 cv
514.111 126.741 li
cp
f
519.859 115.441 mo
512.998 108.198 li
512.712 107.898 512.725 107.422 513.025 107.139 cv
513.025 107.139 li
513.325 106.854 513.801 106.866 514.085 107.167 cv
514.085 107.167 li
520.949 114.411 li
521.234 114.711 521.222 115.186 520.922 115.471 cv
520.922 115.471 li
520.775 115.608 520.59 115.677 520.405 115.677 cv
520.405 115.677 li
520.206 115.677 520.008 115.598 519.859 115.441 cv
519.859 115.441 li
cp
f
538.104 112.179 mo
518.275 101.718 li
517.908 101.523 517.769 101.07 517.962 100.705 cv
517.962 100.705 li
518.156 100.339 518.61 100.197 518.977 100.392 cv
518.977 100.392 li
538.803 110.853 li
539.169 111.045 539.312 111.499 539.116 111.865 cv
539.116 111.865 li
538.982 112.12 538.722 112.266 538.452 112.266 cv
538.452 112.266 li
538.334 112.266 538.215 112.238 538.104 112.179 cv
538.104 112.179 li
cp
f
531.177 96.8965 mo
521.607 94.0547 li
521.212 93.938 520.985 93.519 521.104 93.123 cv
521.104 93.123 li
521.221 92.7251 521.64 92.5005 522.035 92.6167 cv
522.035 92.6167 li
531.603 95.4585 li
532 95.5771 532.227 95.9941 532.108 96.3926 cv
532.108 96.3926 li
532.011 96.7173 531.713 96.9277 531.391 96.9277 cv
531.391 96.9277 li
531.32 96.9277 531.248 96.9175 531.177 96.8965 cv
531.177 96.8965 li
cp
f
522.913 85.8042 mo
522.499 85.8042 522.164 85.4673 522.164 85.0542 cv
522.164 85.0542 li
522.164 84.6387 522.499 84.3042 522.915 84.3042 cv
522.915 84.3042 li
538.614 84.3062 li
539.027 84.3062 539.364 84.6411 539.364 85.0562 cv
539.364 85.0562 li
539.362 85.4697 539.027 85.8042 538.612 85.8042 cv
538.612 85.8042 li
522.913 85.8042 li
522.913 85.8042 li
cp
f
521.094 76.9458 mo
520.997 76.5435 521.244 76.1387 521.649 76.0435 cv
521.649 76.0435 li
531.354 73.7207 li
531.756 73.623 532.162 73.873 532.258 74.2754 cv
532.258 74.2754 li
532.354 74.6777 532.105 75.082 531.703 75.1797 cv
531.703 75.1797 li
521.996 77.5005 li
521.938 77.5146 521.878 77.5215 521.819 77.5215 cv
521.819 77.5215 li
521.481 77.5215 521.176 77.2905 521.094 76.9458 cv
521.094 76.9458 li
cp
f
517.976 69.4272 mo
517.769 69.0693 517.892 68.6099 518.251 68.4043 cv
518.251 68.4043 li
531.849 60.5537 li
532.207 60.3486 532.666 60.4712 532.874 60.8291 cv
532.874 60.8291 li
533.081 61.1895 532.956 61.6465 532.599 61.854 cv
532.599 61.854 li
519.001 69.7021 li
518.883 69.7705 518.754 69.8032 518.627 69.8032 cv
518.627 69.8032 li
518.367 69.8032 518.115 69.6685 517.976 69.4272 cv
517.976 69.4272 li
cp
f
512.996 62.9409 mo
512.712 62.6406 512.725 62.167 513.025 61.8818 cv
513.025 61.8818 li
520.269 55.019 li
520.568 54.7334 521.045 54.7461 521.33 55.0464 cv
521.33 55.0464 li
521.615 55.3491 521.603 55.8228 521.301 56.1079 cv
521.301 56.1079 li
514.058 62.9707 li
513.912 63.1074 513.728 63.1753 513.542 63.1753 cv
513.542 63.1753 li
513.343 63.1753 513.144 63.0967 512.996 62.9409 cv
512.996 62.9409 li
cp
f
506.52 57.9795 mo
506.168 57.7617 506.059 57.2988 506.276 56.9458 cv
506.276 56.9458 li
517.942 38.0464 li
518.16 37.6934 518.624 37.583 518.975 37.8008 cv
518.975 37.8008 li
519.327 38.0186 519.438 38.4819 519.22 38.8325 cv
519.22 38.8325 li
507.553 57.7344 li
507.411 57.9644 507.165 58.0903 506.913 58.0903 cv
506.913 58.0903 li
506.778 58.0903 506.643 58.0547 506.52 57.9795 cv
506.52 57.9795 li
cp
f
498.981 54.8613 mo
498.585 54.7451 498.358 54.3276 498.477 53.9287 cv
498.477 53.9287 li
501.315 44.3638 li
501.434 43.9668 501.851 43.7412 502.248 43.8569 cv
502.248 43.8569 li
502.646 43.9751 502.872 44.3931 502.754 44.7896 cv
502.754 44.7896 li
499.914 54.3569 li
499.817 54.6826 499.52 54.8926 499.196 54.8926 cv
499.196 54.8926 li
499.125 54.8926 499.053 54.8828 498.981 54.8613 cv
498.981 54.8613 li
cp
f
167.913 373.646 mo
158.583 367.731 144.001 373.503 137.271 384.118 cv
132.38 391.831 123.33 413.378 122.464 428.331 cv
137.854 438.088 li
150.874 430.168 166.686 413.582 171.578 405.868 cv
178.307 395.252 177.029 379.425 167.913 373.646 cv
cp
f
131.584 406.881 mo
131.584 406.881 118.936 406.745 115.185 409.793 cv
112.771 411.752 108.796 420.361 108.796 420.361 cv
124.238 425.771 li
131.584 406.881 li
cp
f
153.415 420.722 mo
153.415 420.722 158.936 432.104 157.779 436.798 cv
157.037 439.814 150.946 447.083 150.946 447.083 cv
139.466 435.425 li
153.415 420.722 li
cp
f
167.626 403.362 mo
169.822 399.897 170.964 395.813 171.147 391.874 cv
150.022 378.481 li
146.6 380.336 143.443 383.124 141.224 386.624 cv
137.822 391.988 131.934 405.19 128.938 417.484 cv
144.653 427.448 li
154.533 419.386 164.146 408.851 167.626 403.362 cv
cp
0 0 0 0 cmyk
f
146.344 398.623 mo
145.828 399.433 145.584 400.334 145.584 401.229 cv
145.584 401.229 li
145.586 402.848 146.386 404.426 147.851 405.355 cv
147.851 405.355 li
148.665 405.868 149.566 406.113 150.461 406.113 cv
150.461 406.113 li
152.08 406.111 153.658 405.314 154.588 403.847 cv
154.588 403.847 li
154.589 403.848 li
155.104 403.03 155.346 402.129 155.348 401.237 cv
155.348 401.237 li
155.346 399.617 154.546 398.04 153.077 397.111 cv
153.077 397.111 li
152.263 396.594 151.366 396.352 150.471 396.352 cv
150.471 396.352 li
148.852 396.352 147.274 397.151 146.344 398.623 cv
146.344 398.623 li
cp
150.461 408.113 mo
149.199 408.113 147.921 407.766 146.781 407.044 cv
146.781 407.044 li
144.716 405.734 143.582 403.503 143.584 401.229 cv
143.584 401.229 li
143.584 399.97 143.932 398.688 144.654 397.551 cv
144.654 397.551 li
145.963 395.484 148.196 394.35 150.471 394.352 cv
150.471 394.352 li
151.728 394.35 153.01 394.695 154.149 395.422 cv
154.149 395.422 li
156.215 396.73 157.35 398.962 157.348 401.237 cv
157.348 401.237 li
157.348 402.496 157 403.776 156.278 404.917 cv
156.278 404.917 li
155.433 404.384 li
156.278 404.919 li
154.968 406.981 152.74 408.113 150.467 408.113 cv
150.467 408.113 li
150.465 408.113 150.463 408.113 150.461 408.113 cv
150.461 408.113 li
cp
1 1 0.2 0.2 cmyk
f
139.734 411.934 mo
139.432 412.405 139.292 412.926 139.292 413.449 cv
139.292 413.449 li
139.292 414.393 139.759 415.312 140.611 415.854 cv
140.611 415.854 li
141.086 416.151 141.609 416.293 142.13 416.293 cv
142.13 416.293 li
143.075 416.293 143.991 415.829 144.533 414.977 cv
144.533 414.977 li
144.533 414.977 li
144.835 414.499 144.975 413.974 144.977 413.455 cv
144.977 413.455 li
144.975 412.511 144.512 411.595 143.656 411.051 cv
143.656 411.051 li
143.181 410.75 142.66 410.61 142.139 410.608 cv
142.139 410.608 li
141.194 410.61 140.278 411.075 139.734 411.934 cv
139.734 411.934 li
cp
142.13 418.294 mo
141.243 418.294 140.342 418.05 139.542 417.542 cv
139.542 417.542 li
138.089 416.62 137.29 415.05 137.292 413.449 cv
137.292 413.449 li
137.292 412.563 137.535 411.661 138.043 410.86 cv
138.043 410.86 li
138.967 409.408 140.538 408.608 142.139 408.61 cv
142.139 408.61 li
143.022 408.608 143.926 408.852 144.727 409.364 cv
144.727 409.364 li
146.179 410.285 146.977 411.854 146.975 413.455 cv
146.975 413.455 li
146.977 414.341 146.731 415.241 146.225 416.046 cv
146.225 416.046 li
145.379 415.512 li
146.223 416.046 li
145.303 417.496 143.732 418.294 142.136 418.294 cv
142.136 418.294 li
142.134 418.294 142.132 418.294 142.13 418.294 cv
142.13 418.294 li
cp
f
110.734 448.725 mo
110.385 448.503 110.28 448.039 110.502 447.689 cv
110.502 447.689 li
119.763 433.08 li
119.985 432.73 120.449 432.628 120.799 432.85 cv
120.799 432.85 li
121.148 433.071 121.252 433.533 121.031 433.885 cv
121.031 433.885 li
111.77 448.492 li
111.626 448.718 111.384 448.841 111.135 448.841 cv
111.135 448.841 li
110.998 448.841 110.859 448.804 110.734 448.725 cv
110.734 448.725 li
cp
f
122.959 440.903 mo
122.608 440.682 122.506 440.22 122.728 439.868 cv
122.728 439.868 li
124.947 436.366 li
125.168 436.016 125.632 435.913 125.983 436.135 cv
125.983 436.135 li
126.332 436.356 126.437 436.817 126.215 437.169 cv
126.215 437.169 li
123.994 440.673 li
123.852 440.897 123.609 441.02 123.361 441.02 cv
123.361 441.02 li
123.224 441.02 123.084 440.982 122.959 440.903 cv
122.959 440.903 li
cp
f
126.329 447.044 mo
125.98 446.822 125.877 446.359 126.099 446.009 cv
126.099 446.009 li
130.129 439.651 li
130.351 439.302 130.815 439.197 131.164 439.419 cv
131.164 439.419 li
131.515 439.641 131.618 440.105 131.396 440.454 cv
131.396 440.454 li
127.367 446.813 li
127.224 447.038 126.981 447.16 126.733 447.16 cv
126.733 447.16 li
126.595 447.16 126.455 447.123 126.329 447.044 cv
126.329 447.044 li
cp
f
120.428 456.354 mo
120.078 456.133 119.976 455.67 120.195 455.318 cv
120.195 455.318 li
124.228 448.96 li
124.449 448.61 124.914 448.506 125.264 448.728 cv
125.264 448.728 li
125.613 448.95 125.718 449.412 125.496 449.764 cv
125.496 449.764 li
121.464 456.122 li
121.321 456.348 121.078 456.471 120.829 456.471 cv
120.829 456.471 li
120.692 456.471 120.553 456.434 120.428 456.354 cv
120.428 456.354 li
cp
f
128.094 455.726 mo
127.744 455.504 127.639 455.039 127.861 454.689 cv
127.861 454.689 li
135.313 442.938 li
135.535 442.588 135.998 442.483 136.348 442.705 cv
136.348 442.705 li
136.697 442.927 136.802 443.392 136.58 443.741 cv
136.58 443.741 li
129.128 455.493 li
128.985 455.719 128.742 455.842 128.494 455.842 cv
128.494 455.842 li
128.356 455.842 128.218 455.805 128.094 455.726 cv
128.094 455.726 li
cp
f
123.333 463.235 mo
122.983 463.013 122.878 462.55 123.101 462.2 cv
123.101 462.2 li
126.059 457.532 li
126.281 457.183 126.744 457.079 127.094 457.302 cv
127.094 457.302 li
127.444 457.523 127.547 457.986 127.327 458.337 cv
127.327 458.337 li
124.368 463.003 li
124.225 463.229 123.982 463.352 123.733 463.352 cv
123.733 463.352 li
123.596 463.352 123.458 463.314 123.333 463.235 cv
123.333 463.235 li
cp
f
105.722 456.632 mo
105.373 456.41 105.268 455.947 105.49 455.596 cv
105.49 455.596 li
107.485 452.447 li
107.707 452.098 108.169 451.995 108.521 452.217 cv
108.521 452.217 li
108.871 452.438 108.973 452.901 108.751 453.251 cv
108.751 453.251 li
106.756 456.399 li
106.613 456.625 106.37 456.749 106.122 456.749 cv
106.122 456.749 li
105.985 456.749 105.846 456.711 105.722 456.632 cv
105.722 456.632 li
cp
f
297.969 51.2031 mo
297.969 61.5718 289.563 69.9751 279.195 69.9751 cv
268.827 69.9751 260.422 61.5718 260.422 51.2031 cv
260.422 40.835 268.827 32.4302 279.195 32.4302 cv
289.563 32.4302 297.969 40.835 297.969 51.2031 cv
cp
f
309.702 57.7734 mo
309.702 64.5117 291.867 69.9751 279.195 69.9751 cv
266.054 69.9751 248.688 64.5117 248.688 57.7734 cv
248.688 51.0337 266.054 45.1016 279.195 45.1016 cv
291.867 45.1016 309.702 51.0337 309.702 57.7734 cv
cp
f
293.674 70.2642 mo
286.051 72.7437 272.789 72.9414 264.874 70.2642 cv
264.081 67.0029 260.886 55.7139 260.886 55.7139 cv
297.661 55.7139 li
297.661 55.7139 296.146 64.8267 293.674 70.2642 cv
cp
f
294.17 50.7197 mo
292.104 55.5269 285.764 58.8828 279.195 58.8828 cv
273.461 58.8828 266.005 55.1543 264.222 50.7197 cv
264.222 42.4507 270.926 35.7466 279.195 35.7466 cv
287.466 35.7466 294.17 42.4507 294.17 50.7197 cv
cp
0 0 0 0 cmyk
f
268.965 48.2803 mo
268.436 48.1226 268.136 47.564 268.294 47.0361 cv
268.294 47.0361 li
269.241 44.0654 272.076 40.6978 274.52 39.4146 cv
274.52 39.4146 li
275.014 39.1665 275.614 39.3677 275.86 39.8604 cv
275.86 39.8604 li
276.108 40.355 275.907 40.9546 275.415 41.2031 cv
275.415 41.2031 li
273.702 41.9976 270.822 45.3853 270.21 47.6113 cv
270.21 47.6113 li
270.081 48.043 269.683 48.3232 269.254 48.3232 cv
269.254 48.3232 li
269.158 48.3232 269.062 48.3096 268.965 48.2803 cv
268.965 48.2803 li
cp
1 1 0.2 0.2 cmyk
f
267.736 85.1895 mo
267.736 78.8608 li
267.736 78.4463 268.073 78.1099 268.487 78.1099 cv
268.487 78.1099 li
268.901 78.1099 269.238 78.4463 269.238 78.8608 cv
269.238 78.8608 li
269.238 85.1895 li
269.238 85.604 268.901 85.9404 268.487 85.9404 cv
268.487 85.9404 li
268.073 85.9404 267.736 85.604 267.736 85.1895 cv
267.736 85.1895 li
cp
f
273.13 100.778 mo
273.13 82.376 li
273.13 81.9614 273.465 81.627 273.879 81.627 cv
273.879 81.627 li
274.294 81.627 274.629 81.9614 274.629 82.376 cv
274.629 82.376 li
274.629 100.778 li
274.629 101.192 274.294 101.529 273.879 101.529 cv
273.879 101.529 li
273.465 101.529 273.13 101.192 273.13 100.778 cv
273.13 100.778 li
cp
f
278.524 91.9897 mo
278.524 78.8594 li
278.524 78.4448 278.859 78.1099 279.274 78.1099 cv
279.274 78.1099 li
279.689 78.1099 280.024 78.4448 280.024 78.8594 cv
280.024 78.8594 li
280.024 91.9897 li
280.024 92.4028 279.689 92.7397 279.274 92.7397 cv
279.274 92.7397 li
278.859 92.7397 278.524 92.4028 278.524 91.9897 cv
278.524 91.9897 li
cp
f
283.915 87.7686 mo
283.915 81.6738 li
283.915 81.2607 284.25 80.9238 284.666 80.9238 cv
284.666 80.9238 li
285.079 80.9238 285.416 81.2607 285.416 81.6738 cv
285.416 81.6738 li
285.416 87.7686 li
285.416 88.1841 285.079 88.519 284.666 88.519 cv
284.666 88.519 li
284.25 88.519 283.915 88.1841 283.915 87.7686 cv
283.915 87.7686 li
cp
f
283.915 107.711 mo
283.915 92.4595 li
283.915 92.0439 284.25 91.709 284.666 91.709 cv
284.666 91.709 li
285.079 91.709 285.416 92.0439 285.416 92.4595 cv
285.416 92.4595 li
285.416 107.711 li
285.416 108.125 285.079 108.462 284.666 108.462 cv
284.666 108.462 li
284.25 108.462 283.915 108.125 283.915 107.711 cv
283.915 107.711 li
cp
f
289.309 88.7065 mo
289.309 78.8604 li
289.309 78.4448 289.644 78.1099 290.06 78.1099 cv
290.06 78.1099 li
290.473 78.1099 290.811 78.4448 290.811 78.8604 cv
290.811 78.8604 li
290.811 88.7065 li
290.811 89.1201 290.473 89.4556 290.06 89.4556 cv
290.06 89.4556 li
289.644 89.4556 289.309 89.1201 289.309 88.7065 cv
289.309 88.7065 li
cp
f
252.266 57.0664 mo
252.266 62.502 264.575 67.0532 280.278 67.1479 cv
266.897 65.6602 256.523 61.0151 255.595 56.292 cv
252.266 57.0664 li
cp
0 0 0 0 cmyk
f
60.3101 343.384 mo
60.3101 343.384 56.375 343.167 55.5161 342.628 cv
54.6294 342.071 53.8145 341.414 53.3594 340.471 cv
52.7139 339.135 52.71 333.435 52.71 333.435 cv
52.71 332.22 52.0869 331.234 51.3184 331.234 cv
50.5498 331.234 49.9268 332.22 49.9268 333.435 cv
49.9268 333.435 49.8916 339.135 49.3281 340.471 cv
48.9219 341.436 48.0576 342.071 47.1714 342.628 cv
46.312 343.167 42.3511 343.384 42.3511 343.384 cv
41.4492 343.384 40.7183 343.973 40.7183 344.699 cv
40.7183 345.425 41.4492 346.014 42.3511 346.014 cv
42.3511 346.014 46.2114 346.332 47.1714 346.66 cv
48.2686 347.036 49.4185 347.971 49.5386 348.871 cv
49.8198 350.973 49.9268 356.784 49.9268 356.784 cv
49.9268 357.999 50.5498 358.984 51.3184 358.984 cv
52.0869 358.984 52.71 357.999 52.71 356.784 cv
52.71 356.784 52.7139 350.988 53.0664 348.871 cv
53.2383 347.839 54.5679 346.708 55.6064 346.473 cv
56.5952 346.248 60.3101 346.014 60.3101 346.014 cv
61.2119 346.014 61.9429 345.425 61.9429 344.699 cv
61.9429 343.973 61.2119 343.384 60.3101 343.384 cv
cp
1 1 0.2 0.2 cmyk
f
92.832 373.646 mo
92.832 373.646 88.897 373.429 88.0381 372.89 cv
87.1514 372.333 86.3369 371.676 85.8813 370.732 cv
85.2354 369.396 85.2319 363.696 85.2319 363.696 cv
85.2319 362.481 84.6089 361.496 83.8403 361.496 cv
83.0718 361.496 82.4487 362.481 82.4487 363.696 cv
82.4487 363.696 82.4136 369.396 81.8501 370.732 cv
81.4434 371.697 80.5796 372.333 79.6934 372.89 cv
78.834 373.429 74.873 373.646 74.873 373.646 cv
73.9712 373.646 73.2402 374.234 73.2402 374.961 cv
73.2402 375.687 73.9712 376.275 74.873 376.275 cv
74.873 376.275 78.7334 376.594 79.6934 376.922 cv
80.7905 377.298 81.9404 378.232 82.0605 379.133 cv
82.3418 381.234 82.4487 387.046 82.4487 387.046 cv
82.4487 388.261 83.0718 389.246 83.8403 389.246 cv
84.6089 389.246 85.2319 388.261 85.2319 387.046 cv
85.2319 387.046 85.2354 381.25 85.5884 379.133 cv
85.7603 378.101 87.0898 376.97 88.1284 376.734 cv
89.1172 376.51 92.832 376.275 92.832 376.275 cv
93.7339 376.275 94.4648 375.687 94.4648 374.961 cv
94.4648 374.234 93.7339 373.646 92.832 373.646 cv
cp
f
46.8828 388.475 mo
46.8828 388.475 44.041 388.317 43.4209 387.928 cv
42.7808 387.526 42.1919 387.052 41.8633 386.37 cv
41.397 385.405 41.3945 381.289 41.3945 381.289 cv
41.3945 380.411 40.9443 379.699 40.3892 379.699 cv
39.834 379.699 39.3838 380.411 39.3838 381.289 cv
39.3838 381.289 39.3584 385.405 38.9521 386.37 cv
38.6582 387.067 38.0342 387.526 37.394 387.928 cv
36.7734 388.317 33.9131 388.475 33.9131 388.475 cv
33.2612 388.475 32.7334 388.899 32.7334 389.424 cv
32.7334 389.948 33.2612 390.374 33.9131 390.374 cv
33.9131 390.374 36.7012 390.603 37.394 390.841 cv
38.1865 391.112 39.0171 391.787 39.104 392.438 cv
39.3071 393.954 39.3838 398.152 39.3838 398.152 cv
39.3838 399.029 39.834 399.741 40.3892 399.741 cv
40.9443 399.741 41.3945 399.029 41.3945 398.152 cv
41.3945 398.152 41.397 393.967 41.6514 392.438 cv
41.7754 391.692 42.7358 390.876 43.4863 390.706 cv
44.2002 390.543 46.8828 390.374 46.8828 390.374 cv
47.5347 390.374 48.0625 389.948 48.0625 389.424 cv
48.0625 388.899 47.5347 388.475 46.8828 388.475 cv
cp
f
534.174 213.562 mo
532.989 213.562 532.029 212.601 532.029 211.416 cv
532.029 210.231 532.989 209.271 534.174 209.271 cv
535.358 209.271 536.318 210.231 536.318 211.416 cv
536.318 212.601 535.358 213.562 534.174 213.562 cv
cp
534.429 208.273 mo
532.504 208.273 530.942 209.834 530.942 211.759 cv
530.942 213.685 532.504 215.246 534.429 215.246 cv
536.354 215.246 537.915 213.685 537.915 211.759 cv
537.915 209.834 536.354 208.273 534.429 208.273 cv
cp
f
342.362 146.586 mo
341.178 146.586 340.218 145.626 340.218 144.441 cv
340.218 143.257 341.178 142.296 342.362 142.296 cv
343.546 142.296 344.507 143.257 344.507 144.441 cv
344.507 145.626 343.546 146.586 342.362 146.586 cv
cp
342.617 141.298 mo
340.692 141.298 339.132 142.858 339.132 144.784 cv
339.132 146.71 340.692 148.271 342.617 148.271 cv
344.542 148.271 346.103 146.71 346.103 144.784 cv
346.103 142.858 344.542 141.298 342.617 141.298 cv
cp
f
480.239 425.66 mo
479.055 425.66 478.095 424.699 478.095 423.516 cv
478.095 422.331 479.055 421.37 480.239 421.37 cv
481.423 421.37 482.384 422.331 482.384 423.516 cv
482.384 424.699 481.423 425.66 480.239 425.66 cv
cp
480.494 420.372 mo
478.569 420.372 477.009 421.933 477.009 423.858 cv
477.009 425.784 478.569 427.345 480.494 427.345 cv
482.419 427.345 483.979 425.784 483.979 423.858 cv
483.979 421.933 482.419 420.372 480.494 420.372 cv
cp
f
44.6484 162.667 mo
43.4634 162.667 42.5029 161.707 42.5029 160.521 cv
42.5029 159.337 43.4634 158.377 44.6484 158.377 cv
45.832 158.377 46.7925 159.337 46.7925 160.521 cv
46.7925 161.707 45.832 162.667 44.6484 162.667 cv
cp
44.9028 157.378 mo
42.978 157.378 41.417 158.939 41.417 160.865 cv
41.417 162.79 42.978 164.351 44.9028 164.351 cv
46.8276 164.351 48.3887 162.79 48.3887 160.865 cv
48.3887 158.939 46.8276 157.378 44.9028 157.378 cv
cp
f
37.4595 71.1445 mo
36.2744 71.1445 35.314 70.1846 35.314 68.9995 cv
35.314 67.8154 36.2744 66.855 37.4595 66.855 cv
38.6431 66.855 39.6035 67.8154 39.6035 68.9995 cv
39.6035 70.1846 38.6431 71.1445 37.4595 71.1445 cv
cp
37.7139 65.8564 mo
35.7891 65.8564 34.228 67.417 34.228 69.3428 cv
34.228 71.2686 35.7891 72.8291 37.7139 72.8291 cv
39.6387 72.8291 41.1997 71.2686 41.1997 69.3428 cv
41.1997 67.417 39.6387 65.8564 37.7139 65.8564 cv
cp
f
124.204 316.026 mo
123.019 316.026 122.058 315.065 122.058 313.881 cv
122.058 312.696 123.019 311.735 124.204 311.735 cv
125.387 311.735 126.348 312.696 126.348 313.881 cv
126.348 315.065 125.387 316.026 124.204 316.026 cv
cp
124.458 310.737 mo
122.533 310.737 120.972 312.299 120.972 314.224 cv
120.972 316.149 122.533 317.711 124.458 317.711 cv
126.383 317.711 127.944 316.149 127.944 314.224 cv
127.944 312.299 126.383 310.737 124.458 310.737 cv
cp
f
544.577 160.938 mo
542.989 160.938 541.703 159.652 541.703 158.064 cv
541.703 156.478 542.989 155.191 544.577 155.191 cv
546.163 155.191 547.45 156.478 547.45 158.064 cv
547.45 159.652 546.163 160.938 544.577 160.938 cv
cp
544.918 153.853 mo
542.339 153.853 540.248 155.945 540.248 158.525 cv
540.248 161.104 542.339 163.196 544.918 163.196 cv
547.497 163.196 549.589 161.104 549.589 158.525 cv
549.589 155.945 547.497 153.853 544.918 153.853 cv
cp
f
428.523 441.718 mo
428.089 441.106 427.9 439.454 428.523 438.698 cv
429.453 437.568 432.498 434.457 432.498 434.457 cv
432.98 433.974 432.986 433.198 432.513 432.726 cv
432.04 432.253 431.266 432.259 430.783 432.742 cv
430.783 432.742 427.372 436.023 426.54 436.715 cv
425.94 437.213 424.396 437.429 423.52 436.715 cv
422.572 435.941 419.393 432.702 419.393 432.702 cv
418.88 432.19 418.058 432.184 417.557 432.686 cv
417.055 433.188 417.062 434.01 417.572 434.521 cv
417.572 434.521 420.907 437.819 421.536 438.696 cv
422.223 439.654 421.762 441.266 421.536 441.719 cv
420.945 442.906 417.592 445.978 417.592 445.978 cv
417.134 446.435 417.128 447.168 417.576 447.616 cv
418.023 448.065 418.759 448.059 419.216 447.602 cv
419.216 447.602 422.722 444.428 423.521 443.701 cv
424.141 443.139 426.01 443.174 426.406 443.486 cv
427.608 444.437 430.871 447.593 430.871 447.593 cv
431.304 448.024 431.996 448.028 432.421 447.605 cv
432.844 447.182 432.837 446.488 432.405 446.057 cv
432.405 446.057 429.146 442.6 428.523 441.718 cv
cp
f
426.523 498.718 mo
426.089 498.106 425.9 496.454 426.523 495.698 cv
427.453 494.568 430.498 491.457 430.498 491.457 cv
430.98 490.974 430.986 490.198 430.513 489.726 cv
430.04 489.253 429.266 489.259 428.783 489.742 cv
428.783 489.742 425.372 493.023 424.54 493.715 cv
423.94 494.213 422.396 494.429 421.52 493.715 cv
420.572 492.941 417.393 489.702 417.393 489.702 cv
416.88 489.19 416.058 489.184 415.557 489.686 cv
415.055 490.188 415.062 491.01 415.572 491.521 cv
415.572 491.521 418.907 494.819 419.536 495.696 cv
420.223 496.654 419.762 498.266 419.536 498.719 cv
418.945 499.906 415.592 502.978 415.592 502.978 cv
415.134 503.435 415.128 504.168 415.576 504.616 cv
416.023 505.065 416.759 505.059 417.216 504.602 cv
417.216 504.602 420.722 501.428 421.521 500.701 cv
422.141 500.139 424.01 500.174 424.406 500.486 cv
425.608 501.437 428.871 504.593 428.871 504.593 cv
429.304 505.024 429.996 505.028 430.421 504.605 cv
430.844 504.182 430.837 503.488 430.405 503.057 cv
430.405 503.057 427.146 499.6 426.523 498.718 cv
cp
f
525.502 424.778 mo
525.179 424.321 525.037 423.088 525.502 422.522 cv
526.197 421.681 528.47 419.357 528.47 419.357 cv
528.83 418.996 528.835 418.417 528.481 418.064 cv
528.129 417.711 527.551 417.717 527.189 418.077 cv
527.189 418.077 524.643 420.526 524.021 421.042 cv
523.574 421.415 522.42 421.576 521.767 421.042 cv
521.06 420.466 518.686 418.048 518.686 418.048 cv
518.302 417.665 517.689 417.66 517.314 418.034 cv
516.939 418.408 516.944 419.022 517.326 419.405 cv
517.326 419.405 519.816 421.867 520.286 422.522 cv
520.798 423.237 520.454 424.44 520.286 424.778 cv
519.845 425.666 517.341 427.958 517.341 427.958 cv
517 428.3 516.994 428.848 517.328 429.182 cv
517.663 429.517 518.212 429.512 518.553 429.172 cv
518.553 429.172 521.17 426.802 521.767 426.259 cv
522.23 425.839 523.626 425.866 523.922 426.099 cv
524.819 426.808 527.257 429.163 527.257 429.163 cv
527.579 429.487 528.096 429.49 528.412 429.175 cv
528.728 428.858 528.724 428.34 528.401 428.018 cv
528.401 428.018 525.968 425.437 525.502 424.778 cv
cp
f
339.279 421.063 mo
337.123 413.959 li
343.501 409.833 li
335.952 410.054 li
333.978 401.43 li
331.356 409.401 li
325.014 409.833 li
329.674 413.311 li
326.694 419.917 li
332.995 416.091 li
339.279 421.063 li
cp
f
332.984 430.466 mo
332.569 430.464 332.235 430.128 332.239 429.713 cv
332.239 429.713 li
332.273 423.283 li
332.275 422.869 332.611 422.535 333.026 422.538 cv
333.026 422.538 li
333.441 422.54 333.775 422.878 333.771 423.293 cv
333.771 423.293 li
333.738 429.721 li
333.736 430.134 333.404 430.466 332.992 430.466 cv
332.992 430.466 li
332.989 430.466 332.987 430.466 332.984 430.466 cv
332.984 430.466 li
cp
f
323.916 429.166 mo
323.571 428.935 323.478 428.469 323.707 428.125 cv
323.707 428.125 li
327.393 422.598 li
327.622 422.253 328.087 422.159 328.432 422.389 cv
328.432 422.389 li
328.777 422.618 328.872 423.084 328.642 423.428 cv
328.642 423.428 li
324.957 428.957 li
324.812 429.174 324.573 429.292 324.331 429.292 cv
324.331 429.292 li
324.188 429.292 324.044 429.251 323.916 429.166 cv
323.916 429.166 li
cp
f
316.744 420.199 mo
316.529 419.846 316.642 419.385 316.996 419.168 cv
316.996 419.168 li
322.488 415.826 li
322.843 415.611 323.304 415.725 323.519 416.076 cv
323.519 416.076 li
323.733 416.433 323.62 416.894 323.269 417.108 cv
323.269 417.108 li
317.775 420.45 li
317.653 420.523 317.519 420.56 317.386 420.56 cv
317.386 420.56 li
317.133 420.56 316.886 420.432 316.744 420.199 cv
316.744 420.199 li
cp
f
314.085 410.263 mo
314.078 409.849 314.412 409.509 314.826 409.505 cv
314.826 409.505 li
321.135 409.434 li
321.549 409.428 321.889 409.761 321.893 410.175 cv
321.893 410.175 li
321.898 410.587 321.565 410.929 321.151 410.933 cv
321.151 410.933 li
314.843 411.004 li
314.839 411.004 314.835 411.004 314.831 411.004 cv
314.831 411.004 li
314.422 411.004 314.089 410.673 314.085 410.263 cv
314.085 410.263 li
cp
f
322.936 406.138 mo
316.658 403.797 li
316.271 403.651 316.073 403.219 316.217 402.831 cv
316.217 402.831 li
316.362 402.444 316.795 402.246 317.183 402.39 cv
317.183 402.39 li
323.46 404.733 li
323.848 404.877 324.045 405.31 323.899 405.698 cv
323.899 405.698 li
323.788 405.999 323.502 406.186 323.198 406.186 cv
323.198 406.186 li
323.111 406.186 323.022 406.17 322.936 406.138 cv
322.936 406.138 li
cp
f
327.627 400.753 mo
324.261 394.709 li
324.059 394.348 324.188 393.89 324.55 393.688 cv
324.55 393.688 li
324.911 393.486 325.369 393.617 325.57 393.979 cv
325.57 393.979 li
328.938 400.022 li
329.14 400.385 329.011 400.842 328.648 401.042 cv
328.648 401.042 li
328.532 401.107 328.407 401.138 328.283 401.138 cv
328.283 401.138 li
328.02 401.138 327.765 400.999 327.627 400.753 cv
327.627 400.753 li
cp
f
333.667 397.254 mo
333.254 397.245 332.926 396.9 332.938 396.486 cv
332.938 396.486 li
333.035 392.564 li
333.046 392.15 333.391 391.824 333.805 391.835 cv
333.805 391.835 li
334.219 391.845 334.545 392.188 334.534 392.604 cv
334.534 392.604 li
334.437 396.523 li
334.427 396.93 334.094 397.254 333.69 397.254 cv
333.69 397.254 li
333.683 397.254 333.675 397.254 333.667 397.254 cv
333.667 397.254 li
cp
f
338.715 402.55 mo
338.351 402.351 338.216 401.897 338.415 401.533 cv
338.415 401.533 li
342.251 394.505 li
342.45 394.141 342.904 394.006 343.268 394.205 cv
343.268 394.205 li
343.632 394.403 343.767 394.858 343.567 395.223 cv
343.567 395.223 li
339.731 402.251 li
339.595 402.501 339.337 402.642 339.072 402.642 cv
339.072 402.642 li
338.951 402.642 338.828 402.612 338.715 402.55 cv
338.715 402.55 li
cp
f
343.265 404.978 mo
343.02 404.643 343.092 404.174 343.427 403.929 cv
343.427 403.929 li
348.614 400.132 li
348.947 399.886 349.417 399.959 349.661 400.294 cv
349.661 400.294 li
349.906 400.627 349.834 401.097 349.498 401.341 cv
349.498 401.341 li
344.313 405.14 li
344.18 405.237 344.025 405.284 343.871 405.284 cv
343.871 405.284 li
343.64 405.284 343.411 405.178 343.265 404.978 cv
343.265 404.978 li
cp
f
345.479 411.821 mo
345.471 411.407 345.802 411.065 346.216 411.06 cv
346.216 411.06 li
352.807 410.942 li
353.222 410.935 353.563 411.264 353.569 411.678 cv
353.569 411.678 li
353.577 412.092 353.248 412.434 352.834 412.439 cv
352.834 412.439 li
346.241 412.559 li
346.236 412.559 346.23 412.559 346.226 412.559 cv
346.226 412.559 li
345.818 412.559 345.485 412.23 345.479 411.821 cv
345.479 411.821 li
cp
f
350.438 420.176 mo
344.483 417.752 li
344.1 417.596 343.914 417.157 344.07 416.774 cv
344.07 416.774 li
344.227 416.391 344.665 416.205 345.048 416.361 cv
345.048 416.361 li
351.005 418.785 li
351.389 418.941 351.572 419.38 351.416 419.763 cv
351.416 419.763 li
351.297 420.055 351.017 420.231 350.72 420.231 cv
350.72 420.231 li
350.626 420.231 350.53 420.214 350.438 420.176 cv
350.438 420.176 li
cp
f
345.599 427.093 mo
341.464 421.921 li
341.205 421.598 341.258 421.126 341.581 420.868 cv
341.581 420.868 li
341.904 420.609 342.378 420.661 342.634 420.984 cv
342.634 420.984 li
346.77 426.156 li
347.027 426.479 346.976 426.953 346.652 427.21 cv
346.652 427.21 li
346.514 427.32 346.348 427.374 346.184 427.374 cv
346.184 427.374 li
345.964 427.374 345.745 427.278 345.599 427.093 cv
345.599 427.093 li
cp
f
341.513 431.926 mo
338.841 427.06 li
338.641 426.696 338.773 426.241 339.137 426.041 cv
339.137 426.041 li
339.5 425.841 339.955 425.974 340.156 426.337 cv
340.156 426.337 li
342.828 431.203 li
343.028 431.566 342.895 432.021 342.531 432.222 cv
342.531 432.222 li
342.417 432.285 342.293 432.315 342.171 432.314 cv
342.171 432.314 li
341.906 432.314 341.649 432.174 341.513 431.926 cv
341.513 431.926 li
cp
f
317.106 427.62 mo
316.833 427.31 316.862 426.836 317.173 426.561 cv
317.173 426.561 li
320.857 423.3 li
321.169 423.026 321.643 423.056 321.918 423.366 cv
321.918 423.366 li
322.19 423.676 322.161 424.148 321.851 424.424 cv
321.851 424.424 li
318.166 427.686 li
318.023 427.811 317.846 427.872 317.67 427.872 cv
317.67 427.872 li
317.462 427.872 317.255 427.787 317.106 427.62 cv
317.106 427.62 li
cp
f
311.156 416.597 mo
311.079 416.19 311.346 415.797 311.752 415.72 cv
311.752 415.72 li
316.586 414.79 li
316.992 414.713 317.386 414.979 317.463 415.386 cv
317.463 415.386 li
317.542 415.792 317.275 416.187 316.867 416.264 cv
316.867 416.264 li
312.035 417.192 li
311.987 417.202 311.939 417.206 311.892 417.206 cv
311.892 417.206 li
311.54 417.206 311.226 416.957 311.156 416.597 cv
311.156 416.597 li
cp
f
350.527 406.133 mo
350.407 405.735 350.632 405.317 351.027 405.196 cv
351.027 405.196 li
355.738 403.771 li
356.134 403.65 356.554 403.875 356.673 404.271 cv
356.673 404.271 li
356.793 404.668 356.568 405.086 356.173 405.207 cv
356.173 405.207 li
351.462 406.633 li
351.39 406.654 351.316 406.665 351.244 406.665 cv
351.244 406.665 li
350.923 406.665 350.624 406.456 350.527 406.133 cv
350.527 406.133 li
cp
f
321.367 400.607 mo
317.53 396.777 li
317.237 396.484 317.237 396.01 317.53 395.717 cv
317.53 395.717 li
317.823 395.424 318.298 395.422 318.591 395.715 cv
318.591 395.715 li
322.428 399.545 li
322.721 399.839 322.721 400.313 322.428 400.605 cv
322.428 400.605 li
322.28 400.753 322.088 400.826 321.896 400.826 cv
321.896 400.826 li
321.705 400.826 321.514 400.753 321.367 400.607 cv
321.367 400.607 li
cp
f
238.87 397.859 mo
242.685 388.919 li
245.817 397.408 li
255.809 395.96 li
249.767 403.391 li
255.56 410.4 li
247.165 409.098 li
243.622 418.685 li
240.054 410.258 li
231.172 411.668 li
237.492 404.376 li
229.996 397.339 li
238.87 397.859 li
cp
f
233.486 392.27 mo
227.624 384.452 li
227.375 384.122 227.441 383.652 227.773 383.403 cv
227.773 383.403 li
228.106 383.155 228.575 383.223 228.822 383.553 cv
228.822 383.553 li
234.685 391.37 li
234.934 391.7 234.868 392.17 234.536 392.419 cv
234.536 392.419 li
234.4 392.521 234.242 392.57 234.084 392.57 cv
234.084 392.57 li
233.857 392.57 233.633 392.466 233.486 392.27 cv
233.486 392.27 li
cp
f
226.671 400.887 mo
220.416 399.099 li
220.019 398.983 219.788 398.57 219.902 398.171 cv
219.902 398.171 li
220.014 397.773 220.43 397.543 220.828 397.657 cv
220.828 397.657 li
227.085 399.445 li
227.482 399.56 227.713 399.974 227.599 400.373 cv
227.599 400.373 li
227.504 400.701 227.205 400.916 226.878 400.916 cv
226.878 400.916 li
226.81 400.916 226.74 400.906 226.671 400.887 cv
226.671 400.887 li
cp
f
217.25 415.653 mo
217.046 415.293 217.173 414.837 217.533 414.633 cv
217.533 414.633 li
227.811 408.824 li
228.171 408.62 228.627 408.747 228.831 409.107 cv
228.831 409.107 li
229.035 409.468 228.908 409.925 228.548 410.129 cv
228.548 410.129 li
218.271 415.939 li
218.154 416.004 218.028 416.035 217.903 416.035 cv
217.903 416.035 li
217.642 416.035 217.388 415.899 217.25 415.653 cv
217.25 415.653 li
cp
f
229.62 428.017 mo
229.268 427.796 229.159 427.334 229.378 426.981 cv
229.378 426.981 li
236.184 416.047 li
236.403 415.694 236.866 415.586 237.217 415.806 cv
237.217 415.806 li
237.569 416.024 237.678 416.487 237.458 416.838 cv
237.458 416.838 li
230.653 427.774 li
230.511 428.004 230.265 428.13 230.014 428.13 cv
230.014 428.13 li
229.879 428.13 229.743 428.094 229.62 428.017 cv
229.62 428.017 li
cp
f
243.957 429.538 mo
243.542 429.536 243.208 429.2 243.21 428.785 cv
243.21 428.785 li
243.246 422.355 li
243.248 421.942 243.586 421.608 243.999 421.61 cv
243.999 421.61 li
244.414 421.613 244.748 421.949 244.746 422.364 cv
244.746 422.364 li
244.71 428.793 li
244.708 429.206 244.375 429.538 243.965 429.538 cv
243.965 429.538 li
243.962 429.538 243.96 429.538 243.957 429.538 cv
243.957 429.538 li
cp
f
241.804 385.988 mo
241.391 385.986 241.057 385.65 241.059 385.234 cv
241.059 385.234 li
241.094 378.807 li
241.094 378.391 241.433 378.059 241.848 378.061 cv
241.848 378.061 li
242.261 378.063 242.595 378.399 242.593 378.814 cv
242.593 378.814 li
242.558 385.243 li
242.555 385.656 242.223 385.988 241.812 385.988 cv
241.812 385.988 li
241.809 385.988 241.807 385.988 241.804 385.988 cv
241.804 385.988 li
cp
f
258.622 425.48 mo
251.098 415.726 li
250.846 415.397 250.906 414.927 251.233 414.674 cv
251.233 414.674 li
251.561 414.42 252.032 414.482 252.287 414.81 cv
252.287 414.81 li
259.81 424.564 li
260.063 424.893 260.002 425.363 259.673 425.616 cv
259.673 425.616 li
259.537 425.722 259.375 425.772 259.216 425.772 cv
259.216 425.772 li
258.991 425.772 258.769 425.672 258.622 425.48 cv
258.622 425.48 li
cp
f
268.962 408.623 mo
258.844 405.692 li
258.446 405.576 258.217 405.16 258.333 404.765 cv
258.333 404.765 li
258.448 404.364 258.864 404.136 259.262 404.252 cv
259.262 404.252 li
269.378 407.183 li
269.775 407.297 270.004 407.714 269.89 408.111 cv
269.89 408.111 li
269.795 408.44 269.496 408.653 269.171 408.653 cv
269.171 408.653 li
269.102 408.653 269.031 408.644 268.962 408.623 cv
268.962 408.623 li
cp
f
259.367 396.623 mo
259.231 396.232 259.439 395.805 259.832 395.671 cv
259.832 395.671 li
269.202 392.431 li
269.593 392.294 270.019 392.504 270.154 392.895 cv
270.154 392.895 li
270.29 393.285 270.083 393.713 269.691 393.847 cv
269.691 393.847 li
260.32 397.087 li
260.239 397.115 260.156 397.129 260.074 397.129 cv
260.074 397.129 li
259.764 397.129 259.475 396.934 259.367 396.623 cv
259.367 396.623 li
cp
f
250.451 391.474 mo
250.094 391.269 249.971 390.81 250.179 390.45 cv
250.179 390.45 li
255.717 380.887 li
255.922 380.527 256.381 380.404 256.741 380.612 cv
256.741 380.612 li
257.098 380.82 257.221 381.279 257.015 381.637 cv
257.015 381.637 li
251.477 391.202 li
251.338 391.441 251.086 391.576 250.827 391.576 cv
250.827 391.576 li
250.699 391.576 250.569 391.543 250.451 391.474 cv
250.451 391.474 li
cp
f
120.323 489.026 mo
123.312 483.181 li
126.22 489.257 li
131.496 489.935 li
127.468 494.092 li
128.835 500.764 li
123.082 496.319 li
116.806 500.241 li
118.997 493.184 li
114.737 488.767 li
120.323 489.026 li
cp
f
234.74 548.25 mo
232.936 546.78 231.505 544.5 231.509 541.594 cv
231.509 541.594 li
231.509 540.631 231.664 539.608 232 538.534 cv
232 538.534 li
232.164 538.008 232.725 537.715 233.252 537.881 cv
233.252 537.881 li
233.779 538.043 234.073 538.604 233.908 539.132 cv
233.908 539.132 li
233.628 540.025 233.51 540.847 233.51 541.594 cv
233.51 541.594 li
233.514 543.831 234.564 545.506 236.01 546.704 cv
236.01 546.704 li
237.446 547.895 239.3 548.513 240.547 548.502 cv
240.547 548.502 li
241.106 548.504 241.517 548.377 241.699 548.248 cv
241.699 548.248 li
241.875 548.107 241.906 548.078 241.925 547.803 cv
241.925 547.803 li
241.925 547.725 241.917 547.63 241.892 547.515 cv
241.892 547.515 li
241.775 546.976 242.118 546.444 242.658 546.327 cv
242.658 546.327 li
243.198 546.211 243.731 546.554 243.848 547.094 cv
243.848 547.094 li
243.898 547.333 243.926 547.57 243.926 547.803 cv
243.926 547.803 li
243.945 548.671 243.477 549.49 242.808 549.912 cv
242.808 549.912 li
242.146 550.348 241.369 550.498 240.547 550.502 cv
240.547 550.502 li
238.72 550.492 236.557 549.728 234.74 548.25 cv
234.74 548.25 li
cp
f
242.869 547.306 mo
242.158 541.294 240.477 530.397 241.013 526.374 cv
235.425 526.097 217.594 521.063 214.699 530.837 cv
213.188 535.942 224.354 544.647 230.641 541.679 cv
236.196 539.056 241.032 541.745 242.869 547.306 cv
cp
0 0 0 0 cmyk
f
241.254 542.52 mo
240.628 537.69 239.911 531.998 239.91 528.327 cv
239.91 528.327 li
239.91 527.961 239.916 527.613 239.931 527.285 cv
239.931 527.285 li
236.678 526.94 231.334 525.828 226.388 525.832 cv
226.388 525.832 li
223.793 525.828 221.343 526.144 219.466 526.967 cv
219.466 526.967 li
217.586 527.803 216.287 529.04 215.659 531.121 cv
215.659 531.121 li
215.593 531.339 215.559 531.573 215.559 531.828 cv
215.559 531.828 li
215.513 533.457 217.144 535.978 219.599 537.916 cv
219.599 537.916 li
222.029 539.878 225.192 541.292 227.762 541.277 cv
227.762 541.277 li
228.664 541.277 229.489 541.114 230.215 540.773 cv
230.215 540.773 li
231.787 540.03 233.345 539.664 234.828 539.664 cv
234.828 539.664 li
234.836 539.664 234.843 539.664 234.851 539.664 cv
234.851 539.664 li
237.363 539.664 239.577 540.725 241.254 542.52 cv
241.254 542.52 li
cp
234.828 541.664 mo
233.675 541.664 232.414 541.946 231.065 542.583 cv
231.065 542.583 li
230.03 543.067 228.905 543.277 227.762 543.277 cv
227.762 543.277 li
224.5 543.262 221.062 541.641 218.348 539.476 cv
218.348 539.476 li
215.661 537.283 213.605 534.579 213.559 531.828 cv
213.559 531.828 li
213.559 531.396 213.616 530.967 213.741 530.552 cv
213.741 530.552 li
214.518 527.877 216.391 526.111 218.666 525.134 cv
218.666 525.134 li
220.947 524.144 223.639 523.834 226.388 523.83 cv
226.388 523.83 li
232.174 523.834 238.375 525.252 241.063 525.375 cv
241.063 525.375 li
242.151 525.426 li
242.005 526.51 li
241.939 526.975 241.907 527.597 241.907 528.327 cv
241.907 528.327 li
241.903 533.074 243.241 541.963 243.863 547.188 cv
243.863 547.188 li
242.869 547.306 li
241.92 547.62 li
240.633 543.804 238.035 541.675 234.828 541.664 cv
234.828 541.664 li
cp
1 1 0.2 0.2 cmyk
f
326.301 477.398 mo
326.288 477.216 326.286 477.049 326.284 476.891 cv
326.284 476.891 li
326.308 474.184 327.501 471.752 329.156 470.273 cv
329.156 470.273 li
326.866 468.729 323.781 467.845 321.582 467.857 cv
321.582 467.857 li
320.646 467.854 319.889 468.022 319.478 468.25 cv
319.478 468.25 li
319.067 468.504 319.011 468.615 318.986 468.946 cv
318.986 468.946 li
318.986 469.11 319.03 469.35 319.164 469.668 cv
319.164 469.668 li
319.166 469.668 li
319.381 470.177 319.142 470.764 318.634 470.98 cv
318.634 470.98 li
318.125 471.194 317.538 470.957 317.323 470.449 cv
317.323 470.449 li
317.109 469.943 316.987 469.444 316.987 468.946 cv
316.987 468.946 li
316.963 467.854 317.664 466.923 318.53 466.488 cv
318.53 466.488 li
319.397 466.029 320.435 465.863 321.582 465.858 cv
321.582 465.858 li
324.679 465.874 328.673 467.135 331.483 469.543 cv
331.483 469.543 li
331.732 469.757 331.861 470.08 331.823 470.409 cv
331.823 470.409 li
331.787 470.736 331.592 471.024 331.301 471.18 cv
331.301 471.18 li
329.848 471.921 328.257 474.337 328.284 476.891 cv
328.284 476.891 li
328.284 477.021 328.288 477.141 328.297 477.254 cv
328.297 477.254 li
328.337 477.806 327.923 478.284 327.371 478.324 cv
327.371 478.324 li
327.347 478.326 327.322 478.327 327.298 478.327 cv
327.298 478.327 li
326.777 478.327 326.339 477.925 326.301 477.398 cv
326.301 477.398 li
cp
f
318.567 470.06 mo
320.384 475.834 324.479 483.555 324.7 487.606 cv
330.243 486.84 348.7 488.47 349.728 478.329 cv
350.263 473.032 337.255 469.229 331.628 473.315 cv
326.659 476.925 321.407 475.182 318.567 470.06 cv
cp
0 0 0 0 cmyk
f
325.251 486.509 mo
327.535 486.32 330.871 486.32 334.373 486.012 cv
334.373 486.012 li
338.421 485.665 342.628 484.873 345.293 483.111 cv
345.293 483.111 li
347.07 481.927 348.172 480.445 348.409 478.236 cv
348.409 478.236 li
348.415 478.16 348.42 478.085 348.418 478.009 cv
348.418 478.009 li
348.46 476.845 347.287 475.42 345.173 474.342 cv
345.173 474.342 li
343.099 473.269 340.276 472.587 337.647 472.592 cv
337.647 472.592 li
335.39 472.587 333.293 473.094 331.893 474.123 cv
331.893 474.123 li
329.957 475.531 327.91 476.225 325.936 476.223 cv
325.936 476.223 li
324.16 476.224 322.484 475.667 321.013 474.665 cv
321.013 474.665 li
322.711 478.84 324.709 483.262 325.251 486.509 cv
325.251 486.509 li
cp
323.378 487.659 mo
323.232 484.068 319.162 476.228 317.291 470.359 cv
317.291 470.359 li
318.244 470.059 li
319.118 469.573 li
320.815 472.612 323.287 474.22 325.936 474.223 cv
325.936 474.223 li
327.444 474.22 329.063 473.705 330.716 472.508 cv
330.716 472.508 li
332.622 471.127 335.11 470.595 337.647 470.591 cv
337.647 470.591 li
340.614 470.595 343.677 471.326 346.089 472.564 cv
346.089 472.564 li
348.464 473.798 350.378 475.584 350.418 478.009 cv
350.418 478.009 li
350.418 478.146 350.412 478.282 350.399 478.43 cv
350.399 478.43 li
350.124 481.281 348.533 483.397 346.388 484.784 cv
346.388 484.784 li
344.242 486.187 341.548 486.973 338.757 487.469 cv
338.757 487.469 li
333.198 488.441 327.104 488.227 324.515 488.597 cv
324.515 488.597 li
323.437 488.746 li
323.378 487.659 li
323.378 487.659 li
cp
1 1 0.2 0.2 cmyk
f
214.59 530.53 mo
217.594 527.563 223.134 526.497 228.344 527.563 cv
239.879 529.925 264.635 531.894 283.02 532.509 cv
300.657 533.099 336.138 533.099 350.86 523.788 cv
352.907 519.954 349.536 512.491 348.972 502.276 cv
348.499 493.676 351.108 482.278 349.728 477.875 cv
336.894 485.901 300.657 486.223 283.02 485.634 cv
267.069 485.101 229.312 477.875 213.835 487.187 cv
214.59 491.039 218.674 522.534 214.59 530.53 cv
cp
0 0 0 0 cmyk
f
228.544 526.583 mo
239.943 528.919 264.718 530.897 283.053 531.508 cv
283.053 531.508 li
286.59 531.626 290.847 531.721 295.508 531.721 cv
295.508 531.721 li
313.876 531.75 338.67 530.171 350.086 523.093 cv
350.086 523.093 li
350.371 522.451 350.512 521.627 350.51 520.599 cv
350.51 520.599 li
350.535 516.699 348.422 510.339 347.972 502.331 cv
347.972 502.331 li
347.93 501.579 347.913 500.809 347.91 500.028 cv
347.91 500.028 li
347.915 493.595 349.138 486.278 349.132 481.552 cv
349.132 481.552 li
349.133 480.76 349.097 480.041 349.023 479.429 cv
349.023 479.429 li
337.51 485.56 312.96 486.786 294.762 486.823 cv
294.762 486.823 li
290.356 486.821 286.336 486.741 282.985 486.633 cv
282.985 486.633 li
273.078 486.295 255.132 483.455 239.211 483.457 cv
239.211 483.457 li
229.538 483.445 220.634 484.535 214.94 487.7 cv
214.94 487.7 li
215.606 491.727 217.374 505.729 217.377 517.106 cv
217.377 517.106 li
217.366 521.27 217.156 525.04 216.505 527.933 cv
216.505 527.933 li
218.766 526.742 221.522 526.164 224.365 526.158 cv
224.365 526.158 li
225.747 526.158 227.156 526.298 228.544 526.583 cv
228.544 526.583 li
cp
282.985 533.507 mo
264.551 532.888 239.814 530.927 228.143 528.541 cv
228.143 528.541 li
226.89 528.283 225.613 528.156 224.365 528.159 cv
224.365 528.159 li
220.68 528.15 217.259 529.28 215.292 531.241 cv
215.292 531.241 li
214.588 530.529 li
215.292 531.241 li
214.941 531.586 214.396 531.626 213.999 531.337 cv
213.999 531.337 li
213.602 531.045 213.475 530.513 213.699 530.075 cv
213.699 530.075 li
214.868 527.844 215.396 522.815 215.376 517.106 cv
215.376 517.106 li
215.383 505.154 213.346 489.868 212.854 487.377 cv
212.854 487.377 li
212.773 486.965 212.958 486.544 213.319 486.329 cv
213.319 486.329 li
219.617 482.558 229.044 481.47 239.211 481.457 cv
239.211 481.457 li
255.334 481.459 273.385 484.313 283.053 484.635 cv
283.053 484.635 li
286.381 484.742 290.38 484.822 294.762 484.822 cv
294.762 484.822 li
313.459 484.858 339.299 483.291 349.197 477.026 cv
349.197 477.026 li
349.459 476.861 349.782 476.829 350.074 476.936 cv
350.074 476.936 li
350.365 477.045 350.588 477.279 350.681 477.575 cv
350.681 477.575 li
351.024 478.687 351.128 480.018 351.131 481.552 cv
351.131 481.552 li
351.124 486.565 349.907 493.821 349.911 500.028 cv
349.911 500.028 li
349.911 500.776 349.929 501.51 349.969 502.22 cv
349.969 502.22 li
350.385 509.967 352.487 516.095 352.51 520.599 cv
352.51 520.599 li
352.51 521.938 352.318 523.175 351.741 524.257 cv
351.741 524.257 li
351.659 524.41 351.543 524.539 351.395 524.633 cv
351.395 524.633 li
339.17 532.298 314.162 533.688 295.508 533.72 cv
295.508 533.72 li
290.819 533.72 286.542 533.625 282.985 533.507 cv
282.985 533.507 li
cp
1 1 0.2 0.2 cmyk
f
225.74 186.513 mo
228.945 183.28 li
228.867 187.541 li
231.573 189.017 li
229.094 190.341 li
228.233 194.323 li
226.075 190.641 li
221.955 192.186 li
224.503 188.744 li
222.224 185.389 li
225.74 186.513 li
cp
f
230.072 214.622 mo
231.791 210.027 li
233.582 214.078 li
237.9 213.954 li
234.931 216.907 li
237.407 221.892 li
232.739 219.462 li
229.589 222.791 li
229.46 217.617 li
225.937 215.603 li
230.072 214.622 li
cp
f
266.681 208.639 mo
269.156 205.342 li
269.578 209.646 li
273.237 210.404 li
269.887 211.917 li
269.996 216.695 li
267.281 212.529 li
262.774 215.105 li
265.504 210.719 li
262.959 207.53 li
266.681 208.639 li
cp
f
269.101 182.567 mo
270.292 177.884 li
272.609 182.422 li
276.086 181.813 li
273.893 184.708 li
275.454 189.214 li
271.378 186.458 li
268.293 189.841 li
268.724 185.278 li
265.256 182.77 li
269.101 182.567 li
cp
f
307.935 173.311 mo
310.525 168 li
311.408 173.829 li
316.228 173.829 li
312.238 176.316 li
313.696 182.391 li
309.438 177.56 li
304.916 181.416 li
307.054 175.902 li
302.721 172.634 li
307.935 173.311 li
cp
f
228.846 209.675 mo
225.061 195.714 li
224.953 195.314 225.189 194.903 225.587 194.793 cv
225.587 194.793 li
225.988 194.685 226.4 194.922 226.508 195.322 cv
226.508 195.322 li
230.294 209.284 li
230.404 209.684 230.167 210.094 229.767 210.204 cv
229.767 210.204 li
229.702 210.222 229.636 210.23 229.571 210.23 cv
229.571 210.23 li
229.24 210.23 228.937 210.01 228.846 209.675 cv
228.846 209.675 li
cp
f
239.909 217.628 mo
239.819 217.222 240.071 216.822 240.475 216.73 cv
240.475 216.73 li
259.909 212.33 li
260.313 212.238 260.714 212.492 260.807 212.896 cv
260.807 212.896 li
260.896 213.3 260.645 213.701 260.241 213.793 cv
260.241 213.793 li
240.807 218.193 li
240.751 218.206 240.696 218.212 240.642 218.212 cv
240.642 218.212 li
240.298 218.212 239.988 217.977 239.909 217.628 cv
239.909 217.628 li
cp
f
270.226 202.803 mo
269.815 202.739 269.536 202.355 269.6 201.945 cv
269.6 201.945 li
271.433 190.211 li
271.496 189.803 271.88 189.524 272.291 189.587 cv
272.291 189.587 li
272.699 189.651 272.98 190.035 272.915 190.443 cv
272.915 190.443 li
271.082 202.177 li
271.024 202.548 270.705 202.812 270.342 202.812 cv
270.342 202.812 li
270.304 202.812 270.265 202.809 270.226 202.803 cv
270.226 202.803 li
cp
f
277.688 183.939 mo
277.571 183.541 277.8 183.125 278.197 183.008 cv
278.197 183.008 li
302.029 176.041 li
302.427 175.925 302.845 176.154 302.96 176.552 cv
302.96 176.552 li
303.077 176.949 302.849 177.365 302.451 177.48 cv
302.451 177.48 li
278.618 184.448 li
278.547 184.468 278.476 184.479 278.406 184.479 cv
278.406 184.479 li
278.082 184.479 277.783 184.266 277.688 183.939 cv
277.688 183.939 li
cp
f
334.255 292.158 mo
337.46 288.926 li
337.382 293.187 li
340.087 294.662 li
337.61 295.986 li
336.749 299.969 li
334.591 296.286 li
330.47 297.831 li
333.019 294.39 li
330.739 291.035 li
334.255 292.158 li
cp
f
320.677 266.187 mo
322.396 261.593 li
324.187 265.644 li
328.505 265.519 li
325.534 268.473 li
328.013 273.458 li
323.343 271.027 li
320.194 274.356 li
320.065 269.183 li
316.542 267.169 li
320.677 266.187 li
cp
f
286.101 252.299 mo
286.585 248.204 li
289.111 251.713 li
292.657 250.532 li
290.52 253.522 li
293.015 257.598 li
288.574 255.36 li
285.973 259.853 li
286.128 254.689 li
282.327 253.21 li
286.101 252.299 li
cp
f
293.343 289.267 mo
294.536 284.583 li
296.851 289.121 li
300.329 288.513 li
298.136 291.409 li
299.696 295.914 li
295.62 293.158 li
292.536 296.541 li
292.968 291.979 li
289.499 289.469 li
293.343 289.267 li
cp
f
333.585 231.786 mo
336.175 226.475 li
337.056 232.304 li
341.876 232.304 li
337.886 234.792 li
339.347 240.866 li
335.087 236.035 li
330.563 239.891 li
332.704 234.377 li
328.37 231.109 li
333.585 231.786 li
cp
f
292.468 282.648 mo
289.514 260.139 li
289.46 259.729 289.75 259.353 290.161 259.299 cv
290.161 259.299 li
290.571 259.244 290.947 259.534 291.001 259.945 cv
291.001 259.945 li
293.954 282.453 li
294.01 282.864 293.719 283.241 293.308 283.294 cv
293.308 283.294 li
293.274 283.298 293.242 283.301 293.21 283.301 cv
293.21 283.301 li
292.84 283.301 292.518 283.026 292.468 282.648 cv
292.468 282.648 li
cp
f
328.11 295.474 mo
301.172 292.891 li
300.761 292.853 300.459 292.485 300.498 292.074 cv
300.498 292.074 li
300.537 291.661 300.903 291.359 301.316 291.398 cv
301.316 291.398 li
328.253 293.981 li
328.666 294.021 328.968 294.387 328.929 294.8 cv
328.929 294.8 li
328.892 295.188 328.565 295.478 328.186 295.477 cv
328.186 295.477 li
328.161 295.477 328.136 295.476 328.11 295.474 cv
328.11 295.474 li
cp
f
333.469 289.658 mo
324.891 275.972 li
324.672 275.62 324.777 275.157 325.129 274.938 cv
325.129 274.938 li
325.48 274.719 325.943 274.824 326.163 275.176 cv
326.163 275.176 li
334.739 288.862 li
334.96 289.213 334.853 289.676 334.501 289.896 cv
334.501 289.896 li
334.378 289.974 334.24 290.011 334.104 290.011 cv
334.104 290.011 li
333.855 290.011 333.611 289.885 333.469 289.658 cv
333.469 289.658 li
cp
f
325.934 261.726 mo
325.551 261.569 325.367 261.13 325.524 260.746 cv
325.524 260.746 li
333.604 241.056 li
333.761 240.674 334.199 240.49 334.582 240.647 cv
334.582 240.647 li
334.965 240.804 335.148 241.245 334.991 241.627 cv
334.991 241.627 li
326.912 261.317 li
326.793 261.606 326.513 261.782 326.217 261.782 cv
326.217 261.782 li
326.123 261.782 326.026 261.764 325.934 261.726 cv
325.934 261.726 li
cp
f
293.627 251.709 mo
293.447 251.335 293.604 250.887 293.978 250.708 cv
293.978 250.708 li
327.182 234.725 li
327.556 234.545 328.004 234.702 328.184 235.076 cv
328.184 235.076 li
328.363 235.448 328.207 235.896 327.833 236.076 cv
327.833 236.076 li
294.629 252.059 li
294.523 252.109 294.413 252.133 294.304 252.133 cv
294.304 252.133 li
294.024 252.133 293.756 251.977 293.627 251.709 cv
293.627 251.709 li
cp
f
237.243 522.696 mo
233.367 522.69 230.063 520.364 228.524 517.155 cv
228.524 517.155 li
228.286 516.657 228.495 516.061 228.993 515.821 cv
228.993 515.821 li
229.491 515.583 230.088 515.792 230.326 516.29 cv
230.326 516.29 li
231.552 518.844 234.192 520.7 237.243 520.694 cv
237.243 520.694 li
239.03 520.694 240.991 520.075 242.979 518.515 cv
242.979 518.515 li
243.867 517.79 244.145 517.084 244.16 516.188 cv
244.16 516.188 li
244.253 513.734 241.109 509.989 238.76 508.371 cv
238.76 508.371 li
237.203 507.248 235.198 506.246 233.508 505.026 cv
233.508 505.026 li
231.843 503.828 230.329 502.256 230.322 499.975 cv
230.322 499.975 li
230.324 498.595 230.881 497.12 232.033 495.48 cv
232.033 495.48 li
234.169 492.404 237.06 490.936 239.908 490.944 cv
239.908 490.944 li
242.839 490.946 245.639 492.45 247.629 494.932 cv
247.629 494.932 li
247.975 495.362 247.905 495.991 247.475 496.337 cv
247.475 496.337 li
247.042 496.682 246.414 496.613 246.069 496.182 cv
246.069 496.182 li
244.398 494.101 242.136 492.942 239.908 492.944 cv
239.908 492.944 li
237.743 492.953 235.532 493.989 233.671 496.626 cv
233.671 496.626 li
232.66 498.067 232.318 499.158 232.322 499.975 cv
232.322 499.975 li
232.314 501.26 233.16 502.298 234.682 503.408 cv
234.682 503.408 li
236.178 504.497 238.184 505.504 239.925 506.744 cv
239.925 506.744 li
242.559 508.694 246.067 512.37 246.16 516.188 cv
246.16 516.188 li
246.177 517.604 245.55 519.052 244.217 520.084 cv
244.217 520.084 li
241.93 521.888 239.509 522.696 237.252 522.696 cv
237.252 522.696 li
237.249 522.696 237.246 522.696 237.243 522.696 cv
237.243 522.696 li
cp
f
252.314 507.188 mo
252.314 506.636 252.761 506.187 253.313 506.187 cv
253.313 506.187 li
255.889 506.185 261.171 505.961 265.113 504.986 cv
265.113 504.986 li
265.467 504.923 266.111 504.377 266.572 503.448 cv
266.572 503.448 li
267.044 502.536 267.358 501.323 267.354 500.181 cv
267.354 500.181 li
267.329 498.427 266.729 497.023 265.166 496.381 cv
265.166 496.381 li
263.758 495.796 261.203 495.528 258.713 495.539 cv
258.713 495.539 li
256.411 495.536 254.121 495.743 252.714 495.996 cv
252.714 495.996 li
252.714 495.998 li
252.171 496.095 251.65 495.732 251.554 495.188 cv
251.554 495.188 li
251.457 494.646 251.817 494.125 252.36 494.028 cv
252.36 494.028 li
253.936 493.746 256.289 493.54 258.713 493.537 cv
258.713 493.537 li
261.344 493.546 264.011 493.763 265.919 494.529 cv
265.919 494.529 li
268.424 495.539 269.38 497.976 269.355 500.181 cv
269.355 500.181 li
269.351 501.673 268.976 503.147 268.353 504.362 cv
268.353 504.362 li
267.72 505.563 266.863 506.587 265.593 506.928 cv
265.593 506.928 li
261.34 507.969 256 508.18 253.317 508.186 cv
253.317 508.186 li
252.765 508.188 252.316 507.739 252.314 507.188 cv
252.314 507.188 li
cp
f
252.986 522.09 mo
252.592 494.944 li
252.583 494.392 253.026 493.938 253.577 493.93 cv
253.577 493.93 li
254.13 493.921 254.584 494.362 254.592 494.915 cv
254.592 494.915 li
254.987 522.063 li
254.995 522.613 254.554 523.068 254.001 523.075 cv
254.001 523.075 li
253.996 523.075 253.991 523.075 253.986 523.075 cv
253.986 523.075 li
253.44 523.075 252.995 522.638 252.986 522.09 cv
252.986 522.09 li
cp
f
303.547 522.791 mo
301.514 522.789 299.517 522.396 297.822 521.77 cv
297.822 521.77 li
294.28 520.457 290.777 516.461 290.775 510.589 cv
290.775 510.589 li
290.775 510.493 290.775 510.407 290.777 510.338 cv
290.777 510.338 li
290.853 505.978 291.817 501.621 293.864 498.253 cv
293.864 498.253 li
295.888 494.892 299.15 492.509 303.478 492.526 cv
303.478 492.526 li
305.913 492.526 308.642 493.259 311.676 494.843 cv
311.676 494.843 li
311.678 494.843 li
312.165 495.099 312.354 495.704 312.1 496.193 cv
312.1 496.193 li
311.842 496.681 311.238 496.871 310.749 496.615 cv
310.749 496.615 li
307.926 495.139 305.508 494.526 303.478 494.526 cv
303.478 494.526 li
299.905 494.543 297.388 496.354 295.571 499.295 cv
295.571 499.295 li
293.775 502.23 292.841 506.286 292.777 510.378 cv
292.777 510.378 li
292.775 510.458 292.773 510.527 292.773 510.589 cv
292.773 510.589 li
292.769 515.628 295.775 518.879 298.517 519.895 cv
298.517 519.895 li
299.985 520.438 301.774 520.791 303.547 520.789 cv
303.547 520.789 li
306.546 520.782 309.375 519.816 310.989 517.313 cv
310.989 517.313 li
311.287 516.85 311.907 516.716 312.37 517.016 cv
312.37 517.016 li
312.834 517.315 312.967 517.934 312.669 518.398 cv
312.669 518.398 li
310.569 521.645 306.958 522.791 303.575 522.791 cv
303.575 522.791 li
303.566 522.791 303.557 522.791 303.547 522.791 cv
303.547 522.791 li
cp
f
266.739 524.173 mo
266.277 523.87 266.148 523.25 266.45 522.788 cv
266.45 522.788 li
268.613 519.5 271.521 512.17 273.818 505.754 cv
273.818 505.754 li
276.125 499.323 277.864 493.769 277.868 493.758 cv
277.868 493.758 li
277.999 493.336 278.394 493.051 278.834 493.057 cv
278.834 493.057 li
279.276 493.062 279.664 493.358 279.784 493.783 cv
279.784 493.783 li
279.787 493.791 280.711 497.055 282.102 501.354 cv
282.102 501.354 li
283.49 505.65 285.343 510.971 287.169 515.007 cv
287.169 515.007 li
288.367 517.687 289.632 519.824 290.482 520.544 cv
290.482 520.544 li
290.896 520.909 290.938 521.541 290.573 521.956 cv
290.573 521.956 li
290.208 522.37 289.577 522.41 289.163 522.047 cv
289.163 522.047 li
287.825 520.844 286.623 518.617 285.348 515.832 cv
285.348 515.832 li
284.092 513.052 282.845 509.745 281.737 506.563 cv
281.737 506.563 li
280.524 503.079 279.479 499.746 278.779 497.441 cv
278.779 497.441 li
276.692 503.814 271.753 518.302 268.124 523.883 cv
268.124 523.883 li
267.932 524.177 267.612 524.336 267.286 524.336 cv
267.286 524.336 li
267.098 524.336 266.908 524.282 266.739 524.173 cv
266.739 524.173 li
cp
f
270.286 510.923 mo
270.284 510.371 270.729 509.922 271.281 509.92 cv
271.281 509.92 li
285.078 509.858 li
285.63 509.854 286.079 510.299 286.081 510.854 cv
286.081 510.854 li
286.085 511.405 285.638 511.854 285.086 511.856 cv
285.086 511.856 li
271.292 511.918 li
271.289 511.918 271.286 511.918 271.284 511.918 cv
271.284 511.918 li
270.735 511.918 270.288 511.473 270.286 510.923 cv
270.286 510.923 li
cp
f
315.413 494.247 mo
315.384 493.694 315.805 493.223 316.357 493.193 cv
316.357 493.193 li
330.373 492.42 li
330.924 492.39 331.396 492.811 331.427 493.364 cv
331.427 493.364 li
331.456 493.915 331.035 494.386 330.482 494.418 cv
330.482 494.418 li
316.467 495.189 li
316.447 495.19 316.428 495.191 316.409 495.191 cv
316.409 495.191 li
315.883 495.191 315.443 494.778 315.413 494.247 cv
315.413 494.247 li
cp
f
315.749 520.834 mo
315.555 520.633 315.454 520.367 315.469 520.089 cv
315.469 520.089 li
315.467 520.076 315.769 514.021 315.766 507.383 cv
315.766 507.383 li
315.769 502.458 315.598 497.192 315.036 493.979 cv
315.036 493.979 li
315.036 493.981 li
314.941 493.438 315.306 492.921 315.849 492.825 cv
315.849 492.825 li
316.393 492.729 316.909 493.094 317.004 493.638 cv
317.004 493.638 li
317.605 497.11 317.764 502.399 317.769 507.383 cv
317.769 507.383 li
317.767 512.402 317.598 517.086 317.513 519.121 cv
317.513 519.121 li
331.652 518.872 li
332.205 518.861 332.66 519.302 332.669 519.853 cv
332.669 519.853 li
332.677 520.403 332.238 520.859 331.688 520.869 cv
331.688 520.869 li
316.485 521.138 li
316.478 521.138 316.47 521.138 316.463 521.138 cv
316.463 521.138 li
316.192 521.138 315.938 521.028 315.749 520.834 cv
315.749 520.834 li
cp
f
315.011 507.721 mo
314.993 507.167 315.428 506.705 315.979 506.688 cv
315.979 506.688 li
316.451 506.676 330.868 505.543 330.883 505.541 cv
330.883 505.541 li
331.433 505.498 331.913 505.909 331.958 506.459 cv
331.958 506.459 li
332 507.009 331.589 507.489 331.039 507.533 cv
331.039 507.533 li
331.016 507.535 316.706 508.665 316.042 508.688 cv
316.042 508.688 li
316.042 508.689 li
316.033 508.69 316.024 508.69 316.015 508.69 cv
316.015 508.69 li
315.476 508.69 315.026 508.264 315.011 507.721 cv
315.011 507.721 li
cp
f
215.53 564.879 mo
212.942 552.781 202.46 543.6 189.74 542.991 cv
189.74 542.991 li
189.192 542.964 188.768 542.504 188.79 541.954 cv
188.79 541.954 li
188.809 541.467 188.826 540.989 188.826 540.521 cv
188.826 540.521 li
188.823 530.47 184.753 521.38 178.168 514.794 cv
178.168 514.794 li
171.581 508.207 162.491 504.137 152.442 504.137 cv
152.442 504.137 li
140.139 504.137 129.275 510.247 122.688 519.594 cv
122.688 519.594 li
122.519 519.833 122.251 519.986 121.958 520.014 cv
121.958 520.014 li
121.668 520.039 121.375 519.936 121.167 519.729 cv
121.167 519.729 li
115.895 514.533 108.667 511.328 100.68 511.328 cv
100.68 511.328 li
86.3403 511.324 74.4233 521.672 71.9609 535.299 cv
71.9609 535.299 li
71.8652 535.831 71.3672 536.188 70.8325 536.111 cv
70.8325 536.111 li
69.3096 535.889 67.7549 535.77 66.1729 535.77 cv
66.1729 535.77 li
64.2661 535.77 62.3999 535.945 60.5801 536.266 cv
60.5801 536.266 li
60.2852 536.316 59.9863 536.236 59.7573 536.041 cv
59.7573 536.041 li
59.5303 535.846 59.4028 535.563 59.4072 535.263 cv
59.4072 535.263 li
59.4116 535.063 59.4224 534.9 59.4199 534.769 cv
59.4199 534.769 li
59.3926 518.646 46.3491 505.603 30.2261 505.574 cv
30.2261 505.574 li
28.7354 505.574 27.2715 505.688 25.8403 505.903 cv
25.8403 505.903 li
25.5029 505.952 25.1655 505.831 24.9409 505.574 cv
24.9409 505.574 li
24.7158 505.318 24.6353 504.968 24.731 504.64 cv
24.731 504.64 li
25.7788 500.962 26.3511 497.085 26.3511 493.072 cv
26.3511 493.072 li
26.3511 475.925 16.1094 461.172 1.40771 454.593 cv
1.40771 454.593 li
0.902832 454.368 0.678223 453.776 0.902832 453.271 cv
0.902832 453.271 li
1.12744 452.767 1.71924 452.542 2.22412 452.767 cv
2.22412 452.767 li
17.624 459.655 28.3491 475.112 28.3511 493.072 cv
28.3511 493.072 li
28.3511 496.751 27.8916 500.32 27.042 503.736 cv
27.042 503.736 li
28.0889 503.63 29.1519 503.574 30.2261 503.574 cv
30.2261 503.574 li
47.2334 503.574 61.0615 517.186 61.4131 534.108 cv
61.4131 534.108 li
62.9663 533.889 64.5547 533.77 66.1729 533.77 cv
66.1729 533.77 li
67.5283 533.77 68.8643 533.853 70.1763 534.008 cv
70.1763 534.008 li
73.1733 519.905 85.6855 509.328 100.68 509.326 cv
100.68 509.326 li
108.792 509.326 116.186 512.432 121.732 517.508 cv
121.732 517.508 li
128.729 508.181 139.879 502.137 152.442 502.137 cv
152.442 502.137 li
173.64 502.137 190.823 519.322 190.826 540.521 cv
190.826 540.521 li
190.826 540.701 190.823 540.88 190.819 541.057 cv
190.819 541.057 li
204.015 542.127 214.776 551.796 217.485 564.459 cv
217.485 564.459 li
217.485 564.461 li
217.6 565 217.256 565.532 216.715 565.646 cv
216.715 565.646 li
216.645 565.662 216.574 565.669 216.504 565.669 cv
216.504 565.669 li
216.044 565.669 215.629 565.347 215.53 564.879 cv
215.53 564.879 li
cp
f
341.489 564.989 mo
340.96 564.827 340.662 564.269 340.823 563.739 cv
340.823 563.739 li
343.811 553.881 352.966 546.711 363.8 546.709 cv
363.8 546.709 li
369.437 546.709 374.627 548.658 378.723 551.914 cv
378.723 551.914 li
382.286 542.164 391.637 535.208 402.621 535.206 cv
402.621 535.206 li
405.937 535.206 409.11 535.843 412.019 536.998 cv
412.019 536.998 li
417.626 533.469 424.265 531.418 431.378 531.418 cv
431.378 531.418 li
436.753 531.418 441.865 532.587 446.461 534.681 cv
446.461 534.681 li
453.949 527.027 464.396 522.266 475.95 522.266 cv
475.95 522.266 li
477.601 522.266 479.224 522.37 480.817 522.561 cv
480.817 522.561 li
487.506 504.747 504.685 492.072 524.834 492.07 cv
524.834 492.07 li
528.483 492.07 532.035 492.489 535.446 493.275 cv
535.446 493.275 li
536.681 477.415 548.764 464.601 564.289 462.262 cv
564.289 462.262 li
564.291 462.262 li
564.836 462.182 565.346 462.556 565.427 463.102 cv
565.427 463.102 li
565.508 463.646 565.133 464.156 564.587 464.239 cv
564.587 464.239 li
549.61 466.494 538.022 479.122 537.372 494.575 cv
537.372 494.575 li
537.359 494.877 537.213 495.153 536.968 495.334 cv
536.968 495.334 li
536.724 495.515 536.415 495.576 536.122 495.499 cv
536.122 495.499 li
532.517 494.568 528.734 494.071 524.834 494.071 cv
524.834 494.071 li
505.271 494.068 488.631 506.558 482.423 523.987 cv
482.423 523.987 li
482.266 524.435 481.815 524.708 481.346 524.645 cv
481.346 524.645 li
479.577 524.4 477.778 524.267 475.95 524.264 cv
475.95 524.264 li
464.702 524.267 454.575 529.001 447.413 536.577 cv
447.413 536.577 li
447.115 536.894 446.646 536.98 446.254 536.792 cv
446.254 536.792 li
441.75 534.63 436.709 533.42 431.378 533.42 cv
431.378 533.42 li
424.471 533.42 418.053 535.459 412.662 538.958 cv
412.662 538.958 li
412.384 539.139 412.032 539.171 411.729 539.041 cv
411.729 539.041 li
408.929 537.858 405.853 537.206 402.621 537.206 cv
402.621 537.206 li
392.012 537.204 383.056 544.253 380.162 553.917 cv
380.162 553.917 li
380.063 554.247 379.805 554.502 379.474 554.594 cv
379.474 554.594 li
379.142 554.687 378.789 554.604 378.534 554.374 cv
378.534 554.374 li
374.631 550.852 369.472 548.711 363.8 548.709 cv
363.8 548.709 li
353.87 548.709 345.477 555.289 342.736 564.321 cv
342.736 564.321 li
342.604 564.754 342.207 565.032 341.778 565.032 cv
341.778 565.032 li
341.683 565.032 341.585 565.018 341.489 564.989 cv
341.489 564.989 li
cp
f
21.0977 513.784 mo
20.6719 513.431 20.6147 512.8 20.9692 512.374 cv
20.9692 512.374 li
22.335 510.802 24.7886 505.448 24.9951 503.949 cv
24.9951 503.949 li
25.0859 503.405 25.6001 503.036 26.146 503.127 cv
26.146 503.127 li
26.6899 503.218 27.0586 503.732 26.9683 504.278 cv
26.9683 504.278 li
26.5508 506.504 24.2446 511.502 22.5059 513.656 cv
22.5059 513.656 li
22.3071 513.894 22.0225 514.017 21.7358 514.017 cv
21.7358 514.017 li
21.5103 514.017 21.2842 513.94 21.0977 513.784 cv
21.0977 513.784 li
cp
f
79.4536 538.245 mo
78.0542 537.066 74.0142 536.085 71.2212 536.117 cv
71.2212 536.117 li
71.1558 536.117 71.0815 536.119 71.0015 536.121 cv
71.0015 536.121 li
70.4497 536.134 69.9907 535.698 69.978 535.146 cv
69.978 535.146 li
69.9634 534.593 70.4009 534.134 70.9526 534.121 cv
70.9526 534.121 li
71.0332 534.119 71.124 534.117 71.2212 534.117 cv
71.2212 534.117 li
74.4307 534.148 78.5146 534.99 80.7026 536.684 cv
80.7026 536.684 li
81.1343 537.028 81.2041 537.658 80.8594 538.089 cv
80.8594 538.089 li
80.6621 538.336 80.3711 538.465 80.0776 538.465 cv
80.0776 538.465 li
79.8584 538.465 79.6377 538.393 79.4536 538.245 cv
79.4536 538.245 li
cp
f
175.928 545.223 mo
175.6 544.776 175.695 544.149 176.142 543.824 cv
176.142 543.824 li
177.383 542.945 179.58 542.319 182.015 541.775 cv
182.015 541.775 li
184.438 541.253 186.981 540.904 188.682 540.899 cv
188.682 540.899 li
189.188 540.901 189.617 540.93 190.015 541.019 cv
190.015 541.019 li
190.553 541.146 190.887 541.681 190.762 542.22 cv
190.762 542.22 li
190.637 542.758 190.1 543.092 189.563 542.967 cv
189.563 542.967 li
189.42 542.931 189.095 542.897 188.682 542.899 cv
188.682 542.899 li
187.243 542.897 184.742 543.228 182.438 543.73 cv
182.438 543.73 li
180.151 544.209 177.944 544.949 177.326 545.437 cv
177.326 545.437 li
177.147 545.567 176.94 545.631 176.734 545.631 cv
176.734 545.631 li
176.427 545.631 176.123 545.489 175.928 545.223 cv
175.928 545.223 li
cp
f
455.456 542.091 mo
454.952 541.403 452.547 539.919 450.063 538.675 cv
450.063 538.675 li
447.56 537.397 444.887 536.209 443.514 535.623 cv
443.514 535.623 li
443.514 535.625 li
443.006 535.407 442.77 534.821 442.985 534.313 cv
442.985 534.313 li
443.201 533.804 443.789 533.567 444.297 533.785 cv
444.297 533.785 li
445.705 534.386 448.401 535.583 450.972 536.894 cv
450.972 536.894 li
453.559 538.237 455.927 539.54 457.017 540.843 cv
457.017 540.843 li
457.361 541.272 457.291 541.902 456.86 542.247 cv
456.86 542.247 li
456.676 542.395 456.456 542.466 456.237 542.466 cv
456.237 542.466 li
455.943 542.466 455.652 542.337 455.456 542.091 cv
455.456 542.091 li
cp
f
547.671 503.238 mo
545.455 500.149 538.095 496.033 534.341 495.105 cv
534.341 495.105 li
533.807 494.968 533.484 494.423 533.624 493.888 cv
533.624 493.888 li
533.762 493.354 534.308 493.03 534.842 493.168 cv
534.842 493.168 li
539.149 494.329 546.417 498.273 549.279 502.051 cv
549.279 502.051 li
549.607 502.496 549.513 503.122 549.069 503.449 cv
549.069 503.449 li
548.89 503.581 548.682 503.645 548.476 503.645 cv
548.476 503.645 li
548.168 503.645 547.866 503.504 547.671 503.238 cv
547.671 503.238 li
cp
f
258.929 544.389 mo
258.897 543.685 258.67 543.101 258.25 542.637 cv
257.828 542.173 257.228 541.941 256.449 541.941 cv
256.086 541.941 255.75 542.008 255.441 542.141 cv
255.132 542.274 254.86 542.456 254.625 542.685 cv
254.391 542.914 254.204 543.176 254.065 543.469 cv
253.927 543.763 253.847 544.069 253.825 544.389 cv
258.929 544.389 li
cp
260.033 544.741 mo
260.033 544.815 260.033 544.896 260.033 544.981 cv
260.033 545.066 260.028 545.157 260.018 545.253 cv
253.81 545.253 li
253.82 545.627 253.895 545.979 254.033 546.309 cv
254.172 546.64 254.364 546.928 254.609 547.173 cv
254.854 547.419 255.143 547.613 255.473 547.757 cv
255.804 547.901 256.161 547.973 256.545 547.973 cv
257.11 547.973 257.599 547.843 258.009 547.581 cv
258.42 547.319 258.732 547.019 258.945 546.677 cv
259.761 547.317 li
259.313 547.883 258.82 548.288 258.281 548.533 cv
257.743 548.778 257.164 548.901 256.545 548.901 cv
255.991 548.901 255.476 548.802 255.001 548.605 cv
254.526 548.408 254.119 548.133 253.777 547.781 cv
253.436 547.429 253.167 547.013 252.969 546.533 cv
252.772 546.053 252.673 545.53 252.673 544.965 cv
252.673 544.399 252.77 543.877 252.961 543.397 cv
253.153 542.917 253.42 542.501 253.761 542.149 cv
254.103 541.797 254.502 541.522 254.961 541.325 cv
255.42 541.128 255.916 541.029 256.449 541.029 cv
257.036 541.029 257.553 541.128 258.001 541.325 cv
258.449 541.522 258.823 541.789 259.122 542.125 cv
259.42 542.461 259.646 542.853 259.801 543.301 cv
259.956 543.749 260.033 544.229 260.033 544.741 cv
cp
f
264.289 548.709 mo
263.201 548.709 li
263.201 536.613 li
264.289 536.613 li
264.289 548.709 li
cp
f
273.713 544.389 mo
273.681 543.685 273.454 543.101 273.033 542.637 cv
272.611 542.173 272.012 541.941 271.233 541.941 cv
270.87 541.941 270.534 542.008 270.225 542.141 cv
269.916 542.274 269.644 542.456 269.409 542.685 cv
269.174 542.914 268.987 543.176 268.849 543.469 cv
268.71 543.763 268.63 544.069 268.609 544.389 cv
273.713 544.389 li
cp
274.817 544.741 mo
274.817 544.815 274.817 544.896 274.817 544.981 cv
274.817 545.066 274.812 545.157 274.801 545.253 cv
268.593 545.253 li
268.604 545.627 268.678 545.979 268.817 546.309 cv
268.956 546.64 269.147 546.928 269.393 547.173 cv
269.638 547.419 269.926 547.613 270.257 547.757 cv
270.587 547.901 270.945 547.973 271.329 547.973 cv
271.894 547.973 272.382 547.843 272.793 547.581 cv
273.204 547.319 273.516 547.019 273.729 546.677 cv
274.545 547.317 li
274.097 547.883 273.604 548.288 273.065 548.533 cv
272.526 548.778 271.948 548.901 271.329 548.901 cv
270.774 548.901 270.26 548.802 269.785 548.605 cv
269.31 548.408 268.902 548.133 268.561 547.781 cv
268.22 547.429 267.95 547.013 267.753 546.533 cv
267.556 546.053 267.457 545.53 267.457 544.965 cv
267.457 544.399 267.553 543.877 267.745 543.397 cv
267.937 542.917 268.204 542.501 268.545 542.149 cv
268.886 541.797 269.286 541.522 269.745 541.325 cv
270.204 541.128 270.7 541.029 271.233 541.029 cv
271.819 541.029 272.337 541.128 272.785 541.325 cv
273.233 541.522 273.606 541.789 273.905 542.125 cv
274.204 542.461 274.43 542.853 274.585 543.301 cv
274.74 543.749 274.817 544.229 274.817 544.741 cv
cp
f
280.009 541.437 mo
280.451 541.165 280.945 541.029 281.489 541.029 cv
281.691 541.029 281.902 541.051 282.121 541.093 cv
282.339 541.136 282.553 541.219 282.761 541.341 cv
282.969 541.464 283.161 541.627 283.337 541.829 cv
283.513 542.031 283.665 542.293 283.792 542.613 cv
284.049 542.101 284.398 541.709 284.841 541.437 cv
285.283 541.165 285.809 541.029 286.417 541.029 cv
287.366 541.029 288.078 541.312 288.553 541.877 cv
289.027 542.442 289.265 543.189 289.265 544.117 cv
289.265 548.709 li
288.177 548.709 li
288.177 544.565 li
288.177 543.775 288.03 543.141 287.737 542.661 cv
287.443 542.181 286.944 541.941 286.241 541.941 cv
285.846 541.941 285.513 542.021 285.241 542.181 cv
284.969 542.341 284.75 542.552 284.584 542.813 cv
284.419 543.074 284.299 543.37 284.225 543.701 cv
284.15 544.031 284.113 544.373 284.113 544.725 cv
284.113 548.709 li
283.025 548.709 li
283.025 544.341 li
283.025 543.979 282.998 543.647 282.945 543.349 cv
282.891 543.051 282.798 542.797 282.665 542.589 cv
282.531 542.381 282.347 542.221 282.113 542.109 cv
281.878 541.997 281.579 541.941 281.217 541.941 cv
280.961 541.941 280.702 542 280.441 542.117 cv
280.179 542.234 279.945 542.413 279.737 542.653 cv
279.529 542.893 279.361 543.197 279.233 543.565 cv
279.104 543.933 279.041 544.368 279.041 544.869 cv
279.041 548.709 li
277.953 548.709 li
277.953 542.869 li
277.953 542.666 277.947 542.405 277.937 542.085 cv
277.926 541.765 277.91 541.477 277.889 541.221 cv
278.929 541.221 li
278.95 541.424 278.966 541.647 278.977 541.893 cv
278.987 542.139 278.993 542.341 278.993 542.501 cv
279.025 542.501 li
279.238 542.063 279.566 541.709 280.009 541.437 cv
cp
f
298.593 544.389 mo
298.562 543.685 298.334 543.101 297.913 542.637 cv
297.491 542.173 296.892 541.941 296.112 541.941 cv
295.75 541.941 295.414 542.008 295.104 542.141 cv
294.796 542.274 294.523 542.456 294.289 542.685 cv
294.054 542.914 293.867 543.176 293.729 543.469 cv
293.591 543.763 293.511 544.069 293.489 544.389 cv
298.593 544.389 li
cp
299.696 544.741 mo
299.696 544.815 299.696 544.896 299.696 544.981 cv
299.696 545.066 299.691 545.157 299.681 545.253 cv
293.474 545.253 li
293.483 545.627 293.558 545.979 293.696 546.309 cv
293.835 546.64 294.027 546.928 294.272 547.173 cv
294.519 547.419 294.806 547.613 295.137 547.757 cv
295.468 547.901 295.825 547.973 296.209 547.973 cv
296.774 547.973 297.263 547.843 297.673 547.581 cv
298.083 547.319 298.396 547.019 298.608 546.677 cv
299.425 547.317 li
298.978 547.883 298.483 548.288 297.944 548.533 cv
297.406 548.778 296.827 548.901 296.209 548.901 cv
295.654 548.901 295.14 548.802 294.665 548.605 cv
294.19 548.408 293.782 548.133 293.44 547.781 cv
293.1 547.429 292.83 547.013 292.633 546.533 cv
292.436 546.053 292.337 545.53 292.337 544.965 cv
292.337 544.399 292.433 543.877 292.625 543.397 cv
292.817 542.917 293.083 542.501 293.425 542.149 cv
293.767 541.797 294.166 541.522 294.625 541.325 cv
295.083 541.128 295.579 541.029 296.112 541.029 cv
296.699 541.029 297.217 541.128 297.665 541.325 cv
298.112 541.522 298.486 541.789 298.785 542.125 cv
299.083 542.461 299.31 542.853 299.465 543.301 cv
299.62 543.749 299.696 544.229 299.696 544.741 cv
cp
f
303.809 541.221 mo
303.829 541.424 303.846 541.647 303.856 541.893 cv
303.867 542.139 303.872 542.341 303.872 542.501 cv
303.905 542.501 li
304.118 542.063 304.464 541.709 304.944 541.437 cv
305.425 541.165 305.931 541.029 306.464 541.029 cv
307.414 541.029 308.126 541.312 308.601 541.877 cv
309.075 542.442 309.313 543.189 309.313 544.117 cv
309.313 548.709 li
308.225 548.709 li
308.225 544.565 li
308.225 544.171 308.192 543.813 308.128 543.493 cv
308.064 543.173 307.955 542.898 307.801 542.669 cv
307.646 542.439 307.438 542.261 307.177 542.133 cv
306.915 542.005 306.587 541.941 306.192 541.941 cv
305.905 541.941 305.624 542 305.353 542.117 cv
305.081 542.234 304.838 542.413 304.624 542.653 cv
304.411 542.893 304.241 543.197 304.112 543.565 cv
303.984 543.933 303.921 544.368 303.921 544.869 cv
303.921 548.709 li
302.833 548.709 li
302.833 542.869 li
302.833 542.666 302.827 542.405 302.816 542.085 cv
302.806 541.765 302.79 541.477 302.769 541.221 cv
303.809 541.221 li
cp
f
316.304 542.133 mo
314.192 542.133 li
314.192 546.501 li
314.192 546.778 314.219 547.008 314.272 547.189 cv
314.325 547.37 314.403 547.512 314.505 547.613 cv
314.605 547.715 314.726 547.784 314.864 547.821 cv
315.003 547.858 315.152 547.877 315.313 547.877 cv
315.462 547.877 315.618 547.855 315.784 547.813 cv
315.95 547.771 316.106 547.712 316.257 547.637 cv
316.304 548.581 li
316.112 548.655 315.912 548.712 315.704 548.749 cv
315.496 548.786 315.27 548.805 315.024 548.805 cv
314.821 548.805 314.608 548.778 314.384 548.725 cv
314.16 548.672 313.952 548.57 313.761 548.421 cv
313.568 548.271 313.411 548.069 313.288 547.813 cv
313.165 547.557 313.104 547.221 313.104 546.805 cv
313.104 542.133 li
311.552 542.133 li
311.552 541.221 li
313.104 541.221 li
313.104 539.109 li
314.192 539.109 li
314.192 541.221 li
316.304 541.221 li
316.304 542.133 li
cp
f
322.784 542.997 mo
322.624 542.688 322.382 542.435 322.056 542.237 cv
321.731 542.04 321.36 541.941 320.944 541.941 cv
320.753 541.941 320.561 541.963 320.368 542.005 cv
320.177 542.048 320.005 542.117 319.856 542.213 cv
319.707 542.309 319.587 542.432 319.497 542.581 cv
319.405 542.73 319.36 542.906 319.36 543.109 cv
319.36 543.461 319.505 543.73 319.792 543.917 cv
320.081 544.104 320.534 544.261 321.152 544.389 cv
322.038 544.57 322.69 544.835 323.112 545.181 cv
323.534 545.527 323.744 545.994 323.744 546.581 cv
323.744 547.008 323.661 547.368 323.497 547.661 cv
323.331 547.954 323.114 548.194 322.849 548.381 cv
322.581 548.567 322.28 548.701 321.944 548.781 cv
321.608 548.861 321.27 548.901 320.929 548.901 cv
320.362 548.901 319.813 548.783 319.28 548.549 cv
318.747 548.314 318.31 547.946 317.968 547.445 cv
318.833 546.805 li
319.024 547.136 319.307 547.413 319.681 547.637 cv
320.054 547.861 320.464 547.973 320.912 547.973 cv
321.147 547.973 321.371 547.952 321.585 547.909 cv
321.798 547.866 321.984 547.792 322.145 547.685 cv
322.304 547.578 322.433 547.442 322.528 547.277 cv
322.624 547.111 322.673 546.906 322.673 546.661 cv
322.673 546.267 322.483 545.971 322.104 545.773 cv
321.726 545.576 321.179 545.392 320.464 545.221 cv
320.24 545.168 320.003 545.101 319.753 545.021 cv
319.501 544.941 319.27 544.824 319.056 544.669 cv
318.843 544.515 318.667 544.319 318.528 544.085 cv
318.39 543.851 318.32 543.557 318.32 543.205 cv
318.32 542.821 318.396 542.493 318.544 542.221 cv
318.693 541.949 318.894 541.725 319.145 541.549 cv
319.396 541.373 319.681 541.242 320.001 541.157 cv
320.32 541.071 320.651 541.029 320.992 541.029 cv
321.515 541.029 322.021 541.146 322.513 541.381 cv
323.003 541.616 323.371 541.946 323.616 542.373 cv
322.784 542.997 li
cp
f
298.057 353.585 mo
299.602 353.274 304.596 353.047 305.773 353.047 cv
304.596 353.047 299.602 352.851 298.057 352.542 cv
298.627 351.001 303.252 345.597 304.537 344.312 cv
303.252 345.597 297.902 350.274 296.361 350.847 cv
296.052 349.301 295.802 344.253 295.802 343.075 cv
295.802 344.253 295.628 349.301 295.318 350.847 cv
293.777 350.274 288.351 345.597 287.066 344.312 cv
288.351 345.596 293.052 350.999 293.623 352.541 cv
292.077 352.851 287.009 353.046 285.83 353.047 cv
287.009 353.046 292.077 353.274 293.623 353.584 cv
293.052 355.126 288.351 360.497 287.066 361.782 cv
288.351 360.497 293.777 355.851 295.319 355.279 cv
295.628 356.824 295.802 361.84 295.802 363.019 cv
295.802 361.84 296.052 356.825 296.361 355.279 cv
297.902 355.851 303.253 360.498 304.537 361.782 cv
303.253 360.498 298.627 355.126 298.057 353.585 cv
cp
f
328.213 337.714 mo
327.795 337.296 324.21 334.247 323.615 334.247 cv
323.021 334.247 319.436 337.296 319.018 337.714 cv
319.436 337.296 322.484 333.712 322.484 333.116 cv
322.484 332.521 319.436 328.937 319.018 328.519 cv
319.436 328.937 323.021 331.986 323.615 331.986 cv
324.21 331.986 327.795 328.937 328.213 328.519 cv
327.795 328.937 324.746 332.521 324.746 333.116 cv
324.746 333.712 327.795 337.296 328.213 337.714 cv
cp
f
337.213 358.713 mo
336.795 358.295 333.21 355.246 332.615 355.246 cv
332.021 355.246 328.436 358.295 328.018 358.713 cv
328.436 358.295 331.484 354.711 331.484 354.115 cv
331.484 353.521 328.436 349.936 328.018 349.518 cv
328.436 349.936 332.021 352.985 332.615 352.985 cv
333.21 352.985 336.795 349.936 337.213 349.518 cv
336.795 349.936 333.746 353.521 333.746 354.115 cv
333.746 354.711 336.795 358.295 337.213 358.713 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.0%%For: (\622\667\622J\620\754 \615\601\625c) ()%%Title: (star18-21.eps)%%CreationDate: 4/3/18 11:01 AM%AI9_DataStream%Gb",K$We"b'(5]#q%*"HU-bC7GloN>+c$=k_=n%!&g3>Bk2ALq]@QrJ\%\l6A0qs\gd`[,XE/P1?b1$a];hp4WiLI^(,f@0Au4'@%hIuk#-#KZhklb_@$dtX;;@<knCG2`ZTctAl1G+j7pqH4]_J[@P4e$3I>NK1dg?e79>NKUtPAA]QmES<bpS653n!&jsQW!Zc[9deM%PMW7)b,;4mm'^t3W7@r&<kD5oVVR13bW=[^Y<#X<WoJ#K\!uK*Y>X2Qb14XXK7<7H#Od3ChQ(h3e5Uag8WCjZ]R(Q6#bh*EM]Y-o%L@rqOD>a88+)g[h*.^g:o3)^CPCJkjkmgS9DS+?4^$8b"?0^!E9mX1n?_edmq<ChV=78c)dt:QjBD5/i.,7H[56K9k8oEA0/Mm&!%FA)Qr&H6V$`;^(]P(2G/Q+#+!5A#*uO%1Voh)3Wh6bb*VhE6Sm+rZ=.hQJi_lD8B`\ZZ'!j.pO'A1[46r`,:4<cZl)5@`)[V3RSX%Cs/\'>8c&`]X2Ug5^Y"F&=DbW>4nL&P*0jffkkk,A:Sl>AW`*k]=V/A0+!7E3#Ug<DVDQoP/4r#hd?*Beb6%UXXhWAD?iL9VcB_I%WTeg\KmF%,&fik/PQL`Yp2RK5@c+3[^n6n!Ds3gbobtftO"03naTJ-,<L`lffA,e*gS]&\9Jc'?(,aG`en&+<p!T^G]4pPV>.MM&%[-'i%XJpgf.#!`O0EHAhVOt>5a0k&eDP;9YeZMmVEpfp60-Au+N$%jK#lg+>;THE*C/YY(W=Er1"$21!g"E,JDDj#U<Wa>8H*skR%V+8uKWje#M\,P:_$WZYd8b;cT_6XoB-MA%re2.*C5M3+4kbkP+X*;#.4DL].Z^'*M28.lOUQ<mM&&2/g1aa&'.a1-Rpo%m*.Ek$Q%o(MugnF7PALKks#Wh%tVn<&'/$pZnfdI)-Pdeg.ISVYHb7+m"];(:\CT[hL%1\'pLI!gu!cgd,26s8<\Mee[VN@*;h64Ma&F\bPj%=.>IMUkJonG5,nOHSS1i#!_8HKLSn0W-'qSc0%f8k,?*QX>>6ONq?Pss89qV<jkfcpm2HYCj1EZmDY&,qo!cT-Ymh,<3Oo6gSM6?%>5>gS5LJOk^KKM?]D1%R\"3>=FFRICrb*:[lEsA3eu.+sRK(#F2;PLa5Q7.-e(WKPq8bc5EW2s[dZ&">lp[]m;b+6-Kf&[5YL]iL%4$kIc)6E2shFZr_Us&B+D>sq.Z'!)A#Pe(n"d#f`ZEa_k(_#G*Pjj0EO.?1lI@j1E-D7(s>)')-nHQa%TF:(^AuV>54P'/cHLW47%<6(31Ij.ehVE+rm&4K<bjlMD;+k)OFp0M["a$Z:YFhdrhH6m_6m8!0h=f_<R?Rs%j/@Bt4oYYEinNW"ZPC?]4Q(hPGlufA9&20mJ%BA;h%:l4a7X^5^CS+p9cmr(.sKAZ1Gr;k;MU@I)(&4Tf[s&G(.s1/\ugf&T:Z?./?GLH6[kfIAV`JApqeU'Wb<]R'KZddnGe3oO(%R\2Ug1.(#Jh<@u2jNt-W2no=^dZ]X.3NY1mB_Ak^+'#dB]hYJ+C2VOJmBMXWqCQRB\M3a1pIULD=(d$VG^niA);jcUm.jjuO(fF=%A&[K(>!"q4NYdYYgsT0qih'DNHSW;K]%A+n_ZW-tchQ)kB0'8r@slIL>XHV<*".Z-grFS+VEBVsa*/t5plBVo(.S"FqehdG2@&AO%\INe0mDE8Dg+6=GG$jNn)h=%@+7;Y*[F_O'bNJ,qkd$4XfHHVI=C['b]FN%#cIi+9Q9*P_]DAX"4Ie[3$l/g&I8XQ:eEf&aQb0*_%POKr'p5aD$;eKobg=8s%5(T+5QFeusEIXK&Lt[j;U:k=)=lt@.[Ebf>;R\O?,)qhW:/S#Kc^R&Eo`p3MGl.5=]lprt-'@'k3\j8k%/o`L_.($n.dCBWBGG4.OeD,cSWL!Rd0%AbrLd,X@a9Jb2CXkIe-Yc%^0&)4$n(>sR%lJg)c$cP$%lO*T7]emr+):42c%lo'2cu2'%3Q`3"Ao@UEJb\bddJn&NqGO\'[XNBtqLuNI%sR%&r*Aq4Zqc'*2dff9`cu:.1-ko8EZ#IJ$(=&/]2?*I+(HMBTA#.V3]cP*]+FUX%[5+-_R[ImfSGW#p9]4T,'`S=YVqs,aWO@kg(rI6>_,ni>q&'tG^';e%UOTm-@pOr9-%#>EQ^1?YB"+*RCAWC2BrXK%j.583(`IAV%Tn0370]o'[.@:tOm"P]kB_jhJ0I8@5bY7&BB]/@L9;dISo?b9kBYZ_en1UWc1")(:Tel=]P3eQ,dCGV<)n`fn5+_F#OU)U-_eTn[%5)\3'\g?.72Ho"adfhJ'f-fR$r=[c<3NLc#j82Y*e]U%<B\c5$5Mh`HC1GV]r^3;t_oMFaW;%\"I87SP;RtRuoPb8s"<EAarStS*%=3kh?j7j*a.^a0]g^+b`:;>j3mgO+!3N=s_c_HB/.;.1/2a;iu+"_dFLFU<iT?8FMW*Dsd9D*d,5K<GJI)0^"4djbI"ois^o_;`4%<f\W5fQFG`01or"<>fN"Thcn-s/j`,o^=94ZlIg\rbDQs.4f[75"V_VCJ:IEVoL+]h05pDj41mnB_V+LY%d7AYB0s1dIsVb:uGt2%<`=?S@($1-jm[f9oA4aBB*L`m5BH1"=seEl?0e(=Wndtn_b<bnn^4(0CO?@`k0MfCj-tL(;K9).p2i4k4N9dYDGI+F9X"em?J_Zd%8WD2u?-7V20pmeDD7iR@?#/0\K\_-<Mt7t6q2XTb7ruD>q3*n/IqL+o<S5^;IV*<,h`]lESF:.:G;Mg3B"k$cDC=R.RXb3p-<kiL%do=?PA<u,#(N[<K3T%fGmpc:Tq)l!qR'XJ?<iI)[od71\EpDi'U`GkN)GJtYJaR!MeKfL?3<:oK(&iHUIdgRHa7cTp,P1R)EZ$Mh%*oF6]nl*U\R0\0#Mbi7o`<uWj)f`N!dVBqe^GoY?ihbhsUj4rahtL[`]eGKrc!sA\\hdDAVW>s29(SFu0/VrpO5&3"F-YOQl7,Mp%g2Up$H`^;OG$!GKb%dt_C7`%/3tF7Jrorj3O7\_:>ANjX\IGQGn;iKr42)N]3dmDI@MUD=Bi0n<NIA(k7$ic/V?Ddhpk;.R?-SI5%cZZOhF&jlVH.MsX$-IaFPA7bbW;AZ%`$/@E&e(UnqmH6l1G[p=VI+roQXHGX(\sN]36XL.0ooVa@i+ah`B8;uO'Tt>(\?:u"HrqM%$Ai'P5R)utk-9iDZ"1".m%Sr[Ma%=@dIY`.mqBV1Fp)G3p2[R$ld,J8a.EYbrM:+29@>Wf,Q!flaX9&15!Q@QlRfU99qTu]q\+qb%Zl[nm3;%9;(UN"Al15uUq7F88g:8.(o<iDKQMhl,3a^&_UZp7=QHepl1I('Q9^R-anNnr&9A06sR9@4HAo\C,YFM#Z!LNHJftVQ>%U,Q#rhllh\qQR%JkejdA?ZVC=:[.a6oi43Ul$qo$I+1YZ0(9bOElu/g,phU/EBcZ75F#rl1Lg[8kX"h1'4Yca:,tVhk:`b2*N^Er%eF;`shuEYOPa@gF](41h,cQ'[mZ34qQ)3,\>5V@c&S8NlLG5mp)2u\`QH[hrN;71A^,+ph`crh+X!_X#PI,d2I8TR1-Y`O/a1)&_%QY6Qh[VGD5^3M3cPtC),q)#g2$K!u5@@m08%@a7YbgRV^dg@e:MqC.GmjbMPZf>3f7*+sljZQ;\q#?)uV\p?MH.L+0AXsZ>,3rd&%?;,XqamA/[b\kGBeUKB@o&r:?M)76gin+M!3J:HqAZ"3t+85!MjodW18=a`&&5rMfQceZ;CYeQ,ROl$1MIQIjqBYeg`!ZNi%?`Hc%n+n#i3n6R/qQ37MS3W\T('!<Bo#GpPfkW]'G>$g@iD6iI+7BQ6cIHq-p;\V6Blk3SRh8R6a-gU19YKog1I7)4q_WMhk3g^RI;8`R%maHDRod[OK8*prBTClj!g'!`jbT3WHmQccX*hP1eBmb]urmTYPReom%s(Umcc*%*->RCFEP$Uhms0QUfXp6g]gZLcMAbf0j8'<[[%^ZV^i=5/#3P/jtC5)X:W?LrY(WIBaS2*YtBKh\0]2ubH[IR!S4?*-f_a\BG]C0br:I"p.tbT30;Wjc.HI:iJ_?7MSMV?L_*Q--N&%O-N9\K2[5XI^4/b:&Q'"X;b)&71'U0)4D^M-1^d`QAm='!)>Kkk%jaalVluB<,);p],Fjf(=/l'[TP]V"oD4_%jla(^pLh?CA\Z>%h8RL>]1Gusj.2Y*6E&Ra2t)FkA\u&s@YOi,BBD/Io\!u=+,a9I45[4Mg&L%)]CXYGrK]A2@PEF9qTQC%om>Qu2g#Mcr)18fIU1s0%HrnhqRTh=Ed:/L_/9?GTIL0F\*p.aKJ'nJs9C9fG_"Y%GN,\b[iVEA(J+]a9lXbb@pBaX=E]1[kE5%WDMH6:OAXCg:BjJnor*nLX%qh4-*fsEACZP,e+=%R_%$KEG;E.5RiXGm/ICVU@`IXY/9Qn>=2]r:!!?M$4nQLE&Q<,s9k`&m[EOr:X%B(FB87YsZq5L;UE9)'ce%Bkf#KR5X^;7fCk-`cdIDRQuR\jo0Kp\#=')JkV.ASG7IQA*9SC1lX<k8mZ`rj3-G#5-8ouo4(6C%To=]RfetsS+'@'Fhho&c2?O,%4T?)8%khW`ceK-1X-04M08+(t2ZkBc"fHO0,BaQ?lsHaX6YCC[gWW?Q-pC9.m8&Si9MCQ<Vpo<jL<QSfHUTdZgS8Mq:hsE5#[pn]%fe"4>^rNDago9r@\3,!,on62E=Q.H8I](dK^RQILE!7L9j/%b-<L'D_\Ld\V=Yd1`>2$Kf'ErY/E%lIM?#"PC-Fa_;H=ZlP6k=`)%R=&`O#<uc%::2Au/@dTAFrifn]\j3uCq]gLHPA[nORp,t?^6uP4!$T_0-667',^3.nb=bc,BgJC^A-!@oeE%hm8Be3S%tO(b>#YN%2=:7FeNQ'/eQ^)SGCo!=C(_QKc?7WQl_s=^SEm,aNg_[CA_L5F"`BO:5]#.]i9$!e_R.%lD%\"\^VB0^G:n7J[UkiuYCjUi8h6]8%X-Y0Crbs4.&2Q+.Wl/]j+u>h0Gm3%B0u<'LqjSdYap=LfUq&hg[hE1Re^3d+/Y0I*bgk)/1#-F9,fgDW]cKrFerXU;ZK(g9olG<=%NiL=l`jiN7Q[:ZG0nCK)@s;FA5;k5P=(=puYblT[p`67WVQUM/^L5:H/KWsHeh9)W&_4%NoNJOl,\MGp&SG;99TYSqom5e&-3sM.%[\%b?,dJYZ4"3%VebWU[?7eqe.8&1do@jo<2iE-r>KIeM[S#UrS[3XA>]!H0h4<!I$nW2qiPMKak52ONgVIGrl,93+m*DqbSGKjh%%`cV]VLNG#hhS2?BkR$hWX2ur3(rH1-P<.g<Eb1<K*9XfOiR4T.cs/>[B%jXNfPG,e]p>U&l3YL?NTQY[:Zg'riNEc]9[YE'--b&%Pl0QiR6YBoHIRH41N**"D@I>qKSXPf]VLh8j^+^+_;9FD6]n[(]Jo4-S+u#*<2nBY[I9<$VdK#@n)08Y!:<fs!Y)rAVD(QsD,&rk%ZnA-<k?7#2%G1t>Oc_t[5&$bj:[,pp*mgqD/[Zs1rh\PFGJ(riiim_kM$^&;?'73TC=X;e.*pdmVK#(D5$I[CBb6WXo^W_fK:&;B%;]c%-Va8PU+F\#C`;CW!e!p[uM9;:@-0#=X6;5a]WF%Dm1(e!.PrIf]&<fZ1oHloK[,/=pM%C?m@@d`Z:P>)_6<oX@Le6b+[-HC#%fah.6&YaXV&g8Uc_pmGJo0eDajX3Ag,"U1_[)uGm&Rp>U9`7BY<P&gKPK,Baf-[(HQc-:7HqjD^Bg_K3s7PFO.o5KW^p*jQ#$fTo%BE-gF\QR$+dtdduD!NafK(^\M@kp?+Dq]+aRG[Hmf2H2OeDGN\m8_S5o6Y06HKrZ;WP@@0:?/*\=S/f)rE$#WH.(9R_!C)/D9[.1%0(."IBC"H`I@dc&X#djuD7%SO]/2_opudk>-d][#"+pI]bmt*ZU<_8WQ0M5KH2_UVU8n-m>3b5t3OBPN3gKEa<$-EC1?5S/T-&FX%/Zo&4`uZl[J8r\d#%o]Xr+`q=GL@9^9Q+hE,an1$*_$!p=6!V5&9/l*D&NYKbt:3f#fm$en>t0q,naLXZFhaX##7TWIn2^aqc=L6%q'Fe`mWF$/X.@c=Vp3dW:&[J<=j3$DR8tBI!G3mM[T@77eZ3*b,Q4-ea\3Wk`W)L+,bl(RHi&H04J>!R'(euR:@FuCHns+b6JoN<%Ec3J-qn".h&Ih#jSf2O`LQATH*T<cOO2q%jkaE:d4oTP3]>C(>[-;-O9Q>JAE=:$4>0,_n"$IL/YsZ91W`Qgg.Q:i2O=B4>dQ?`S%NITjDj"5I+!h3HW[312Os!ir<:6"V9r[/>Xh/[%j(@f:lFZh@B@nMkmAlu.4MjaA7&0K5o=N5;N&3TeB&>H]?:3u)SB;FEJ#`SE)%#6pOLh<5AQ3&WuGW5Vr<4'"6PN8e%@At%*%jIc-p1_*`4OSM,'.2rN<+g*ngDik]5D0GNIDCMu4E'O7q,)^A:e\5uf*TVW<_u6NI%Ub12kn)d,Ofnb"Tk>Od\:h.^kT@dJXgH/%EaB.\.S(2\.QY`C22][4=oVB<LP'lW,$Ccp-.f8t(p]^<9;<nSp(G1(mm'iFSKC>X[%B6DuZ87d@5$[;;KdYWCAdF"@-YX$1mXn$1K>S)s#&XN>`K)'?^F]d\KZE^*3.S@QD;f%%F&@WuiqA6F:IiO<'%%Ds'M>CR0*KK$4%5nh7YFd=BNb4gaj3f77L7&,+j?DlOm>coFNI<)jG.Db;eC._E@;K;X%o3uY)r?$Np.9BrDG)lQiimmgeVa74e/'kdZG$Hs>.,R\T%Ip"ARcgU0f02L_2$soPg$iQOTFirKqrX4uEZWF$H(nPH$ldWG.J+EM1mu.ojI"+8:`[,><"+FL$DpnA=>-/1DES0Q>78U',Fe?-Y%j"KBOL*Z(Y_<T?]:Els3l#u=75:od"h1S8*>H3cBoY7gZp`J71US;61P=ScNnC!-W@_(IA4=aF=T4imUhC*MALBPA5f'3a1.b/<<%0J12h?)sLG10R1`UthuZqi/a9VmF'S/,cd'kuQQHs&OnGB"*Eb=m<$A:3UHc/ZqnE%X<dBV0;U;<GGU`AK6J#O>+q$f_9Kie&(6n%RZ'.J7.k(\H_pJ0[o;[aoUEeF9Y[Z,`STPCkE%oFP+1:mFjnCu<pr_>g2Z,uHegJ-E%uVQl!:c(C3IlpD<+J(h-,NP+ri#_E@g;.%O[ttkcebHdO5&2]0ZTJrLS4i@fucOoUl%!:CsbcU`g6!N^l1""@rUi(eb"=`5MbsDV:I4=f'9[2O$;/Pa^cNt=DAoO9#oKSDX/ia%?,CW?.GVUOrGef0A;Fj*]q+W]YG5'<^LXTL0%CQ0LmF#9fS;P>VeXnAN.I!G@[=dmQ-cLPZ22.;:QC'i53bWacb^9.IBU**&2!9S%>bPE+S^B./j80>ro.bB;9F[//,V5cRh0/*@>ap[,KtG8G.Hq9e/QT1%1M$;Ch[#E0/CdD+h'sX='<9i&=/qN2T@3J+[CWW8j-+V,%G7Tn!>I!((Kc(U7/i#7iMqL_gOJF+.8:OTnoc5+rQ&3Seoc>31pc-QHD&p(1\h\$JaK\?%BcX(Cb>46KEHG/[RM95`[_;9e1KJ8;%KCOT0*P=V@,48B61GklDFJJ&g1L0:*V?SKDj(`tOL5U1LCM/F@WREpF5."%9g[8%g]'*V=1Dp!S1fW5SUK2[p'-d@:rXZ9sr^JL+%H$1jM^$Rn,l?riJ<X\VrkI3Y1>C5u"p1ijZdM(rtoAtu)p/^3ajg]U'8`ACOipC!QPj-tF?Tm7fDlg%Tg3U8=5?]Lb]Y1Z.mZkK&%VV:PV9\[9i(nLTVr:,qiF+*_&k3i*"dTL4ro2OOA/Zc,kYI287:V%LcO'`UQfBhd/Y4gd^3M4FK5#+5?=F!E_oC@Th(%;*%2uiR"%LAcRH.GJMN45'#7m`E.tmYtNrDr5rKn[3iC9kki$A3;jl8aN;j*-n_pI/')bcXgFTs3PGiPu$^]VhIq4/"KAo?@HU^='47X*2OEq%YR4_IT(heGTAFf3p%A19Q(s>&DXPGiDoROlbH60F/:Lf1HZ].Ed%Me1EhACW\*1#"ht#Nem;!Zarn!Xm^#^2-BuA\'V3b?k^+S7m%DjHq1Mn'Mu@!+'5@,8E'nSII5^%L1J=+sneGPC(^-T=e$bN7/$ri4f/4=ZrDP>1(da_TLGIT`XuIT"jt00HhZgqNNfQS%X]qM+_$%=^QSt@\jjqe^pGEZd&(.`k;U=X7s<I`s4KJ]AGWSZL.4kH1,jolr,IuT6+DgY^*^YhAaY:XOM:b9>k1YkJ?0K;K\c&m5CaFmtqM=%\a?dDD`3p`VaGjbrnuXXkiH!?n#a:+Hrs7$2a/tLLWp"fcpRQq%C"oGqo4'3`&Kp835+?)CXIN8.2q?H)a!lmV6sN]C\Q\pnIud(%HtFj5,dh#"?Ji3ems>QQC\k6B2k*U>G]%6eM\&hUe2E0O>N=SXLRUpds606/VXrrdg1oa8Zd6k;IY3L6o*n2SKaMZZkr7PLTE437%K9muc[2F%gD<)4PW:SQb,MRY8IP#4,o3^tJO7#72[TP*9^:E2D^3['X3.LEO]73`HAp80ZGI%+g,49*W:[`0tS]^iS[pL3LqElN+%)\^]HVZUCW4k"j"1@/9sJ$c[fiUJ2!V*"DmhH51N*!56O_WHDpn+DG6p.8]+h*-*qYO&oI`#S?=>2(@ch-IV$d0`&J%qWE6d;]];%8Jhh5WJ/lL%sj.fI,3R3SiA7mZ";F<c9q?1[D'60]q4&0dd8?9EeopAE=Wre[XAV;53]=jR9FcYS9ci@C16Y`fq$oTqss^JTs8c"%?Z!9=N9]h`eUBkr3;S8)gr^[#0j35]QG4+f;kI[mgL%XWb^Eou^\=l#2#I4B`_I\$oY`]4Vh^O(Y0qR8b&[[r[PmF=K/WndDR]E!%rPmmr)\7\WOBS;X<1i?_:)Br&W#'6r0U?^cntq[gm;TTkrO(/23kKhX"SYsaB1!oL]%q'@j_C?T$Z3HP@9;9qZ2JpoX4?LXXTm&2%QZjQY480dYH2f.;kj_0k@i#$S:qXEj4fC3CHXEB*n(/U3(50KNmDj*fJ#@G%rd'(+<7phM]M0uZh(prRp4q[EF/eh+'lLQ4Di*Yj%@'b7Wm8iu^Sfm]h.-=_UDAPl-5.I/3=[0M;/bc"3R+1#1gO"3d2j8[dDQfI3LoBh4pOi-en(.)8n_:bq>;GX'arb25Iu^W30+3Jd%44d6;)l.PE<LQh2iR"csqtU+H[aIQYhk`b`X0oLF?[b88pu2`Wm'eqB4ac0kr+gIoBt]q8eQu5%[;.1rT7?_0nT&&Te%*B2U+aQ2%Ro4W`B743`rkum.=!&XXZ[UfHCTkK:]^P5OhK`O@f9Qg4?;^+Lj+Y'co5i44aq_8FiTF8]k0d`,O\n8HH%`A(e=cU=Pbu6)m[:ZX%k\Sj1=tCH6o$-2Xf.X;@d_B[fX/Pft?ZD-`i;jJZlP^SUYE,>G++`:/Q$r7;heat6PZ%s_]argMbcT3`GHG(bmULW\W@ukh[oC(>%5BU2r/'!UBi`"J/I.5E4H[#'dfQ5oA&@':3GM\7c%jrcQlEj:N,S;Gt7Ljk"H$l^X4MQC0mN(Ji)s3]hgq97$Sc79CX"T1'VKJqF%Vn'#%+)YtVB]B;3YOPORB0!`MFS\d9k9&3iqm/D6IE#g.#9^GA3KINKd,<4er9*9:maVdg[0PE4ppuBt^.+Yh4Hq7C^_f8l?t=?D%bMD$+pVJ[MS2ZZOW4RWD&biupo"f*h<(:j,V<9ZNhc$`9DZea5pV,<lik`)_W;XkQk?bnDE(F^T.AjDrXmt1^09=5d#e@?]/hc#8%[Vid([`]-,h#D=LcOI^X4@2DUGhtf/q8MnG9n9F5ef-o`R=0@&r03N/Ve8@1Nn2AOf2%liFjiJ/>1bkY^,_*h7(;ns/?BQr])-^'%=,l$OpGQBnI2o8=jdQj)*7:e(<p&tteA@k()ci^48VPuYR'pTl#2dl=pGOUoG<VO4NI%YoMhS6THLhHt;8X=7*h-8\l\XS;/h\6u%q59:fg!Q^6*)s6tRsV?EHen)/k.TdQ`V?Y0_KrG*()ga;mgP.V-I;D<rjV7cgr=5]F_\i!L+ISN@e$$ZPdRu(Ie>J^I=1T@s.k);%b:!G1([(=dmHi:\0Ac#\]imDOl9)8Yp!Qub2b<=abk,bUbf.$B.*DuCQF+=jbk#.hW]nZL^$+h=YO-c]ZX`T2:@&]g?2nlK0f`c:%lDGndaao,>CZ;&#bs!fA^V2_Le\8Wh=-"7-a(-:I2/,`*Idt(;Pnk:I4BPst)6d3BPZgTjqt67XC11M>rBAC5,8T!FTk3BCmJBfm%o>f$u*m"Lj=:`0n6MLD$mc<6:h#5sE#:l6EnSsH>Ei12VR6kXsi(CqBD>,aq5<[N-!U$L3'!I!FdZF'ZZ<Ii.c7o>t$R2geO6`tS%p/BamMDR.LXZk!,LFW&>7sl07\))C#jN_Qk6Z(L<"0t8c`O.cLfm"aB05fp+&,l&CJ+W$_(+h:q]Xh%pPSqQ.51Z\u'\DNU>GpZ/%/$JI<e(kssc"<%5U)&?8ceMl3\p==.n!/f,2I>aQ;d\B=SnSG/pMM/Oin<2S6N0_+r*^`7X]pO(g,n(IMGFc/#!U&BB@HIk;"%1u%jA%mF>IjKIleinMXA9_n@-6^nl-;FINHU?eF*7_YlK=.*p#+Q^LV>!EXAg*\"&&JHN&LJbkPL1Pm`D2eLRoM]h6Y=`H]ML"^4d*M%pXWE<^:R/&pW9g&mH<09Xia`)bCd6,Is!=[E8\QA:K<8K,]lQIe"`+%O-q!#+Jh\+q-5*Vqjkua1\5R6p!rG',flXKqXrC6hX9"^%ri=I/HGE//."#:/W&9X&qq>0m5jD#""Us[Mf$SaUA+n+=B5a$e`NtmnnSnJ2K/IVtr/Jp,j^rGm&+/Z=f\*;EP$/.Sn*u1MS_a-W%+n*'FpE%'GF>ld2!\Z"N^Z&YpdTX1Y4?*X;oLU^.H!+9V?[;A<[(f#r]@RG8S.;Z_n1C8\CXr"Mhla,;j*A7_s.oMe$c]NJ)n2)^%TJbr&#7c%=[*Yk5`q+s\bj]jhD`mJkmqJ_-FuJgFFcR^sej/XG9('qChu*/42rAAN7un1Af2pfE(*]Prlp?%`_'-#7CJ4-Oa%SS#%G)L6^NCEDZ\n0mYqpg)em!4`<$26p:^&^phTC2/Q+$AD,>qbWp6MK[jU'aB];uUGpImhT=:+tq7B0U3uGO'I-bU":_3F4ZkKc44j%3qo8[cL)M#0b&csTuL#peeZllb<[enqslqQPq08grXn\uc/#=D,KnJeq]mo8]4@R^HrW..4h3fT;"a<^K:%%6D>i4aEcpjRGh("6%LM+XFoC;.Crjkm!p@iKS>:qJ8JiinZi!8kX\?,r\qPu-8r+pYRhCss\?;BCi%p,@;>@0N$bY`bEQLt(kXh2^S7uOHJ.YloE7G]]\%NSsbPEdunDntf"A7bti<)f"VA%J/]WMn52pX^Mi?`:;XgjgQ=Fdc>VX0DF)5-"Z++LRdOucMC.AU#\CXheqPIj^(/\lS,^XObpJL%q*TVCr,R#!I\XI\`db^BN><&b7:G`.ULN`fA"fs*HHeiuHB"ijlI26UU\sYA:U[`QQH>7L<4a*/-Ym0]eJ:R@_qLZN$O;d][EZVd%n'C!Z\$X?9^NFV$E,ajg*qf!Ya3Dq;]4I#]N8i#]GOoe6mc)C74mPIYJ,e*-R'8^,mZT5;040W+;,g$[p#A%6nsCu)68&.lN5YDV%[tXb.^=/.R88Ek,m,icJ$XOkZp6UaCF`PAZ[g3b$&mV7pbKZm^^3TFf@P?unl2',OZSrirVK$ASM<`+FmI$/Iqq^pHNurbVDbnk]%D</5geu.a`Aj1+^:UcsYqm"h3c9$6`L"5Z!@RUY]H`\7J+M83h,Z[V=g9\YeGIu\tds#CMo$@V;T2kHI7^/]UjKN3RUue5@*Y7nH%.,iaD'.5P6qpAbO\=<5a[D(daJg^6hiSE3S;#JaJ.qItjlPrZ/H&5-KDhY8TbME2cJ,49S^)1VM`SPWDdl^ebXCP[E%iP4UOYm+;%IJ6#Nqf'GY3-4ZFV0YI5<IOTONQnAf]P$auPCL/l4kFn]>\tJQG2F%cNU?i;]QmVhG'D%R(\ZBPWY$YJ3S#"8L6)6<=mPM8*H<^F%IID4oqd3\Q8P\Qle\^<h,9*/#I!29Hhqcs9/=bCh>i&G@f<(&,p0]Lf"-!3t(g+EUP4eNdjKeF8j7ThAbajkl6(qLe#e#/W6CV"R%BAGPlg5?oR2A\H1T:ea!iP@919CJ8N1i\l>SbnYbieG$cZp0_,H2C/:0([P.lf@ltW989J9HAA*'+'+PGklocW8Nr`QhIjODCo[Q%nk!._H]c2$@c7u?J,Q7sr8B8h]=sKT4?lu,8F8cgWE$HTB?;GUaBfuj@_L'V2659#r*"#I\5-F"HQ!>Z4Apm`V<aiT&p*#eQYj#[%.n><4VcuHOaXjJG52O'cp$CPofo^N;b.W8:dCAUoNEJm>O3dG,*3:gkPW./sa]j2`HoJ[hH_ll5MUTjh2ej@:[Pf&R_R`tHZEk+$%Z2dGeZOQDOAaO&HVc(/^RbaZ3i<QL^jit]oj5i#Wp2@Y?Zs!72I=7l1n!9@[2P$Sna.m9cM:8lR^?6'4_7WG7'[+VG!AX-7h/B+b%f/C+17?m;np?f>C>J7B.L>CT,DhC1>Lel;b)N-dnd*-*Mj6P=Qp&'!p75t6WENt%2Uhtt#BBuAu)b-=Q>MIar8Nt1>/WR,E[2I`5%;1[LSARF4UTG=cf0Vdq.8ZuoGJ(Rp4f?3lI+9SIQ^[ga_@B]1^ZYDbFXSuhmqkto+W,<#X=rE)!j7EF*%W?[ZX0&k8ei$0g0?kH>%2X2AJ?]PZ^$]BHegtl3_gjMIWDD,iXYHG%Hc&#Hamd%6m]irJ5lA,&_:Ts&>^u&Y8l1SGrHqOS6C5He#DWo!ZaKKI2S&CZB8nGD,%]!Zg$m?)Ora-Wu94'SEcYl?b.iYfcC4f6c2*lUhp5kj4fHS]G[XnQA,IsJ_)?T.YfhAr,7iL/D4@VB'>PuV0eOY=`.9uj:U\F):3%fYZohCj\B_hS`?ak+B<B>EAS#]C3H30:Rm,"F[A^&&6q+h(6=No,nh-j!'QQ(\59+-@+UH!.!Xla^9Ah>!"aVA7fAEhu:!nm!:Nm%[dII7-d@.obO*Y`O)AS(Zd#T8]/W6NOSPeM5(1UUf8/*Uhe_Y4nM)1kqjcE>=#X0g]&+umr-S(fG3)//m%/**rMAldq-trLGS%mU%0r@_..qB4(\7M%'ZPApo@AK+mlg<inIeHM8fQ")"Vs@]Jle_<SRtNeh*;TT6nhIT%rSmZcq-=`IU89eZK&#8]\kq&O?UbuWgtX;j%T0Ia/_OfLD<gh=-I_O67J":FfO5/^2]/SNs"0Fq^9%.@oW=cKr.r4n)<kfC[*bIVZW3J306;>CaN_.E:mSY"L,S_TErP=0!:#;rJ%qUMLqCSdf$l;4!q5R0Kt?N/'S,9nOK"$4Wo8_7eN$?t4Y>GDJN.crm?n<fH[XUH-MnYimSc/%-Djkf[a9(g#[7XnrM,-c.$P\p3K%h%*:FDO)C#E_+31NXM>%a4kR"e1,aIrF`;Te[LPHfb_2C,[R*D1a\?Ng]u7Sh_q3KQsTLk/\IQ32a<q'-aYcJDW_DPK=CYPa.J<>%j)-Z<eA>BAGh4(qBQ6oGdPi/"(fUhZqDDV3=Gu^@^4ZF<).\I9DJ^-7mU^<A4&PfjCIdK)ITS>)f6/73(7]0N]-\EpO#o$>CskC`%n#`cF<LR#-*[%EZamRe5niOGODe<@bf"[@3roqU#li0-7B-"riZgsX>bF*(eG+r\@d8G>i*)&/WXP.J"'(+,T-7@7+$PJ3#<ep5V%cUuG9Qga*t,]c#r"il]<$"c2.puQUPhof\fTB?Vo=\4qErR[3b[h6m$Mri/Tkq-/cM]S.P'qI`SPh0Xt.i"2cQ>K8@:>6bkoWopP%OhE^4GY$fb#:*GqA9M:$gn`T@""2';G3#IMpn@R$3ItgUm>RQJ4?q:*ALc6*P.oRfiP6aGlIHE2M]AS`JoaRRcOh`UnghOhr;.?R%-i+Vms5rguU(?qE1)uSnb9?[8XY4lf-SsarK>`"E<.i=\m689][+V2YP7)@3pUL.D=HenilKq9?<Oo?]m7O8+50dEcAmIluRPg(G%9C_=W6X"!CID;H:>j/7qrc,Y38XXV*F4!NVR;T.`:Y?g=QH,!69F$n\S54p`*7h1@b*XsGG3eMm7iaJ!R7]W^P*'<:]u.'Ueu0s=%1A*pCpW0db15DCQH=;qJosb^mZZg;\Ei[mTCBZ==;`CsjQ,4l/Aiu@ES<PMRG'0H)8!ZIsGI-!@ernEYs#J9@;S,F.2O-R/qY:Su%!j/eLCJ9<)"^U9mQ/5:i3(#MTT#L(hS&V8U/751]\590X%$0"F:hlMh/iOtHA+<-I9T4'g%T"!s8Um&;Z-+AHlCPCf8%!:gWR:@[%bc0111IW->g_HT'=,b"%0qtXMG9<G9Ce-gpngYAYUD$GhFR.n[_rasd3Bil]9']pgVHcsiXFd.G2^`L[=_/RI@8FYrkc$u96`j3H%Y*'hcl:t<_)sX7-(0rBB*\:&&/A4q^%Ng^:'O+'tSa&Z2P\"j5fZ5iKQ"m4?gapFi</iHMCcp4&%kftk^]br<HQg4'kHNNSPV1<4%-n8f^ajXTAQY=gOAGgXk2Qh+@ahEsX=>,pm3%Q4'2GD"C",2=sUa/`>mJk0:g^TTZIj@YP*'8^T=>-5)[jQ:.$Z#fL:TI20D7X]7%aL]R$B#)=mM@tQQ[;MVk)<HgAE>56P$aW!6e;\>o::erD7i/6R>RX,t3b6rMbSKFUFRES:X_#Aq3/2j!9A)4sq%HU2'3=<IL'c$n%eAHqs`[V9IhC,d-47O@c:q5EZ$-K\d<qj,P6`iPmQ9/k([@.n+>IL1Cciotu=\dOF[2V&QCuZM1UHP\^e9N@$-W*47PXGb!'.;O(%Q]jd`@r.I`g`:+qM.r`Um`ku^RdCGBP#uW"\4H3#$F[MnUQ:7C_r?f2@fOmpc_QJ8O(]G&n)au_40<+qI*umip`<*\(f+pA4](RF%JI:^,k7t9fQ-"UWVq!ueLe-dVeU0BE%8)W.qI*+,rUR(?RW>+J2AZ;Y@I*do(=+6r4\':$`-8`%I,5`2A=MC\Yp]j#hTp=ds!!LT%f#\1^oNBl;'aNM6%+0TnkL<In7q+[@M7]m9Xmb[=ULZH6jArnbA+6_]i6=]M%1bL4a\=oLFc3(<eSof=075$kq9pO,&L4'arKiOC%fXAU&B*m9$jQ'd\NXt/hT,'Y-fBYS+Wlak+L3XCo1=\n<;t?(rWujD!?bM\4#">,Cj6/li7t)9s9!;5Jd$(7%2HCl1ie5=J*^%I`%2dc%]T0Ykl<2<u"*8uHPoMke.oDbZ>8O!EsG+PBC5%;94C[BF-rFS`BXY2T/:A7KUn9(l0cNJqj`qCXD.ZCQ!I6`E;0FhQe\^<A/%/t,R_h,:RWC0qO-$;49,cd&PC<TQPU)7^Ge7/^,`b,acU,e>n^WX>B(!HYKt\*_D%(/%bSYBL6u:8ZQ7R*$'J4;OA`\%7(;CE,6*%[JC#iA60b!n7]RdJ',`>O.hG(rAhR$q!s#p\fT#a:Fq^:LfDASB/);4XbM`UOKWguqiiGZ@%e]SgD:]iELEaocM`f<pjVN1cb%M)%dcB/2=)9Uoa*!JX]tY#L,>AO2:-*i."7I*AV%C'Apg5hg[;`5A&7#39\L=9Ai2Higq/U/6Y[fb8_a9qoE_Ke>/;Gnm'fBm_j&VYc%`^QMk\WM7V&[H6/2mR1niuh&9m!hi+XMC_-AqDq0g$NCC__>e!4D[lj#<]56J!@;7fF3O/^;`'HG!Ymu590H%O1#iBD;A=C,ne?^%S#E1S,:j-8p)MmRk<_I"]D2KMC.gul<DEcPQmF5"KZiTV81p?n8*P1Ff8Mh""A?`)fk)#jQ[qti4E4R^hn;jXUt*Ug/-k?B9AtOV%[qfV@UFd[]_F5tR6rh0Afu[NXJ*R5+<g='HVle;4AsqetA<!,GL7=f5dG#BkKPO)ccnuiS]eT>R2JVkjbCoUe?0l24EG)eeFl<Zk%atNT/=(TH$M>:ZTq44,@Suf2Om7;#+28)Na`5fslmJ?=]6jR2i14o;?ndDso*cZnT^%UfKoj9j)\+ptW01_ST:Xaup0+Q@g@;>=o%N3-PF`Ks#98)+^QC-/%o8TQTmHPcueOO-'tZOTm?d,@+ps3N!sB8IE[9_Jet#L*X[B5FB\CFB!UYn)-&c1n/K'8/tF?R$;G;T6Ja%#C&pO\,VL--&#45#^J^XO:pjirJ*&gLU8qdn=<A5^m\eANGr;*h&A=Eq.Dfg"_lSn16t4YfLT/*T<W7N-;7u%f='+n@qU2N.RM@<%B,D[5.MI'8bD>K<B"C\/S;cDFN\6#PI`Cn0rbg)tr%K)91,9&6amnCk&GTtkp+qHfR8bQT\@tOfD5(XR/lV9kQcRepr=nabW/tH:%PAE;o(nMr"e-sMCg:!IWS:CV)O0THu2D*D@VqKQAb@91Vl(aK,0hhnLbY2ET!]YFl'bDAr&*#EM94^e.80OVVCjqaa3'c],e:2q9%kIEK8c-HO8QG+dd_R/Em)95a;1t&\.\":`eBJ'i?jPkG+7au"jkL"KFE)!&56E\MVVE`;?jH3F<ELoIm!Z>i1c\OJ6c1MdWdDV'F%jaj/$&^0@o;(9Q):_I@CQHtV5%,Y\C0H;3A`q:l*2Ur2"m[Y6JGat6XD:=brADIjWdpl(Y^rY.8on^kikpmfL@\)oGGsTG8huqO3%0'.<qAQp4:-CH>9dl)"lP@H4I!S?p7:a%:+9omLGU2Gi>!c`YJU.``)D9Y5._Jlf6Yc(Z'g_K+g0O58TH!G%(!lr]Oko8+hQ_[dg%/e'j!:FK('cgrhBW1>QIJUXnQLIK\83&H"f.PP+c-/)4Vc-uhSS-Q;jQQqbP;H#,!>9n8:Ys2]8D/<bQ*laPKkcPl*"]ht<8PQZJ%WK`gU4^.V".GLNHn=0tCgV<rsWRK"_(/qta_^$jcV'Zn,a\ik8&/0BsUV>/uZ3$0m)tIHIe04^;`1T-W.>t6d.V6+$i]\NA-cndC%Be&06ljMQYq1/f2g25N=Jh3Ms_=Ij2<D+)7kck-pM5uH,5odl(aCZcLjM;NB%c!!Pjl'[B:rGj\1,-h(+]X\F9[enD2AN[<c4-*I%18^,s+&]sX;Bsu\o.]/6AlufF,Iioph>*d26KC4-Fs>&la\"k*0LM:e)X+f_(tSF.29/No5T$JcJD+`flCgKpZ"[a$JC[Ig;=@eo%&!U!t`c96h)'WS%1^Rt:I-(3B)@rURjV'tdAg+())A&"_JPs95PEmfcWCshD0rRI8)@58XXU(V7C`!pPN='qs=Gk+g`gpXo`m,nC%FTO$]8t&po.RGgfBk$+BB#aR9&0559UM.r@1r>7pfS"Jp/=mYD:`,(USeip=g/Q4fL7>RH1F9IpkU2hN[QMn/pj(A"&nm>1jd@sY%8MkO%BG#?B&G=fN%0/:8>T0/RMTa@C8/[,:Oo3Y&RC$DORVEb:US&9G/8ZJ=8_"7([:R-:;Z66O+s42<'&ofZMeRi[>f-12#a=b+%B"`uq+jZh_K7M=#@rnQH26Hr\;'Phk@'J?0<KHU[:U]H5':"IIM2N3-3'9$T3oEqP(&3aXF'4)o7R8-U;&El-IoN``;@e1NfX+\j%b):5c`Yq6g8X*Reb2[fdbQ%`7PT24u/0@'\"OFDjb@gXD2IHPTX(WBH;G]NJLP?&</SIZhc!/4Smr4>7i3>C699F>%Ykrm"rm;QE%/8<"C%<ECMUgYHZ'A:/,fV\%GA;8HW&\t?)@\a82Q9_'e5mY^lPL^TCRYESLjAJRNaI$bjTYtRLEU$DSgE<kTiHFn!Yl-qV9j/]'%GTn<.CUfM8L.J\R+X[/R?M8/(7nfj/`\9>\>`1_uMN&d7e;d>*2[qZ>9P'F_3>SmMG2ODQA0RE_:k5Bu!&?fq(283b2eFk6EqlfF%nh<sp`1*P3J2dSO%=Ml)O,8+=B8t,_4N=`#'TPOL<[!PULIB?ABVcE!>o.U89JT6fP=r1bK]L<hK_28eCmBf7MISu2$o_NIepfq!%N=@+3N"Nr^XT9WQi`M=5Qh3PM,-;LoWF-hYc%L1j!P'IO^o.7U_1rNo!LgqTT8ZJH$CAbng($U"e0=dK&Fp9H)J^g3:`0HWK;@//%`FAp6<3Y^9THYL^PGMGjdAW7'@JZFQDc/B!A3g%@G;<2RF,(@e[k4HhqLNdI&0dl3Rh8):8dFio/5LR\<b.ZaO9)C!+A3"-90c2(%+X<?ta0lse,O</Y!4Fnh):*C/!7Qcl9S]1=5rB9,@M:s5ZSO?$\KiE8*M9^7_9te/cmMjN;Pa'.2kW'<AL@/+b'@*,>a$=OYL8'l%8rTH0*E(>"%:Mdm76kB"#S^Yn&E#(b)ur1XM',88!>1Z4U:WP_2AQ9YfW#(K8<]hS!9Tfj/#KJE4.8eg+JqL6LHlVth1l6q=SuI@%3$H)T6JMfdW<?0'7#KNO<O6?nO4'!uHS3DHAe3"\O7jD#gXa:`RYS9>;)'@BMgu5uX-/lBDJ!:'dV+84&H-M#dMS-18EMVC1b@B^%10t_&3;]nHUBL?ER<9R8[Z^?pDLa&]+R1u_N.qM:N!oqhfE0_Y>"k%F:_-ua(oTop,#cG]5dmuEJ8<9&*/9i@Jr!nbI%'d$SQ(9]%!%g&8;qlqkW<#fWFrVt5,,lV+4qrr47Zkld*ZjlWJdGhD#FF'QX[.!()_#f7%>AB1J6#S]SYBaW%R[T?d-u@K0D]B0"H+PEJFK5(%VN!J]+JFEQ"bok'%\De9$m616^lEGGN(l9/\PrXiq8]`KR+`m$,`IJond*1,^0h"'0$Hed?Y&-uJA7*4b47*OO>0.Z\;gt%`t\k6%>WZ<neEF^i)lNNoCPNbDN?]<ueR9ocmf>R!1$#kj(Vgr4iaE7YnSBD8e;-C#F29]DROKR<L0X!#)%\F=+P)-.oiOSq/WD*q+$aM%%Voq%*Jj]Xg@&l?i'dJe@fa6(/_DJ\p\GpLWjAH;_(hkiMDY9[/)B'"gSje*/@_d$+0uUl=d$M2aQ8-QP"-CX-)E;UXk!8X*k6DFJ%n8hiA67OldQ48Hk!V*bG5r*IR369,GR;bE)V8^gVLap1@`uh)Y!<bU`6r]C5#-eHn&5RKP2B*c^L^%rlBj%5<:tC8?8H>lPVU1/e%`KX"R+A<MlhNV"POAb'eR.0dRi[Mk(NBd\8RM,bXpGc+T`+D?C)O[I#`e&i.)#.@!(X+#?9M%s?lU\(K%oWjeZN0S*^R5@16>#Fi%Lq7jOFX$tpXpk9fph[Sj+?%Qm6hUQ`T!!_X9q,E9"6tboJ4tDEj*NtZE2J48&3tm3b.,G7jtf\#+>eY;X3+fTe<YVA/46^q)6a40%feX$OdH1G_%fK@g>_[V.4u+5o&S)+n\]95WK*g``*;;Y4I?-`h7g8*jU`+j?phlK*rs]Kc0$+E+bRH/b%d@Cm-ehgrCP*Yg03J<+%\N\rfl0)2h9c@Z,nmP)UQ2k@tRC#\*,gdH3%,$pS"%Z[FrXRDE<"/GB:kpG06Ua6s*W`n64QoYX,*R7JLXma.FCJc;6t?j[7._bk%40KQRB+!]'ZM&Ma+p7lWO+i&PnYd#W^;hC"I1Y+l<[170`gNSqM1Nu!H,0nUGRC]:S,OPj8mE)=ednFh$J5ktZba*/2R'j"VSRK&%n[''h6YrsTXERbf%)jh749u<l"c/::X![onbQ<kX`rP'BGcV-jW<>V2a9"&$&N+UE*/&,ZRq9p/^deA,!"+G\jZDgt$q%*E\a+3N%**4(O`%r8?cP"h9b7"C!3G^a=DH-c]QV'M*_hHG8C953n)8m7'j.8oL6@=6f>G/9=hMgt:j$Y^2p*q3B-QNr;D2&4(LTXf'0cC%f%p]GN]j,eN3Nb^\Woh9)1pu8a5KGFW]#jlmS'LFo(Yt5%5L";Qmk=NU$(b7B(HU=<iH:8RRqZP<`"'l&.%#d>FITs/Z8.B&tNnP@/%_R_X7C>*)TYcB)15^#5f)6go))(\03JQO6T:a<MM&eeHknZ6t0h@j?$@DF-=E[05S9LIama,jH<"POe5Zh.4PDD"C4lm]bc7\EO+%6^/`C]7:LF69@M%!l8jb[$6T"!cp%6E0ksmMGatIYRS-B&h@]*_@j:AL67**(b.+5KZS!QH>QfrX]RDI,]%61.l*u0]*d[k#Z$L`%TDJ$ok!k:[O1)>?[RLp(U='M-)DG;,+@AmHJO<>[2Su6%0,f'JeFY>T8&l'd7M+r'.<agH6Vrp*rj6(fH:f<-NlVs0Gt\NA%NmBG%'0j`"_u50HLAcSb*/or<E0IIKdN4]rL^$!OKGPcce6uhj'+lBl)b)b>5tOa@),RDnOn.TCM#cBh&@Nj7L_PS7/sXA4N&coqeZXhd%+REhUaWr6S,IkWRZP3gf/8A9-<5;]sXop;LTihSWN036.7/P_$'J@r=6%&$i@e3'bajh!'>UkRF)5DmR$phl0",\A@;SmoAR=Qcf%E@a&Q:-`S3,?b@mqLQWQpH6E)D,F(2N%ABqJn[IY`"[%n]/^/j;E_=*"Q<Y;>UkR:I4'QBF=a]TJ8e25&I8IMb;LQ#d#)="MbT@*%9dLB6I\MldRKPiq,C%.sZT7^]'_=V4RtZNJ!#DYmAi&U$;moq]n_OEo%d5),!p?!;g!DmRhCHjIP$!iNU+BZU^rE5m+h[+l#gF+P%-).87:K`!#iY^([U1s*&\[%.qK,XmJ7MlP(#'^B-3lr]oWd/CnF12Tb8.q;OVf']I3/EOoYp"r,fFBf@O@"L`Frq;oED/n@/?a\p%*qZ)$M7[plac5']%LM$?a]3kb)u,0*Hm;.9I:j)&^`n$)j^c\p^48dW]p0^8&@d[DJL*BiJaN&^94113cO2a[Fg)hk+n&##7h0\C%+TW:\:->BV,RgtI-tq^]b`HNqq>k)\Kmb(*co\o^]PN8jm6LP5KIG<5i>KXgQ=Jm9(`Zk2fT`\[GOQ1uA=;B;/jt@n*##aa#42=T%:"TZ)*d[TP8S7$Q0SnCO%Zc<;(pM*%Ag4Jhq)npDps9=&79I="*;k"&4+r88++at]'mnZepBi/s@*(=U&>I93>ls$5jbI!C87:Ui%<?[B3f3:i-!]^LY1lN0[koQ$YAB/*pg2rTN(%W24'gR":"+gV0"/&&B_JSui7$DV4-,b0#/EA?iPWV/a)/q.E)BcRi&sGeJI:UB6%>.jS9"J1++#ItFoO\&"L7mZ):fSMG1P0qXdVQpCC&ERm\-+cKqE9p6jQh(>\N+8#i0VE=*QAMubo*7f=Q,JKE@r%JCG[o"K=Q$u7%#r*)26U$jR'2933W%:`t"BO$>j6Bs>TOj&Tk)g5?BEOSUqcO.1X>jZo7q5%?^oRqUhIX/6*&+V!m4oIP>,XGo$qUf7Te&\.WKLJZ%BB1`no&B3EJDl>=M)<X1,8dV05Zl>5Yn8/]iZQYQ`'=NlaE8I9=r[\(h#nJ@_G3<#^1!]+o<;J>C`HRo67\)<A.DiSWuIS8.$,Ni%o+A0,gi!s8"ru*)"Gr+d5R&D:#pC=)O45tN-`%M=9F5%d7drpl62:/^lo4\Ln!LEN'_Y'8Y*`/+"]NDFgVha8G3(g_"h@S6JfmBQ%>-\O7[&le7Vpb_-Qk@8so1ji*%Q=r^<nZt!,YFNDAC>^WMnLE4A:m<1^lAdX1(5I\Y)rDBQnIqfHqc,Oams63N=arj(J'r;`YJ`$%N'6M<&n8`c7BbCCmisS#ED0&*2per.20ibuXd;:B3R3Q<#l]KH]S!jpCdHco^`/6[C*=E3`b>IhE"fiZC]c1Z*<RK!@0e=QPi][r%&g1Ec9![ZBYKJp<SsD#kY[*7(i.dmk%rjJa<2&g$0[ZYMYOaM#,U5\gU]jmU>0,6V*014Lju(nmrDCr(4)`W:''j,@S.i'0>75op%#j\8t&9B]5M<2pMqN6*"+:sMOO<3OND?OUj;0I%n$g4WpP(CnpQ[B*C%`Hu[oE3Cb^_<!Y2;f_i]WG@bbr@&%C:KdIK#@cM,D=ZI%aEqk^V?c2d6P7lu&CPJ<Rt,<k"#4%4]Yg,(PIA_M.M+q5.lt?#N`h!jLSa$]S5Xu0UJQhXiX$NX/R<H\=^p;j\iQ%m_Ia/ehMgM(%#fI[5=K^TnOBa8l#qbpFZ&4;*"/_.gEh!lT&aYW^'!3;?S><hXMPD+3\tTjMO=b:3$6bU1*oQqbOJ#QHm!KG$BPj(1__>-Pj=dr^%34$Z41_c=IaFi7\;A[DV[$6_?*'4AA$-PS]SQ1lhMO]aLH0.dn\kWUKEUE`-!VDSCGj=Bg8PJ,&QE-3mB[/)eEI&sQdW$Ot1>oii%cJp&_ccMH\@1Ei?Q&B-@`ct!/<mreY:aWDO-Ff0W_'/=8<@UNmhFYJ11WX',0J?_;(WgY+@X60@L9+S(>:6b4SrBct(atp4mF`+=%5gF6i3U*\Z8L>s#2C%hMFV.,F&HMV6S-(sTLkC)M#SlE^qf_m?N\$+e(0PHkg!XUjlcc_iI2Cn[!(":dW;mun+oirOEljHLN,1it%>JZ>rF=VX'ho5!ip;/*r)7t&ULSV""Jt,6dd6eO"A[?r?!urI1$miNoOlp/g<O>UJG`q"?0?R`n'\%c]mil<b\bephUnP_8N]r1?%\q<Cm+IlktPV_<ZaX7[B3]?!X(8k=t!VEJ3YAMIHZOf`,/jfa_WY2d(;(;hsYgk+SoKf:O%j"2foCs_-fV1VYM#uW&/3f5lLd&VR%=Re0!`.:hq&Oh;F-W)'(]<nFSDHT4t6Y(V*(EpL'-BmUFC!>O[GdpB1%`O@AL(E&f&Xj?NrofP"aBkYs,M8)ceh<0fa0nQ[Z28<G%8Tc-ZNi`uXq\YX8+M]>4M+D3fk/$(5OjM:[06F&R,-ld@]YUYOOrOoM4"m*Y2*ahaN-_6kfiS8!PRL-DMEXg%6kJVH2[\+=%bC\h%\!5A'3%tmfW0]'s93.j*\e61,o.1P@918>fcFn60)WVoW`6eZo1//3"4s7.F]tfIKLa#E6dE#5Tn-=%Hj5O*/T'#;0LOP_UCe6>L%Q^r**)]j#jk>Rme5rP%g#&m0S#:nT:_Q(amd6J6\La1R#!oe7edmL4S72\`\%u(ch15&mp%pkdDh[Nb+n_N\J(_t)M9q5PjKHh7_%>_A7u!+]75+>rTfT[he-5R"g48]qA'H@ciON>3i!3IE_Y.8(9S"L1KO'[1?/80ZLaMhbatJs879@/gpk@CnK'5S.S].qED+!E\8K%/$=OoJWGZl6H-7#5]<[?6W56WVSfiqmn2@FmGYrNSCD4[0Y*&(&/$(%RMQC"jGXX8G*FG@HlE;5Hn6RqY]Yil#S[:.i>NlWP!k?3%cA[m53ulUFQtD)P2lC@!ZPi<chCJ.!EF9K>Bh:,i+:o#-$HoOn8E)f5%N5@EbSsXSKZg=t`.4N^8F^ngnJp\r/#Nc;i..F6V?IGW%q?VN?=%VrQ8S)<%(%RG,hRu4XCI"(T_/lr.8"7t7+`E03@dQW?%s]T4=HG1(L0]Te9"4oITcnjjCK2jHn&)t/=tG?2bIM,f)05^5%<,DBbP>+Ds-D(er;ooFSA1uQT<:DUX[(,&a5(Y]V"9I04rf/0TM`\H3ffI6:8gmK@hr!u%ZrrVRe=;hpA#r!Z)/UW,qp>0\!tNV;%IcmuO"u.6]A3/,NGJC$@SgVO@iZ0>'1O&HuM?`\BSKauL,&%6%%lf7T/a)81<U_#?ps>-9?e.q!8H67JS&h(!8uJ"HPECM"a>I\#%;]4>$-"MNHml2?02ae8A/KtV.bGF.'dX"9G/>\"RVqi\k<;na<5`"6/h;LsQ3G7Ak9M)M0NMIm(+B\kn@WfFQEgVJQ6jT959jZ3g%N[p@HBhFKdrem638nJI.4h:/dS4LE"_2X-r^j>$FEp-ZraZBYD`Jj?Zil$_4oe278&0ea):+%IiWYV):Ws#^jC7LI,8$@06PT2C.%63d'()$Dpgij$ho#lpIRH]"#i==*Ok-tZ24nh60l]<B;FjQ#]oPcL@tj=,A#3#cOACloiuT#.0D;S*:HLDIN!3:9?i<ELK.i5E/u%%^5"k=b^IoHc-R_JJ4nc+n6?&,RQ!aSuIn_m=<t'`B+/AA+FHh7TW-7`Mn,4Kfs(M!D(!Bo(6bHlSSX@\;;60@^>OCF,/%Ms3;'#%[%hpr'B]G%VraA-R"XO5"]4084;<EDDSuFnksS9Y7sU$KGiC%o!TXL$1=fT,ShK?+%ZO4k8AYcJndsm#Z!fiCNH4CUcr3NZGnMV!%@DF'=P7:lS_n3QiL82XC_0oBC:2+S,m0T$;rV>H/?CX5J*]F"2\X7&d-4hbm'8[;`i0.H(8!%eKi@&as"LcF"*!#`pGd2ra!Z9n.%"^mS#)45r3$opiiFDXR.0S;gGA;I.SaetsDP:nj[L`K]cI&%e;%KWKI-SZKFcD=qXG;5IKkH[-8)Z`ppf]8i/HG7M@IhEDm+u:3-%QUi2P"5t-]0l3PQS4JX:>@EoQ\)f#`+-EG?0qi0gAAlE%,%W*]`&Nku_&\OTnu-ju?Rrsm[Lj"`cY)orqbTc9K#Ncar>)\ERBoFZ%!lA9sTH1\q@J5$Z_k[OGbElbl@M&))Qi^ARG'A3C)1`/2KV[U0;):Hr?O,s!_'K+m+\p##2$1<L_]TE/#]JHR@QT,f+311R]O@co%Tr!.c)aZZQ!KCbr0hb'`pC&i]duph5DCL$,E[*Mp6d.L!1H=^\,0CAB-bdDG_mLSr^VN:/DilbLX5uDnOBVa`MnUn'+RR&,b;X6'%G]+sr8n&o3bE;)r.Gf1J@O%-HM!ZFpM\'Fco.:_A?db'e5fj[db@Q/k"WHDX@d]>5)$nD%]4*Cb5K)t</1^lD6r\g-X@PTCM,/p]%AGK,a-F]f`6YOq('+>Eq'uu1obWP$MR`J4>'c^>iq;?RN'tFqC&Z-^'Kr6&Vg+D0(k4K=Q[c$io?do67c_/UX<ldTmD?70u!`=Do%?4)M/pI=Y$QV?oP#$Srh;[LH6Z[m(I)s]P,M#\&j/0OB6Z8Il^6i\2HKgPD,WX6Keb%Dl\Ar':Q+$fU#!"cT_>k/.%3TZLDKGL</%J:&p>/9-t.jE$h$-hrc7e42o-j-YWckHMp?>(J'NK7KeBQlERJ*0TY,*'?VgdcOMBAfLH?,tP%3JcOdD4rcONE0q"V)"&Rg)(mNQ%2NWIQ"6%.ZA.Pp="peCldg<6Qb%:K9&m=-i0P)iN#n3&7aZO,L@nK2nNaU6/Ec3ps!skeI!TAHB+M=NOKT%q5M]'Nf(2o-eL:\OX%.+aPY0QR8^Q8JYq;@G&G&AnMieA@VY^(Ug2&^n+BR?1)47@4f\)Bu=-0g3'`!8%(7:hLOVb%/V<O:pTp`8`QU@$kCtR!^Ch+hl:_%@Rp]'/sX@#9u(lDm.?rU9h1g0?j(Ic+M9#?o`A?<=GAP$Xs*OJ^sM+)/&D"2)S-V*UR2X`^&[.0T^QmkL6PPU/]'2@jM?sORhRN0%&1nk8J;09DEL.7Bl,7uqQV(^RMt_='2,//t`;07d">=d?p`j%]IN0[h[d"hr!lS4U%Mf'22<tq`?:"XrBdFu@aF,tDK1't>f4=2o%BcPf;8n(-1ZE\?k!fZ.OS=kF;O'M&KRQ@L+8t5[;)qf[7?l03Uos'Id]MU6E*p=q/?\)?N1#^O=N?scI<\X6]V!nD),ZSe#''akG%&!1A^@MBVN#?hISB\-aEcROTu&;ib?LjW)R<fL%o)1X$'A4(5;CF"N^O;K?7Mbg8rK*jfQ+h%SWP/C',3PMe23#E/KEjo/\M?'oC%AO?s7m.odA8PEf[%k8D<C'>7.6oYb8`\+O`8nKjj^AA8EL,#piOL+"M%[8Ucg4]9,N\J@\!AJ&NfN%eA0d(i[&!/Ig,Cp.QQn3d_%e.;WRmkA(^LUDXDYr>!;8B!=*3[HT5Nmu"Qi+P^DbA!-paGo+SQmlcZ5M\26SET-(!Mhp<\2c1A1>OYUaZpUp+GBq=kWN0e"FtD0%@&<.>54T+-7su6&KLEgB)KB<<iFtJ4NeoiUYl5cib3+Q=34G\2-SS[>0ur8-3j-O,/jb3N"\d4JE7-,".;Urr87$?0R29sJgC1u]%VSmOJk8RgR'fnCnN0?9@=4`7'n;Le%q8TJ.@PrF[$%h7%"<2A+=;,:Wb=3c*$j)8YfLe%2TNhnr8WS49*2l1LNu0o88]MDE=m@tp%8b#eb#'-kPSNn+61bFWP(IOflYk8_<5WA`N,d;]FR@<hr&ssq*F*NPrC9pLNaj7E0Fq'RLa=>6]=R@PAEjGL_1[?A6`dS!<UjT[h%O=$K4is]X/$R$VF#JrDd#U668#u#%&RD1r*L^IjASttJgfo[5i,%2J^@rO;t_0b3p*)ip["qCfiq:@O5l&@t!#(X3CGJo:`7hcT'%QqZMd)aQ^C*>T7AV2QQF#@#^Zek?1tg4;F4@&8E);KRr`0W%Q"\/Kb:>nEH4Lt'!?2@Yqu12tWs+JDXJK-Vb(N"q*kfBR"']"A1g%@Y,j*`(33_%n$g>;T^_h'b*`B!l@T3Or(Y@r*cbei_J9Vjm_(qI!lV\"%[&-L9Mm0RCJ1UJ=+[nNjNc$:nOB)V34rZARLAS*he[0%SE^eBL@fT5mU[Kr:nmi;pq1ni\2R*/PlrG0!g!53KO%7"_U0cuF-nPQARRM/#iA$"[,P2MRigRi^Opk[,d#`S-#F`cj289JYj`hY%0$oUi&Deo$,;KmO9PEs)i)i\ekA#O/7AeL)B&lE8-qrh_4X?sM?-)OUI/nl.Dh.B:?p;\?E)>-G.oSE+'1p(A/?b\Y)23rq<6!oj%9$f7flQ&A@OC3p(.::1'*]@gS^*h)^#MK7c-O]2a4>BP%NeJttnOPjo`.rXuX#WHE3:(a5*_4n6:p7b]4E4'XX9RGe*;k$Z&5u-V%j&e-u1eQ&;TFk+WL3I)'81p1Go[+0ee4<<j#fA?c3_;N\MqeU;aCGZ7kAX(Mmu&p[M$28V+jGg:-3q6E/h,R=.gWbp5^3e%;FsR;%;nf2e-,A'3Zb?daiTiKI'aVY.9&tZ<0T-N,Sd!'[ENB9iJJq3a5eKh9&K&]UEQ,=a*4YOK"gD,\9dg3S0$k<:=I;dX](d3(V&'t%%TKr:N"=#7H_XZ`*Ld$tp-*\YTN?<,oq_c'Gn;IGq:--LSg^*V,"pq_J*Sa%n8Nn&GRVs#6&N4[j0U'Hl=CIQ;L+SBr)7L:]Z!@[T%-a;UGL3*JaU'+pnnufaF=1+FT@!aks$\VGDff;GXUaZFYkkE%=EVgI-9o7UCOR^<8+\u<,&5/:&_k&4b8*nc\q(O.M\]l_Fh+iM9%@[?E(8=68<&;I$6GJjQ2BFq-uI3^XcU6m>4+8I4FRNs2Ld#SR,Ybd^p74u\&R:d-SEH%6M*&Oqrfgl:d-bC84M?LkAI'M2_;E!Ub%3*IY`0o8]9HoW$]?ZU<sd#b1G0QuA6!p?iN^ss%2`8lUMW$aN7,Vb/<"h8Nu_.@L<dMY=Z$OCYb!T@]H&4;.;lkh#7kHGS["Q)Vd%;$KEA*2Knb2+>f8i'K##-QVCq8VZE?"%3Mu%+FB.!p)me>'`&7l5XCQi^GKA*XNT,[>dW`qo9K0kePRb,hrI]*-WMrA-'J[*?=[%%d_Lj;Y!du!+k^rG!\b_JUWD[F:EN466s:E)_C^2-Lce#:Uq\5#$34Fq"6.4#OYMbITETJV`IK(MN+q_='KZ<VZRF;NW_\[$0]BZU%6#l_shI46b9P["fAV7);^*)dOYXJ&iM'4)'&B@12q/2*m:"rQ$`[7j+9/%QVjGeE8(bb*%^&qV,=GV\9MBT^8NC0>ZQZY8,:'lNr%=TBH/P5&]!.WQ)T2qoA0IumUt/j*md@E_e4p$V*>'HfHD9:D8eX2@\eXY'0R9S]ik`<%`bh^2]"Kp,8<W.,A%_?CsA;g-rM<ZI<'%dIilm+Z>KkS6Nd]_rAY)*7/sJ9Z>s=D!'Ee!0P5UNl_Xr9DeTDE<QVMbE5[4O:O,l2hF=Nc[=DQF$*5n_DW5eq*mnk04@3=Q5*:A%JFFlLVOT(=2.-:K>UkTPVEYGGRu+GOBZa`uX>lLV)*iM6D_f+c'EFauj(6C&AD_\M"">PD.jcR3SP!q<jFN=6S@C6D=Dr?mA!dW)%/gaN.M\9"IM^e<an><h>[oYUg8i\RupdD:P%M0M632SJUi5<QLb(2/f0$KI]1NF]W,](BG2qZ?a3?K`F+W?"kK8VNN0]YXf#)n?G%!/8Dc.qY$@Vt2Sh4+A4OE'/-_"QG@sLN>@ifiU(YQ:+AhnUU*T4$Ydg9/[RGR,.o+WtReBA*jVkoAk1ALB.dHa[3-+]+53A[hO09%gda:/pFU7CmK4^66$=^Qe/3q`'P5S!&qkcD6OXT-Nr(RVQ.YtG5\VLhL>3'c8>^qg&Q]2rP'LLq1'Ur&Mb[Z6aY\DsJ;aR"q,A?>%95WP#pLJKNO$KLrYp*[oh$Rad:%m-^e0>7.6"n6B@K[(n5D2$Ln)/Pun`0-++dT+^$EXsc@9]LooNQW%W#6I-9mq6pF!J\i7iQYX%q)l'Lj9t3g-<FE>I.XkgR-1\+Eb395#^2XWc>(AE.82:9*g!YiM%uDnMN%?8lQT-mb;&er"I^#KIfO0<%-2,Cc-e:Fj:j*[!1md8%Gi463/baYG)A"YUAA5k;"X&7=mL?GrZGn.:UrXk3(^:rc)&9S&7NfY2KL:P$XZ0AB;<CrP6u)#Z!$Db(NCe.72hF-.1[6pVL$S"c%O;cPNS>UAr&eX5Zj!-0?/3CR]!MKkLOS-p07g#0%%N@A?iu*S:$0E=ih8);6%3Pd`'G%o$-d$sqhojc29#buj.rsd?=O#K1P05q<%f`hoh\t5En2oF6:Yc:-4!.lN<L]UsVgh[gjL3e4t/0Gn">lijGlj87P1N#5dU\]e.MISu2,Hd/tT"K@L#VLO"E[!Go45cMnm#]PG%E^GE%=q.CYGZB94l8rl3dobmdaeek_L#_k:h]uqk@(GY"R$&U?m>kb'/.cXEcFg%[<Le?KNu*?%VAknc+-fJFYp-Rs=3J`1_uV'5%p^V+^Lu5iI`3W`8'^)[[N<Rr:#JrF_jAJQCB^s'[*aei_of*JP!Q5S$nFfs+&P@&EaM[B'il"A^"KM.TE0F=c'=e_1&Y9/H)*<E[%3$Hlra?i/H(0AmqY7hcA.'\iTl/>LXa*`fpZ^HZ\<!!+I>7NQqkDNgd33C6kA=IL>a*6E?\dHJ1&eL0[%7ujuUJ5oHJ@WBA(a"'[%+?2B3`8a-Hh;MTgM$YbfUB^(8+e]\X#Hh4+>ILbBY9=erL;bl!=WXc>Od^<jMQ)df-hrcrZA/0dHEpQ>Gkuk2@MnMDkNeZj\O[1S%f*<@Jq%d]+#f>7Jks6m?0@Sp#La,>X**_\N_P",Ea5Rp:W;UUmaq+\2^/f[O>kNK[*HBH3lo3p1WWBug5*IlAe-e@-9-l<d`L0?6%'M`6B0jMH!3BVt)HLeLq5*APbYp*\*f28WH2Hfq,LRF5C_&-c#niF!BkjZ3,N.C)X/&ucDZr[IHoDofDQie1t%cLX<3@G1SjC3EY%d)EUCL:lXpQV(^Rb3%2.^+KPd]Pt+\cD0CT3JbEu_irM6m(aBN)odcjqS;aBA.3j:*6I=GKG=uIW)@kGi&_KF)eQG)&aBZr84bAP%Q[E:*%d.p0IM`(!\NAfQ,r'*]hea42anM+j\DslL,U[UW\0F+'4H4RYE#gOF,Dl*-O.79o&Nh_rkSDIn"1-gt:.Ln4^;cA%^;H`d%3O9mX3f[oP3,f.^_Zfs'`&N;:CF5^(,]V;[<u-_VMIRJ3-'tlE.u`LKJpElNK,8VPC5.@_Ue):GClb<LS3Y)fDjtU`,UTmG(ob;=%G:BAL`T,*<)1JD85n4L#'utunM5:,Q9n(=m,Iltcac>-^(('$*Me'uKZB3)U?m0S#R36mFL)+48QO1N5gaqX&Sf]pC#g)-h[^d!?%VjG>2PY@,%n^E^Q!2g"lfcaqKB^*FI8Z^!MkG+qg"D;l[$]r%6:0]eJ`o1WL3NPP2#j9<AXO"`Y@76=<GLc1%BcNVgEZr8\a2u^V%9KAlAO5s219NnD%p$;.AB1D[#97dDZ&UY26".;+L^ES^,HYR4"q0mR6'95Gad:+d2l+o@t_j?iK)=aiU[#&:ea*iU3(K>Va)QsgO%mq[k`7G,PK@]&3E"$p1+Q[W^K&eeH/B1lI^lXT3<ZBtA5D@gEe6#k`k&Anq.S/A+T3mLK0Hc>8[r7]=*'8/1-U.?!F6P5$*&nd1n%l?REL(Y[0Fd0XFGP5GW/UWI]^?mNgRj!eT_X!@CNIjQ8`1aPDA;.X#<7.P=b6mcmn'3XEqb`)Aa=Rm%eI\e5BQ?o@Vq4-;Onln.b%!1Q6a<"]jB]N?o;<$4\bH'\_fK*X->^pZSFe5Ih$'rC<-'T=2lOpPa1"&+"X,S4;lODl26R*ajIcselc?XTJqdI@>mE[1>m3bB?S%j8?/IcS](TQm.$902M\dVqF&ua=nY%OVh!92.Tf&Qjg$TA#c'tlEdS5)/Mf@>KHtjpqSE#U/6_#"TZE;=b4X%fb.,D+WK$a!ohZ[%9F6TFhk[2u@A=Xs%M#R/b4i:D`%esPHBLg3g4Nt,f/$g#o(B!l;[<Y,X*A%`U504G*0[AAOjuus]OJsHU$(7c,VsHc(aNp=nBM7V%0KpN.@*Fo^?VBf5"2_lWc6;=ki@l.6-OJ1Jd8DT^`/8B14-K!./K)Aa((6)V4/b#,h@g*Hhlm='iAlOU78drc=HP=eUSH"j)]R)D%)fQYP_g_[=(ZjH!:tlIi@aoFm--Lh73s+FYK7L^aMLeK/O[CGHp]7X=a\s8nUH+>@/ORfSoP5WN$s)AE\5tZ3NnamUKh`O6aRR@Y%\^Q`?"!$F]_]d*<A%r'OIn7O9O?ga"K7hAm#^G:]iHc*RZjFbJ^t>R77La6g:kJ4qEYSrf1*4@)_L.gS?WP*(7#=o""GnjMiee(.%`)9ZD\mWZp3?ngjU'AmhEH/rdT^@GA9KROPD=/K&dE\D\n-5'P%E*:Wn?@g$.k.2R+WsEs%$D?sO1l('+gC*$IPp#MQt/U&"ES+V%+XL9si]4O"@#3-YEt1=e#!b;:*51+Je`?(J-gspVV373>"hqDZ09Ps%NH!Aak;E%b-pTa,QiZtLVS9T.._.;pL9Vq4Hs7gL)_WBK%`0#[Ir(^4oLPq-tcCX*UP9bm>5g%[+`rkrT-8<!U#tG1^erZb6c3Aq1?Q"Y"DL!=dJV[f)`]THK_':i5g's_cXpstHQXil/f9[Ic%9H\VENJUmb0U8ODE]S`lnIoHU,MNV4a3>d,@Fe!OPMfnX?nJ[+]!b"Ha\NEaoD*hkZ)Rti';nBS7%Q@L:MrfDL1DS)M@Mnm#m%hs%CiNa:!S8599Kj<Wfq,7"+c8fAeT>WLkI58!L(3eR@6?/i7lt2Of]:t3#(/Ei'"88d^*+\_pc'TtI3//s7=M9tT31%.%W`dPJhu@*%Et(K3*Z7d^1<Gd*7gK4-pBCn1Ig:Ya/&BH=%"/u72#U5n@TZKl0q\80RZZ%<Y9SfGJ2qjU/]UOE]bb;_$qh/RDR]9h$"T0S@n!h^%q/UAMn*<5rBt<f#H!g(ciQ=St5\rH^S&Ai4\[pPoG_.BJncZt9_;U6+7E)Z^1"^bDM=T)NSnA"p[<Gi_B%aK]Sm]4KIq+Rn/S2pN%1[V5@l>g._fW_N;Qlo7N9hC/h!kl:RIB?!\7a,0)JtL;B2;:>>1=":B+'O/%?<eoB+!i'TA+4,1Nh=e*s"HmuBN+\p6V`;IU9*tI%KSQs'QD;tJKK/t-(7<2E1cmZYU9HhT2`<>a5o%L8Ya;V;PJF<i#W[=Wcmn6rV-l'`$F%q>s!X\G@H..%]RXW@gSV-m$^`nO5);kE%Q8E#W2:VP1_,'FB0]4BJ(JT)V`Yk+qF'&^<mgPNWc\/+FDTMeq1"V,S`1nRqGX/'J)l@'dBBRC5pci)=os?](HR)ZUYsMn3*2Xep%,)QqFoS)3c/qgV!-aLKVm&6uKFA"Pd#l.2ug@%QlEf\lM_Tqk)@,q[Y*u(@Uk%n$&D@Pupqb.Oh`Ql;oiaMKQ+%B4>IN(MR3R5)Q%[b>HX1!Z7?V71I$XCo/)l.37^,PDu;?Lf#N?MfGXSVV4&hKLO)s1kYl)n.IMb'YZ4[Kc;9CLFWVI[#eRkd:q2\Gn7cN4)^.;KZZL%P_-=S[Q6-n5qZfYecHGO16Gd_$;N\EnMX+4g*&1Q&HY:DZL"b,;dC$GPuL&VYVPALJU`Ydl+e^@`>0$7^B::#RZ4SL$UdN:.EKK@%6SqX9Q%H`(T\'kYgRaKU&\^&1Y%t&!*QFeLn_06&#Xhk)!dtF93d#%n&UT/HVtha/2BN>+nh:sY%hlmg.<V^i/1>;b65CM?$ZgMP%Y#?+\)_;dWhJ'A>PE7Q;paSeuaW4NKQ^qe2>5s/P*Ycd&ZC-qJJ91HVOg-W^F/1aWm`bTh,GqJuj->KQQH`'KXq!9%L1q0-a)s6o%/^$WF(9+cr7#JkoF8_\QR9#TY8PIVRSPqEo7d7@h'6.#JbZ41T\WtB6:eKhB0am,R,5-"oQnZb/a$H5VH\PchU>ZP2HSO#..pRd&%1,fJCamLUo`4r<Ih^E?T.,H]qojg,::WufNn1).Vb]ls&ML8!OQc#%]pqq"s,bYfK?(2'RDkn@dJZW+jU>0%rUbQ`Kh%EUr;\t$)%V%Dh<)BdYMp1J>&(R'G"j4^/sTnOkrg53>6-h_/>@?J6g>eLk<(A>f3<9uhCO!]j58^EeUl`(RVID\^:,U<d[i;:LkM4+fGhE+%d%[A)euSkdrsoJbX/qeL^e&R$SkKHU`VW(5QI)H`P#=pP.hk":)3D[;>83C^&!)J>"G!gY<8bW8Yp2nYX\dd=(_2uoEdq2)X/4B@-S%_H>&b`E5hRQTB-L*S=^$oJWMCdCgA,n$uZ0a'%&EQl44ON+gQ7p\hZM6G@8`qj]55&o(KT;i6bd6I(D#D]`i@>LEV)efASu3:K`[%!2np9IeZ#XjY<VQF&bng=t4U?2-oKCRQOrK<!&$0c<U=dhR<Z^cm6et?o!Rie`E,8[[.J7%g:JL'+#`J#NfSImH1NYZ&r"&n19%4%`'-qVB5DYdE[AABA'/mY*;?3^(s:bWQX28q3HFhT2Gr3p&Ws3k4SZjB*dD+O/',8;K^lD\#(7PZQromReJ?aT^(@gfIauc6-Pkm>%<`dh%lRpf2V*1!,F%6)t*(c%_cYufW>9#RtlqR*AY#`#q;jduF5ZX89cKYE[o,($YSsrD!E$??\-g&!rRX(,C5E69hal@L05>71C%&2=l4D<B@mL*[C9KS@sOh7kLjBVjo9N4^i?p+6i-]9)-6-hc[8Kpt#Z^1CH6^riAl-#sb]cj1f[)[,+ikpjUQ,U>J"C;b"!!qdck%8=7c12_24376E.3+VR39@Ft1j/0,nodVid#8,1T=T]&HcH_M,e_NTqfR4dG3Z,H:Q6MQ`*mT*4)6X*lQQHD0-q[ZV9JKK@c[6kP5%*0S1%&clU#XsM?7ga#D*/B*9qD1m)3E\_o*n4+?NMn/UtB(9)nrY\#2Je6tE^[VfV;"eLZkkN>6;L$DC"S*pPJ\83bWq?Z%p=([F%Y[ERd`O1ko%&-KKWd8+tO3<QU8b+gj^l&&)4:mZ,eK(J7ctJOJ:^JTdpN[r(LF;4SN^\MG8YUo(4:\!)Z2ZLBrDALo4%kL'8]Dp4%5W(7$F@o9(r0TeV1=:$#NP0qZ([-Y4'D%u^'MfVig(p'97h%&lF7U0q8IgK[!lJ.6'G[O0)_o*WTumE]R3['$HKF4mSU;'uJuNN?%*fqlr:do5.*-tYY3pOE0$!3d(b&`MBEC7jfH6R7j'70tM4pl%95EWuclp"/SPGZ\lekY9?3p',PH_TuSSV$VG<Ynetk\>7]lW<(U%<lb0qW['Ap+IM!Yf8.,V+B6O[=)-"o8rd@(E'#R3,:B(s[t^Vc^f6YpZnrVeSGf>3Ppmdeone[HYN/S5V!saQp.&\cc^9I"6O)ld%<ol+@<dLK4f:>#6`&1nP.saI`BC\MUb6>)CgGD!Uk[Q+9EH[^)0dB9*d$[H`ZX_:L"$:Yb_[Cp@;Xn4RaV>"C'8YLK1-=#W>)arU%V3>kL(pQ#%O_-lr)dg\K.n0n66:I*G+SdtWY#&DrR-NDl35B[KU!>%=,cgk,&a'Hk:;/mhk#FD^qt)rH*#^N_:I';nO_1UgGi'&U%0]^UL9qh7GKt+95k.5"Jh+HZr6g^[R(hR:X@>:..BTnSW6ji&I;%^.GPnj9]=Wap`du@nZLa4Vn85<(fWMHe*`.,5l2_`VIY7Yh]%IRhms'3%i5D:Q%q!8osuOK.4gIT'W^*O2@l7>C*8.a`AJm/umXMhPL#%:(@%8dS'\BlB\,Y*RuiY'e/m(YX1D==/]ogCRh:U55\E%V-V1A)R24<c4uD'cp*+5UuVEDNr=_^@cCEO(m85hYa^&fKK+3[o8WPMiuW*_:(YXP1p38A%Ab^(1/AG#"0%OsXq>_T;qB6FL.nLt%Jr-<<bDKdurMY6h3<0D+%*8L_BfnT@\[A#W;V3J(`t(])DABXQ(UosZ5XKG):o?lOTP=;AhSu@AiE7HK9@]%Q5/Ten?"ItGnSA?]%?R+]VYt?)a;<`DjPA>YC`r<jYH.o&=NL)agJSu;A1"4]#-qj@SBbS(lTr_\0YYq4+Z(IC%X)R/5qM_rg7.@E<+\Jc?<]d'[=X'mK%4\@/&._b!Lb[YX/cP"s"jqP-JL]0d70<b7Xf$NtuO2NF>VX\o3=^(q"+B["n)bfQjLaZi:jB)EuamC,<0K^IZ<5aQ408=uFWHB*A%@K0bRHpSV+<*A`>d[Buc$k5af]3>N9gt%1\CETZ?Xto>MXWN<o9Y5$o$a:<L6k:2OAF?JSa(3HV6!pbk'p,NHZARiJGQT)88EYLQ%>M46;lZ)JR)^(Y;8GKKNR.ibHG1'eO>9GoQJ7tV`_21WP,JfBaJCAO+Hk\]JGFUMUH7rFf:Rg<jkN;`5KDgRNYoFsE[oi<^S`h"D%1F:Im(MBVcI\:'k0c:7res\sZc?8p`]t$F#R">CiSG0l9DA6Pp(+4`0c<ds$n'?2@JUGF&=>b!i-g$m=i<ZiKQpa6Ke]M!'p5p;i%@n&`tDr1T%FMt=I"i&S+(`o!%NSXmD0&pL(r@D,5,V:c7FX3cd#NiUB$f+EiSY\S>2)3CqrknY9i6P"\iDIO%8.pDZ>)G)nV,NT>%?M#;Eeao7:Zc_?&-2VJr6IKF1AHE6.8W?X[e!V8IaP-4Ia1S;$/BQt^ACKGAFb0Gk=glqUM`jiG+9K&/Z2'NE8j?aWj^g;R&03Gh%6_*pd%X&jWF)8]o#T2\0Gp+S1&s`[/Z<2C\E^TQPLq0Z6@b!t?Z=>T\fU%?7fRK825HZB_2PJ$35.i)s1_Pq5SeeZ%0QL)._M[u7%&!!?8bG7N_4fN9@C0g?i@]CojgkF^(-\Rj%I`8.Zpk"o>e"#?@IuTiPXE+Ypo!Fi;UktEP"^mD*j]@UMa`Js!4X&mA63gjU5@d!`%2o>`O(mn>ZDa267cN#P2]qH4C<e9V@&T^t'T&!%+fm@MckA9KLb`Gh-'CEV*En#gNEj>4+-3DDC]!d0.N$'GO5u*teFJ,#Q;oC*Q%Y7Z,6_4G9sXL=Gm^/rpnfYAsqb[cCN"01W"dgAXZ9=;f\(".cSI4>2E!HB($Lf>(mUNh/=_elf0p_/",3FQJR8Y,pFq1'`,c]Ps+%6sS7UF&fm)+!iM;DC&!RTC]:J;e)B'?3#a_;B18cD%!DG`u,efX_W1ujZ:P[/&Mf>GJS';KUV;4]#rX/gY(ri`57,,*LE&DKZCL5%[55?\\#rDiYI:#<$EA/&`t<[I,reB"A8p`'("R10N#.//7FeE)ZEaa$=-a0R[&%6I>ZIq*$kJ*M1tdRb#_icti*,TjrYi%#fHR*C%USLF^!&f2Fgo"U'-H?cX]9Mk5-tH77lPcW;-0CWnTH^;Cf'NO,+m1)%DseLF5brc=dd?)tk,N6ni-jnNfD7Eh@D.Gb_[V`cf@f<@%:FrmD@RHq'NY!a_\"YJe1b,:Nmji7IMd8m]7P.3';[gr!k.2\8(H2(QQd`"l_.6,BlmBR5INhh_5I%F.BETA&XY=8O_rK`?(]-0T%Fu7:c^s.eHfZufn?rFf+_-8MFfW54P\!6#q]YO!:`DNHtrPX)L/df8;SZ;W/BC95"S#2Q![t%0C(?O=>9dEW8o6>[KEOrI%oaF>V%/pI?Fr)EDR:F9f#KTPIDE5:<e*cBE]BmP_XqAQEb6?.LV`uQ0GmO."FG[bU2FR)a&dj:gS7RePp#Q-7jq`$[oB$%6[/AfM*'PjOS%rN:.V&8W^)%l$0>j^qd`eU_AjN<-A0%5s2(=Y"%h)GX_CU_Z^*Wt?>nKim*eVF]f25d;GVQIeqJ+[/s!@R46ih)p1&UmH+%:FtjZ%OuY?/(3o#hP7#EXB+(-0F^)`[D9h:X3YC6Q:X&\N/(1P1K_Ft"H&[b=Z2ZL>ShiqCHAWNDgc2Do@`:''_@@a.A&s/\d`"d9$gM'K%[aZpD4Ks$7TI\1.r^KQ>]dA[`B3acF+Y';5EB04B5mUGf>sc&2Q8B4!4khL(U.;ZZHpSlKEQsD/GP,`i^tp6hBHJ$Nq"[7DK<%[J%(kNRI!CB?6-H,V_Nd)\<=<%[s*@mpKY9%;jT8(J?J!_@:N(_rl1*dn/X"N[IN5sd3>HT>N7Ma#qgI&`D1ghN.27_7n=mhlnMO'd5%`j1l..?+&X,Uar)F:"s"VT;fF#Ohr5k"RE_YR2Od!=E9uS+IXM@O'IB'g8gG]HT&4cSjVse!fhM@%<0Te-qW5dg:TWoL/U"H"*rA%k^'t0$rIL&9#P]np)bWZRm(\XPS:1UV;VrD]:2o^_cINO<b[O.+&Kf^p(.3ZaF^a8NWf&Ff'\7i`,&>i;&jDqiVZpXUOpe$F;G<B%Te)Pboc8D:N0sI^3gC@o??*KQ?m&a[_!=9jmCKqb+o-Ek&"'tGT=^+$8_XJJ\"Tf`jI3r/GUo+_@;7/^N+"L8+"#(?ONHSQX>-\!%O(j6B5K@+(o33%qU;Br.]+n2p:-K+AC_^t2EQ#dEWhKF1hI&HiKS<lh80@e)[N#1),f9qjC#!&?p."jE>`?/#TBr)ZHIHg]:g7u(%gU1[/&1Vu0q].e,D_MgAJ>&[!:`(,U*R8KGBa7nh"*-80A9jE/nslIHP4aQTfRK8-lPsQpZ(0l1)1J@%iT;O@@+>au+LsU[m6Z>^%6*(">`O9OZK_.4tiVj`Mf0l&Wr35ZBQZ3h">sk>SPD.#b<]^J>-2E*`MjNegblo#g*9+7o^gM_,N8_S(RAu+09:lbh1u&[9[XIZZ%F'Vq/'#&@]&Q;:54BBd48Mp?K4nnhi^trHlI?rn]oNbULNRP-30K#H+/PNc9Ud=2p`?_1a"Mbc[,,JS,##,r^j?i3@:cG:#'Ooal%DU-8,^IHG5D[R_*\s1LB">XUQGu:TiL<\]*qeO,dR^OG5?+OaLOG4+)VZ#7eXgWWtod&\>.Gg&o*`VJ&5;?6Y5%St,@q.YY%W=4(%c01\HH6HQ)IE/G<L2uNU&u2#uoWQ/Klp&^U9ehiiMJ]i125Y6<)jRm5?e'Im<563?L2KnhDLNX0_61mFrbLJ]B[-/_F%o6]WPTSQ%,apPONGbG#d0*mDefZQTce0?0R+cCP=f"_u&MHG^(+DP83VJA7/p!0e]CRI;P[A:"ODBH>,X^uI[Jpl=lkh7T/PutKIsL%W^YM0#%RG73/FBb8:Go6I-S.BP@C,0fmn+"c4-O;=0))>C[BOTaNkS*GSa'aJ%Tod5Pb^bDX#bcVTMnI;3I\1*5\*[nWgDK%m>&Bm`mR1&D%-FFG,<Sm;PbtDTfqLtTnP>5W,Oq%W5=ZT(>NMhX316tH@@CqB(Nl'B,OkB5]bXS<9JTrT7R-Ud)j6n;]O/Nba>%Q`1lp&^Uk:N1V%?0XeaRGTY>GI'"4QTc&4g,1XYq;=Y\[p&gG^IBdP<k(SEN.\Ctk_hIn_`HM;LlL?fnd2]@R6u!5YZS]L^eSlaYrlYD)27AhB<RC<%hDJ]s\n+TNRbJ`N_7GB@'p^G3*o*3<&>VdUMtMgL.%XO*TElXLQ#oEd^<#^83?.i+1Ltd93eb6#^WJ@XdK`i-Td"/KKs6HR</Cbr%.70r.U/8_#Gee^qU=cgp[*K[;j@WAG:ntR#(,*A5Xl*P<,0UXRK9p#&#S5-'!l$)q]3<q()MZeY[uXF'amXU=q<g_rFuUl_2%m_-%K=T9no:oT;`?>Jg=K8:'2p6WP?%6'Z\g+@*4M>[0i4:on?cJMdJ!_8=9LALmX^=c(@d2\Q(e,585":c0_68B"?hUp20/d3V9;u$+%Y]\J-Gd3Cc8>]le3IeKdOG:P$Grr,='AS+@Sql+H`]G2s8GIKhLrVp,U5$t<7_fSu5I#Dp+`sg,UHZ="l4e[p%)g"5`Yua3MkO5;%<GfPcn[mq?q-@M/mCd%tr3igs%o]b50Kk)_s8%NN(,#ZY.8.+Peupm.9i%jTE,$*=ksEn"=C'Gi?`SYJcD9[R23'mY&*g!<$n8"O%L.L':"8!,=>.`P@=]5\i`pIj<i$S<qCfI!C0Y,mhr<A"1!,U<cpsE)=jJonAXuSO5ja*]?),L#S%G/t/.2Lq]&A<fte[tSN<?J-F%+pLsn`9hX/M"`feP;5hfIa%*Wo)J^$J,&L4oH4)&l_"1H^]'T"ptu,7YQ+QOrftcdj8N6^oril>J,RiGs2Y01T7?g?J,f!;iTofZ%I/fi=oq25YIep6trNF6Ps,Z4?O'm21Dpgra]1KD5<gf.koXZ`JZ'2.b:FmrYbR@R1]f;jYbeYiO]M%jMFMc?cAkEt`f=-pD7Gh>:%-PC8M]?M"9hltu:#H%)Ws11BB:Zll62mjn)VKU2>FsjJVkCE6J5=]\m@8osGPX=-'b1%IGN3.0meq8Q18F;Xi?E7WmEUi2TrF.\g%fXM:3V`5iI&E,f,ZZ[>j@fpLeU4`nQcNia(i"_^IfYuI43+BgXj`X9<Sn=-Y)/b]\Q4>@?P)pmD'KuZHogi#b;]%I[+I)iCJr4d4%PaI90"j"dc[-^32[O`6#^IHFIOcSR#dZ3?J'I2X;lp"0>B8%QXBG(30@\$3E%A@H$c]pQ1$sqc,aM87_\"4#l\bOo#qbgNI94p\C%@cl-Bjm=_FBiE!$gY*'f5m*GF,o].A2gN[^$e@5+lJu?X"Yo^jgJn)HE0i8B)i:0oXI,Ih/=hL-[cZTi0X&u#H&06_aB_kodHZ\I%UeZOr:U>!aAo`6-Y)E)L8'.1b:i'iE1XY<*1A2e:aO=1!#:cH=S&_U#<UA]kLJRmg/EL>W=dc0$BaVSs^M`/%C$PEDLq0Z'5L'@8%9/Z#GF?L/Q()+hNGJo"892D+[>*%/bYgXa`aaPt2i35!]?A5N1Y>+-Dp\l'cf2]ef-&dK^6BHNs,\VP)$$HAa;:Q=9=#m?V-ROLc%RA`7J)Q.*F@>[0eEuY;hM4:l2C\WMI3,QsW[2*C(.Bq#EcglXO=XHPAk"%%l\ZYTNaOs-Jp=G,2Xu0q6AY""b*BrLW9e]C`=s"o$%_,P;FaXM3n0b$T-knF_QAMJ%.2H<a;.37MMQncc5^WW-5aDihc5Z[Kn5;Cd9qi9W<fd/*&q*agVi)>Bb\6[2T)DTk*\'2N29Z&!r%Aoaa2FR24c;<P(@/1_?BB%$"Hp'8TGacU844';jrS=Ob!#cYqM;5W=U/%%j5imJ[KW2m3B($'Yq8UO@&.Mu86T:SVL[MfGmg5#nK%</)G^EkL(F@@!'lll7X]YYQFdb+0kH>rd,sLolGjNEE*6PB8O_p*;^;WJ$K^8D_RE&O9/eh''87Y3B)jcFkDNo#A5mJ!_>@fR]R.%J[OQTpqC7SgEC*k.9&h]"8eN,S9Q5Q&bX)d"@prt?4)n\CXnRS\%KMLh;Z5s(SsF0+iPM>m_KQ`5;>K4DRK5p9H0:F+[J![^u!If%Js`k\GfTIUm+AG,%n$Y*8,??C0k^##J^CO[D=hD2+/`WK@>`]T4E#3QM96<:17.DHI!.!UITb819*t]9ptbTd"%ghT*jGAZldM(C%#N.J)<uV4o?R,9Y\,T\a_V2TWYbX62-$)/7iXIn<BZ/b'9LDJ7gO'qo2dq!UgPGO"[\74`T?)FAp)g01P=,60mF#p76Vf_<Al5U%%/`,oI[JWIZgeR*<<2(Ir=\6`aGF.'XrC=lo'#2;OkI02Q"Ua0gEe4+7@_b\!::@_!,pF\3>0a$<Ouo:rUAg[&78M._XG*_BP-q"E%-g8&Jkpb<TE!c)ULgdjMScAk)@VG@-h+NK++PmpP2!dG#N@-9Q`Dc7`@K,Ud[u8J07iIn,2$6t49DIq-HH3CnWq/:."a<DI9.E"l%r^:^R+?U$0DWVME4X`ed%>K@R4@Jg#r##C/+s;f@qg?]!U*oYhOh]0bm>%Jh9X^3Z6r-kG>uEdi=nO6D&"(sL`6mI73Y:A">msZ:%s"HT!b5j4*QhW54V:9D"15IL[Va,YG>C$q$!Rcd]_fU=JlXFUj$0%3AKl@g`OJ@BgregJ=hB4gK4hNsr8A%bI-)JKSNes2GQtbQh%V9KO]5A_au^I3.ajHl?,0>t'BS)?M=Y)B*1O-3*;Gs*W@VdUZ[L?Zjs5(AI$h^1A(RXGObMK)HNV/k`gpJKM\D3L_ZZ(n;H5Pr+(%7!88rdrGcj6C'C_*We[:Jqi<56B%;7#cUf`E8pC2ABO015Z'P3JGUk:<BVHVJ/!a!9=Palj5_MPkN&l096?Lffu@O\')DjW4RlW.%GG/Bq#A1O<8MSH/rkf.ihK#OjgH'8,0Sm:n)-LJU$,NO_d@rru0YE(GD2I;0BoYU6_hu#NF^-GA@YKaojEO5Ph>rBGB/bCr$Y%'2%?uq3<&[J%oM?d1p:\^O&@F&$!rYi&'Zj6ZD"DhMDmPmZ,S=S4''&RcKSDV<b!OMDu4g)8W,fICQ'Z5=b5Ko7TOf0Za2V;/uSF7Do%[.\dY.=N9XKL`OpU;]D^Qn(qVl&"3&W@-73^NmGXN2WCRm3`N`#fZ67Hf)'arWh$@DK1)%ktMm<FLA.opU57HCOXHQ06rT1=o7A!%mQZZrR6[o+2Be;P,Rr;m<b*qH/jkQX<;\ee,d_7qA?MKjBZ/c$]$0;LKm(EP\M,0<6W#FqhUsVn:.&M[ln=QmV<u^U?BDS-`F6JN%7A;t=0Ha+;G$RYhL2sf-P2,Z)4eR"tPmP`m`9H_]c6R.i*e*L(JfY%7]?jZGZ<`9oO\a2i:$;m)--Mf!p4Bq;:;m.LjI"5<%I[3.%^[=Z3"is?c.c9BMFh,\"0.\J!V,U3dkEC:&<cq0&U"R"IV(`S-nM3OG[YDb"<_"%HXb*[`3Ps+ieZsBM#!s)$lBaGX."2%E\6_q\%Y\'.kn3.D-/.utU&RQ'ZUp5k'h\tpH6DgC[E)LE#OOAFu*f;=WD0OIfoI(#E]Fa'?5%\:(S/T^Sk[P?dh,C;Bg<LP_B/_*j<VofL%Mc]hMgH@8A3@ih].G:30(nRA:eg(Q_n><SrP#LRSk?]e34apjah6)u_)'."Zbk>hJS2i687sIO0&*t>5jJBdsPVk.\[P2?TQ>YD"%mR]7%qKo6PZijj_oFhTa2oIaYakGQ1<;2].NO,ni0LODUKg+)SVpcXNhD3D/GQl[p/%!!H$NR@GX+Z=SD"dh`?R,7S?)8PDJclK^%BPgs5#-:jPP,q@`Ui2Ub<O5N(AJd,%G0SM\IJQFqXm@#C6D+Le9%XaP>BW>q:[$W"aX1_lW`+AMeOKgPQBE;B&12>Pcn\g*9e8Y%%XI+HGY%sK7HnQ@p*PNp3JT3I=+"#(X->i)`j'']M^Gq?p+XmE6/D]lMm4Yo1TDDr,">C/7!/5m+7S%s4_].moC3&E,:b^X"b8c1t%DSoXZ"b0%VaT7;.!pEq#6h7ERbq$Ya4B_Pp?ZhpBp<OebG:8W`#\.sEm<f,C:;O7i,eKlI]9u.%(<[0W5Wl<m(@En?9.F0@'J\nE%qJ2ITI@Qh!A!=9ikM?"U)C.G$c79gXdrN4Wd7je4XKR-',\_VH%0L2o%%0C6JO<>DJhTug"?k,E?%U9!)R3*KkV7/qH;HcTS$[il%.f;+S:g&R]5&U5uF&dnc?#kPH3O!XtZ@n>3O?l&Ale50ChFa&h,!Eo7@3YCe-HD1JlE&h)ebabDOD\.,<DQi5?1+YhEkVh[BM#)!%kV-Cm:r?ki6AIB[e(S\k$$r94l"!l9&US^B;L=3`<^+d+b[g*?D5U?E'irBgQVQiLX;p!'X^2Wl&88IH.0=X[18`jfNtHG=NbuLs%4<D,h-/=INYl?C9ShXj[4>5R[:j4Jbq`3/$[u:1fqV?W:\qGf6..f1fM4E"KF?(kY-!_]\#IM^Agp4[allGpI7))CW61^<n@Hdh[%T":1Jn+dR%G0Hc.>s]*S@eQ$1KN'7>]#c$=k.6R7H@(sJ]-noOAse=$S/J13X\`?-481hD8'Bq1%_^?Y9"/R#G3bdSOdj!;@'8`R%j6KFf&3K-`FZ7:iRN/q]GF<#lNS(inO30iF60gAj92Mp+WiVO@Fm?/J\,;&mro8Ns0DRj=l0D(^!Zg"'hP:M1ou(+%\\.>VVii[[%At4hYLC*OYFeqpLFh^:h<8.:o[b@^XgV&'9VY\hml:,YH_gk0UA3)]H%=O=;.&TIbrhngMCtW/?(Ab'H:8LVE60lHJ6W=E;e9m*O%emHhDIa\ghCYD\2VgoliRp?gR"HXbu-@Cc>CJ),-ge5q0DO5#m:<!4MoK6(>>lUXihDS8#a4,RQ7H0#W/shG<Ot95MKkk4tP45R#%eN&?'UH1>sb0EZIcg&bX9HpUB'cN4(V)W[kT?Lmb,^huEoi^*%L1XB-SU'`BPk`qb]K%_TE?idQS48Und+RT\'P49X+'6u8DocRf%<&<9.O]NV(p*WVJW!TL'9f-[9g5TE\1:78FjIc2OQW_\rBTPIGfdt*>c,#V5-iU&h\5uGUit2/&QWX%#O%&5UfUq<f<Q)'*j.Ocf%RY,/#@\OnCr1OpV&eMHQ#V$*3ps9b-=cU>#P>''#;1s*"e^a+"g])Yh&TM!GQqVraSEMQ)(V$\cEmCsW<5@t@q15Y63<?G#Ys_DU%_:(RcCGtPor3b=D,mBbTRHk^QTc8*61`,Fs2Jp[c[k0\/U+3$=REpo13e#2F/u,JsE.>U%nr,(S?.^l9N'9f=d`P+UXjukeS,>*a%6nmH_PBgl1R&)B=i2S&coZrOj87<b9\,bL'rtF*X,^NJ""giSD.t5aF`lN4NCT.o(qrcVb5>R>]"\jf7j&i5"%C/!c.QOi=0QJfr%2P_W$F!gl1+1%e3p#=3;a-#rS!#"g,$(F>p8Uul]PH/kMR2pN=FK,n$o6&&d<$uI%lm7lfQ,>ut98Mp]eWu"ZZ.[+7d%c\O_E)<g%Ot``;DdS"C,s//UFj#9$9=?156`J4ITerS&@$BfKL#jTV?EHKg#7B,i.[@od;X;jI4EX.Q&E5Pk')iU`9'sbS+_6j=[jq7`X!,<_%IM<G`jJ*jgghKhuG'E&3Ma?<++d1/UPf%U>7Nhb1H"FE/8);h2h_]4s-Fo%W-'?FG!G-1"6#D@81Rj`)MPpZ3Ed%#WWn>li(dFH6%N1;!,*#G]sUGCLD&t:\9lHRGAXPYR%U0,@@$*'EV98"h]CMb7N+O&G(31=(^1P]-ODit%0Wos%cjnPTl^MC)'J#W4]CZkWq#/`hV%$m0P>-200cri8-cX7E)ZTqUKJY**;g%r@L9!-_#o=N`U[n1-Z9Knr1$Os.:]MA9(8o/ZW'o:s1c8;drh?^mT&emH>nXQ&JbS5*h\%.R"#bV$*Z*ms``i@8g./F[!/A<ruM4\$b<Wa&^qBj&b5PRr"XK(o#04`EO%/1]T]Xg0[a_n-_A0%g:TKePc(Qr$#bS>W7$<[5$nO%Z<Ll,Q@+'po8*bs=+!^($=RNhbYA_eO(p;^`if9C0fs7]>SOXQk-llt8V-qH*Ek`)!%qQE8EFMQW?r^-3e<'L7WXc3N5U6E,J/f>%6Q;.$22p`cHofAbAVPM/QH#H]Wc.#OjaC.SpB#>n0E'p.ZUV4RU.o/E.A^[96%(?*QI!;DXtcsh@&lY\*;89ej%k5g6:Jt]P7cgC%`,1`@B#T5t7lS@s1aceo#nfSe#Yo/Krq)[/&>%r8=1J$gGQc4q8cY\!,#AuL035St)`k$gOSm):TIM+.Z"2_p]H"r:rO/!"R$*0:%OA+kV^S^:->pC]67r$IX0@=,_/a:CuBlhK^oL.KI"QG;W6M(S!2EAGsIhU,P5Uo1abHeQ#KnU7N<qPV,o'ob)5Tf?6eLkH<0=Gm_%.btKS5?B5=P&u;UD=$+t)n-+&W?U,d]\4((VC6+d\O+i09[7`"4!@nq.-A1^eaa7t^*j6X:fYM->a7pc8-iqQ*3P$P`-PD-4q9Rc%1^?!aihBQ"afF._L8f\`EEoP=ONI>q5XcuXV"8?;`XF7:8>LcGs*iS8/RkX+'f:iu@eO"qq+\90k/Afj]f[E#YB(?jgBKu^"X,G"%0A\)5'hZEDn5Wp&l#!Xt*WU5dJ@5/=+A>"F;E4C\!<%kVnV_f%?EsoNDg\X?bQtb`PT]gf`5rA&hXYIKgM`9sV4jZ<aZ0MMk6@=r%1W1Fm7GM4g0mPR\/Z_L"U.[rE$pH'3%CWQ7Ia-Q\,&<8O(7D>KUPQu,]c?"#C]"/R>W%>dYK@AAd9laJ/Kq7HSe4Xu7=JQ+F95"A%1%ssXXg<:o3Z#moZQ=VR@)O2rCNWds<N>hrIV_ieMIL301+?#p(CY;rg*CgW;Q"#$<Wn(%/dQaHc9))>a4e%jT*B6BGP4rAMc1J,%,tTM`Tu&=MGtpY-MFa^sfSHKqr('qZB-YaJrO,Rm9_TZX#+;7$,EF.1>e>--K-aO5nW()1YfHg=kO7s?;)`G@iQ^2"oTK/nZVH5+%3_I**hrkrmpqDeZR(nNbbsI8iHL*^XRoW;"0rQ]Oc&l5?cIGNU-pND*T<\OgfsBQoACZT*Pgu=p1=B#*F+DLdB8!gg=d\?m'9#(A%^EL2ab@H`5X9gtAp'Pj_*'I<WDp)bdnSP"t`D.C*8!5N6;1":h]CLG[d=C=V,EeMkd_FR4fe$3ADGt).h72ZkF%>$-UO0akfYj1&%7Ch83j?*;u7u-_id[2"%Rd"N/X:fPE,/KM="=O,Eq#Xi6B8@1TePV-@L4V_>Lc%"OX1Uogfl'o";0rj[#`5TiEo'P4<m0L'?uhW!%O#AF_iBKZJ:_YJ^D9-AiIb2BWNC&\E.B^`1oM%q]X:E+93W/'Cnlj81+_9Ue>-/Y@E[G!rKXh=b:W\Yg0`u%?h5.$4FKE`q`m30&%U*m_(WTE&gkM"M-bc!`0NJ\8cl#KTZW0(:U4aHS)JBSBZs3K!hY#1BEGX>\>D3ku1@\a)BB(f*`j?l%r4Wl$qU)FYp?LNe]SDLi.%3D!1qiuL*2OeM.*p<79@&.'bnfP=O7n]FJ=/k*#N4@g*e>Ygmg;Z4Yqec[2Ga>n"'r&Jd]9D*'rm@ea=D6YZ>s/Xk0RpVlp#%;2q%[_l`aiQ0(F;Yo+_+e??SY`#k"AW*nNZC&e"32P55Hej#E929hN+5,%I%Yk-p:_Cf;jWCU"!2Ba#eZ(_P`NP.*Tor;PXnIiB+fqkA%"fJ6DhYkGWMJ'_Ei^-g]P%g;/WXO)'%&D7p$A#)*]*:X@jrf=1(r)as'F*/Flmmnj<'JQ8+H=\jd(:85m)ftigONk'9lV`=C0#*a%nj:\VJ'h$:^W#hi,Sj6@1"B!WeS!cggR+h!?N"PTOT?HV?%q'O14p!WeO#-&q@a0SC0g2gnE!?QgqS/sDj,Z=asD.]CCh*JZ9mHJ%AbkF=iM*@h[]UJGP.Ad3eZq.Z3!!)I+E@-9$9=6_kPX+UfVi\!#X=rpqqK$N_e>M=5#ncV%Q"m(Ms1D9e/?R!WWZbRA-Y)g+t@,7%X8N`?2QiiST!d%#_<`NXoq]h1GW;\XN)k,f2@8L;P&aafOsq3sL+o7_\.Mp*TbLsAG/NlQid7/H@YEF@Pt^XDc<B/"J%o^U[/#h%%V-4Ihe2K5[<XdR1o:R)($r`%\D<a\bUuGjsjiMkH`Q_GMT[qX2?XlNdMH5OV$VNl3rteguXY6VG4@aLR@F,YIUMoNWoYX0$0IF<"%0,Jd84RJ'/pZd]I;a5X']1*6%D8`CBU\XUFL\Gj%PP4@p&B6IK\]2gJ-ic*d1+7XgiGHi@0Zkj(Kbq.3P&EQsB8e&2hSaFJ-?gP'%?W/J;#srA^+if/$rJEu:T'a9-O#YgW_+Z5Lk>\_3gf,Lcms``i=W\<T3%X"F@$m61?5fcEZ85U&N_aGN=7PRnGIHa$n*?qpaElS0%(b\(7f+m,iCsI:>B'#Pe3!$Wg8a.(.3LP:f#_Cu/#\;X=Q^n1D=LOBiOCGS[.oEaBTl[taZ#))"5e=Ph!a"@36Kq9H%I$?%^23e6%ak@JDJ4=Ygl:79:<XY.J<f14J_/J%.s2lMA8eAA'Q&oT+pMqd.,hM_Og1O1&.4c/]a[I.P8K<;I&V[ie@YLMkP+"M\n7#/QTm+7E%>9nbkm'Z\Q(#dTZE9cq4RHgoDYuHSI6i_>/[Cb$pJQ"=eB%KoG&[1S+3<qG,HGn-OU\Vn/715dK':*nKkgcgIDMDN*E^F^j5d&Xa%+r7/J?e%i5@AtUE=UH=fD!9^DP!<LAYD_N6SptC2SYa5n0XP]^_RR*uFS%meWU6L#P@N&qpQK;+2-OV?'$[9*NJ(8F#),;`bd^aN%;<1t0DG+F-!u-pTXfgJOl#bN0%!RBR\=?9)\d-CE?P1K)@fm46TmOOogeK5J@hk3m;P.$LA*'Yl[&8%>=djJ#DV<N'3%:*U8%*.6%mfI'6P2ck_?;s\B-`&]-g2jZ<W,a3V)"SY+l/[OIB0^0?SUQ6fL9+HRilA"6O%Li\>.;&G:"?q&QCaZE?$fQI*4!"inHSeI7]2__%,6CP/+EJH&"mR'iEpU#Rm$SRaE')rRX9MV".V`2_08KWr+1#Mi%*;HY1Fq%C#]\5mf+JfU]*0"VUnJ0m9ssf$/1HfY;CiO1TAata%fsfieZ>lnc/65[ZOcAR?S0ki!S<$ZQi?i(`)$@0=Fh-Y]7BiJbMVJbAU_9#nlDT(6Z2[+1Z;!Q`/D"QkFjo;/BFA<k_I36[1+q+f%A,I)glSV[F?Lsp%n%6Q[UMIX3H'#qNU.con+nu8JR0"Epq]e$6bk_nX'QEZoXXB"BMU[W4YRKL]VSe6]#XJi`gkF"%`Xid7MA&IG%o#Z5X8Hdj#dncK&24HEn#iYeM]WO%p?h^CQ8"+Lq&[O&sT(-Rom+h&5BHk1`Ke?@-X?KJ7F/!Pqq87nYFI6=98/-*a6@@-g27(Y5%"A.geG+q96*,Spjg5I<N0(J;hrF&@1*5+rmSrS$ZApR]]@oM%7n[$)uboo;qB.UCm>Qk\t*XHZ?Zs[VAc[,<Q2]ZYLM2Cgd*#=Pb%:L3pMZ&R7ta5QY<]4.)LM6+(RVYX)$'3[,%Y#^baM(-7IM55$kG2JcV;CB(G?!Uf[MHNf5C1@1LL(a[#FClhC//NSpQK4P)cPP7L%CC,Io:#2F+FQ:\sL.F/'oC65a]8"H,I\J]]CS!:G</\20hQ5jU-BAjtE&;bd^G#r;l6b4tc:O?9mKS]uce\E&U(>Nr8<D446m`5*%bE79WQu"?p=i*I''gZg`"?!\Q=+,8S?jdd:.a/eo"Y".:ILU`&kLS6^q`<?Ddrnt?EOIcoVGK1'*)u^MeFuBU;rms)Q_/fY%-BsR%Io49n.H77tUurIq/F5ApL[]n%F@^,6#V#1&abZi7D!mJnk>Uo3N^GEZaZY6L5$+g-&sa_AXu3*!I7sjSed$H`g[?%;l)@2cXF0bg%aaMp[`E^t$b-Mlm_PF,=_n1UI8UkYWmbTO-0c)Ll$CC/>b<a48oeo]+[O%+3DP?f+68n([_'Y_:b,Rbi)S&i5blKTqo3ja6Gl:Li%*;"(<q1COsXbPhVkhGPE1hFT[^Mm[_Ki^rNHpk'ZD#U&P$hht1`NN!3U_>=uh3A>b)-"THdN,6CSRJt'RW?n<#D=r.?bS=>lT49G%f>r>B]&*=aEl$Ylb7<sG*5Hqi/s`dG,6p@;U81<JIbRcTXM/]f(FT\L7HgVbE*Ukf+k="88LC9u`Vq-<kId$]249GtCDJR49g@bU%m1>e^[U>M6lh^uSR_9>X0qk4[9U2A;($Xi]JK.(MZV%2kVNJku=dbUUOU:I*mMr;$ft6.MfMX]Pks/P5OOb.Ynt#ra1Xe<PhIECQ%k16&mHV:t)U^]a/^aG$rCuH]tj':C[!9=E<p^'V`G!No&/?DQ3FgeC1*ERj2N0JJ]qGKp=#%N!G>mbFPn=Oc/naILop:CN'$>DKi%A7&W.*;N+G1P+-k5mh-JOfX3Hro.2H0P#7R9-<pt3Rc@j.9(Y_''IhD309_'a7iK$@f,?N<RVqB0#omu2-=ZGk%K91XbdpRcS,":%?_#N1#/TQQ:-,Xha3LAk^WdF918>0iGKb!8`7Vt("E]Ml^tY[<F0&iKP-`7kLNhEdX]Y=n_4),3i(d!WO&+SOEk,Zd$^#)8<PDS3%#gJd.ZJ!p/8sir,W4]R+`5QA&Rc@]BGai:K0Bp8FG#GuXGJDC$@<$Tl2P,m*hon3K9++k&VpVl;FbqJOCOTk%=]<JJ@W2W_K;+^[%K$\Ddksk5\A_DWq9q,!<'X&Ej2Kb?eNkDdKh(R%k-cF>TSHncKEbe)4eYVH#P)`uESh6GmV4i7Nc-rjD!Kqk0c]`:OBnD%WF*&fr%6*`0?$J/Q1s#a>Vo[:G]jWMY(W0'C`:Hq:.(-!u/qR8nf)J,nPi1V.4BsfW=%iaN'4</E5^8mLWfpV;*XLMAub9SMdn<mUk(tu9L%KBggmhmQ%98MJV$p_&Do&>hie%<+fe5,GC<=$Di0^7IYJC"8bUX:%mgS7&q^jB^Mc$s/8]70?$q-rNBd;'nV/85s&io*W#/Bf7s+%V)h3g#R(*'WWejpktDlAe+j:#f+;bj?2NfVlEs;Ug\ssgNp;iHa@hqs!5b7KJ7q/G#\!tTrE(NlGu`d;NF<!)]AOO4H$k3>I'qET%,`Zqd%ZZd;S`\NUr'Agu%Xl"kVOj-LpiJ?:BPp*h=Q8:I5E^9BMB]?pHdKB(K;8M;Z$3tIqRe2^:o8H9/K1L9*XGA6,SogZkr!ST%=8BY:qF]Qq[r#[mOYBh4"-R<kf;g@U;/-8g,g2o5#t%5SZ&,SqBTia7RW=J\W+a<)CR]tM?qGP6DMc0;oLkdk\tGMO58s[Bg8oj>%;C:R:?Z+qM>cAN(Y+\L<HeA<V"`r2R#l;0QD>NAorI8S#U;N\H`)1KD=.Ia>[SN+I6?Gg2C^PO9d>91Fe?74Y1c1sZ7#ibVLIFQR%Nl&>'0nC*da"$YSc,jii7j4]j9'Yn\qhh8g@g%A;'"M^66=h=a5l;KlH_hpe(dQX`]%\2U#"+H#hk9qcIs]GTk$LV-rdTl5Qnt2t%4"D]7b)LT:8Qr*M&:O@!-tTMaF?Cb5?]&Zf@mq!;Ym$Jf-CT24YLaP+!DVDj`t0?!Z:O?6haIA`:OVjr%;.+B(r@3eOS1V>R8UJ=%E%o(>^Q4jNSh4b[A`K?b<@:SjQ!W^=N*_s5@P8;ki]-lN-n`OIOY>oWUq:ldF>Z]mUPVRNi^>/Zg3LMFC&WpC?`=-S2To-9hm#_4%6C[X()QMiOcg#'kbbhfck.F]66.-4"J*^8Edcr>7W;aeRCQ#!n%>P_Cc&.Bpe4V(7r+h53]dEb/KaJ5eq7#t_r6(DNrJX'UL,l`Z%76T]&,K"-"Y`NhM`1AkIW@4Ph8;>/?K&^)Aa]il/7m)JB"t]X)9@.*<H\d,Db_8rHRunkJ-3s3k;Nc-m;i7'aAK`K)*'CIkAjpRb%ZQf3og_O\tM"dM1;E]J*2s6>G3qg%,SnO0h/^(ouZr0^M:HWm81\sRDVP0)3"1_I5o/-Tr[pgQ1Kp9Znm)PjoPPeQP<'oNC"=B9n%-<RD3%P**%RHqe_Z##nPDCY`h)EHXjX#+]4mhQ&0)E=JcP&?H0\B1\gf9G)i-`4akOW66)A\uLYZZ!TqpkEi_hni]qDW#9tEQ#YT%oF?'Db"<]kZ.@obZe1NFI\'`5gmV?7'I<(Bqc_pOW+?NDr7i*"(I_k=?Hd=b_Mqd*Yaj3NS1'S.#?ahM#VH2:OF]qJ]\SfR<&0:W%M/u9DqrEEcl^btD98%)[NSEfYU79gXe?bfc[@=UjG7CEm[%DJ`:SuL5_@!$/XPnZa+so!8:;XRodSD/[e9:P[+LN@<[<d6FTsK:g%KYoq[D%8!tI3BIROZUu'W_%A!'nfhiH%OjX^''+2C,V+fP^e\aqp/gaq\Q?1qdG5SMACMR-t@#dck&EeX':Y8=*g"hC!i/s:g$4>%K\'/1?dFR'@6BnJMU&Dk+W56tjWPDI$dglh]V)E7M/u</X5QIllY(IY^SW513<A"u4'uD0'=O]<$"#I28_-u^*X8DM-l;H.ZP*iE%f<5J%</:'U!fIF8>s,bB?-%*\9V\7rZ?51f4J/CJ.B@DRl11*jTOf3i*S\ZIgXrG`Cn"s,eo;l[ItJ4^)'K=,M<qDXHi"qI\%o+V%[V=l)q[K5.qeO.,2lsLg"3Yhm_i_\^M[&3_[]:YI[W]mnFt`;1dmretA%;OmY%5,.kCua@[`F0A*m\&Xkh;IFc1)8kS)YYF$nI5U%/4:CrLb)%PLi3d*Y`RQ6fKZ&g:fCD*5n4WlX3@)=2<K?2ge0tc0n.'t:k@PfW5c#pCi^(fQ4UJMe#Wq.*D;20-Ls4F#&&lO.Bm=l%d+coP"2eXpO&iq$5S=b[`EnELii8T;l[fB2;%eWe2%#,fE@1B$AqrBNj[OR/m@"`L1/D%;K2Wf^ZXmd?(9o&c%Z?\e$?*s2,Qr9)%oHEd_(':nsrYi%#QNnMf_AkY3"O)bZ&[K^;3L_6VKg[tU&USSN@4G=TnR+*&[_Q;25T5j+8-ljN65$K@L9iG+4^bF.f%h]i6!:b$%NaMsgBTuO:lV:u?NS#1D7d<K0d\QG"3-L&@fRK84:L#XiJ<)sBatIeJ.%-n4,PrDg8e5>6:9,]9mo_oc-**Om,:oKF3Q^qAp;UR!%90GqH8O'TC\?OU/dTjq(>5T%cf(R\q]hL>Ze_a8;>sjA?R@YTXA'JUn<Yt/1TOJf?+d!uA'7)Gk53\NW*i,-.;]IK.N\hnp#WF-:%^IHFiq%8$.)66/^fVJcjVIKR6HCWK6Zb+p70mEkOgKB0@<74Z;c:'sc[TEpTC-H?+k1*!1IN@=L;?N;-H,Q5e)6Q''SrB7:SfcBA%$aILdM!JK-I3Z(<#OH<(kb`F-<ZAf4Z'^6u4]2Vf4b\UBnPQ:>(JVBW?Bao=R-VUEcL@p/XS%IO`IoMfkA#$!ZG/lQLWo%lp6%I#%ABk4,-Z5<3rJ)im`)Sm12Ao_i^_4iP[TY5M'd)Sc-8;cg[V3"<&>,:YlD/;X>j8()&8I)jHXaZ@>*AiGdMHo@(.&X?fUCG`2-[EI%R<rC<FV";+KLS(UhSc^`CV%?5.-7Z]]GQ.3FmG4Nom95\l8O:VqeO-E/j3]tTc+M`m'uBoK*u]3hd)g,A:KT+gIg=r7nFEe+ECa-%k@=O#NgtP[*\W[(VqD7[l$GjOE+8%/C]#ZKaSg0("L%0q&UWE?A.JTCm1NK!qK6R@+T#rmr.77@s1j4aor:a6FLdXj(GFial[Z[@%R!X,/hFHR?6Ql8A`83_;ld+45Z6,XE1Qq9hC:6+oU`411!$ukp)rOha!l?HqhVnc._g,NP1%tt*ga3KU[)Ia>@oL`oXsC//XPH3^%3>CKM5jt<0m-4]8\pT=T9+!="?(TLC1q>Q-.9Q%ML#EDjQIL%?Z+%'llP;TPTd1!qnhZBN)q[giEADeG#\i_6kJ\`q+s)Rgk.7d<%h+GsV,_Yr42pB5>_sI"Uo1^F/`pW`VY9:ASDg45*R[U<Qc4sl5c6=F-h!u8QfGfs'.U']fdUM)I<%#oS7<LYIJqm]An^TXs3.lrS%Ce:o#T:!qL\8%I[F="/4*_jV0Zi90Y.C>dP*d(aa/4R(pIYIX\o5*QWXP!HQpf.!O=:!\SSG_K'`+V@hf2[,s^#1Hn+?h2tol3%d%+/[*q<Fe:V'kF;BVHAfp6DQ!3IEcZ'3Na665++]2#dtPQi[5Mn.WXphg#h[;HZfoX)iD/\jWt*TS"^J/cW.-0KOr*YBGN;[2qS>r%#pD]+IV]cmL]BP5[%:=U,G1'O<J"9iM:B*:9-aNr,(dKRdVeS*e?D8qSj&;82.A`g[^jWVP0'D.+F%r9Za'Na6_:dH&X+XQh:&hr%*Gmf7\0^`I,'mG\e55cgOa^3Li[!)"p4f_*C^%di#\0Aqid4d==C7mQS,p&iceW`#\#)])S18KrhI-+c;EK=8lXI:i+\puBdXA:k%3P9lJf+X).?Yj<=oi?LG8-"`(Jf#<Wi:4>4Cj92Ed>J;O:;l2^`8]\u](97VZ".M]?lAg2MuAG,GmA18%b_AT7XKi*1Zmg(he3J\%-!CEqMllF:IM&.Hjr7gGhL;a(eN,SYG3Q+>'9fZ\#Um@b+fK2goP=M3r.7GHo`u)L\dc/aWQ:M@)0IhjBIpRBM+H&."0Z/?pXb4(%%o^$P`EqfqJV5cJIT1>j108?Z;o<""mLd,C9;s-WLaQegOgaJeS<o]V8B$@@fRK9YpK](I[JJYUcj2sBS@W=V(o`ddFOLMQSj7n[%V,?R"?-Cg(]129>fl_O@m2bG.\8)69m0]pRrrY#jAH-$PT-bh$]ic_'C[-c4'S;C/l(ds5&_tDmAYaHaoU4L#jD`_DG$t!ad/=/!%Q6N\^TKpuWfj\e2r\90/^]ufRnqatdN\IP@_d#utP`=Bon:C5h6sc#gH_[^ga?.OoU;1k\\2Vd43Cq`>6cgOAMs7L&$5*EXdJb&h%\$7@l$5;Ib&4H;\oZi1X/GhIi&_H]o>aLJg>JXjM+\n`<3ir'9)uC.%`4Vq&1M`*92UC.3YE*Ld]/LS.?0;eQ"9Z5R!<_C6p0Fs"%US!pSg038RgcPqO_sA;.;fWSGb`KQTd#X4>S(KP7!S.**+WLk7n:@i^1;kUR.CZNB3C/M/5V4TM3.frb)BdXbF+phE_eRhUKiQ1s%0<gs6lODNS,PD='?6e];dXhDo@W&&\H;;KZ_ZV]23E41*_PZq,Sb9?Ek.LQL,IT9S*r+"=B8_I0=oKF&3*GYW)/k"afGfe"B"9Qb%N8]A,cfVj/[Yg?3Eg:H0,BhQ_U,<)jibL7lT2b@b<6Lo?,QbZr2G7KR$,OThd@#7+*jlO2)[pe_0R,d&f8;nA2jk*ba1)e&<DUh=%=V6*9ag":r;K34GZ&c6/Peh<A]^1L83T_kgDKTI-A'T\g?!&kIk2tI$c$?!%FE3J`nI"i&B#NP6.4t)\_H.q:f-Bae1mqgu\j--?%O`>Q_hR"@tLPX2Y0f7Y]/BhP01B+!X'X=JKVa<_iQ[P6Vd>5=cgGLr>Jo+oKHur=S.C!(>EZt<q`8"8#koM/@0Et\@eMbXkrkf.!%DrLpN[XN,9K]>rKBNsuc\%7:Tb#T`$8m>#j>jdj?'?%TejWGXA"^CN(I:?'?oQO2ACrlhepI<C^_j4;m4kdK/ad_6&Hdd:'MGV$C%U%Ael1j5"IA,]l(k$]O,6KQ/u11N7.K7U.?`1jEbb)(D4b]CNI6j%3Z%YPCO8r2iTrYdLMe\4TKP#d.2c((HEAF/@Spj=WQ0=5cB%[br.!>ULl:EZ_)'Yc6H?DZ:]\pDo0*LKj0%DG;)(%G>)5k2cpPNj1V;h&rSP',(H9po+P3+i3C0Sb9qXJ`X'&>YP/0[J,fV%JbbF%Y7Z-]0WmWMs2jRF^$+V2.;p/q31@;9P"g$n:*1XFi,U6XKe*U8WtFr4@0p+mhYLEr]g`j]6e8Y-RAGtb=9`!%]M*8t-n1JT"7iIP%g>rgP[Fc#Rfd$.[Ui11IXPi%s@NM*IiBnZ6F5&`&3<W$%8G-sQTsIO,m5oX#:$k80&l6`,7BO(9ge(`nM>q`TnsGAaS0(O1d/5g_%]5?Vp]P\gF&<c]pZOG=tehmWC.?]W$,\CCR:WsJ_jkXK[@YukFA"["rg4Qm@)mPhB,N:Fpl<88Qg(RCjeH(>32qq":M.&`Z[:S&9%R0[Yk"ch)C,PLgG\Bo[b.+K$`.:e4NK![5k$UDYo_?Gi4^EXeX-g&"uX*Bl9.7%;lX)!2[a8Wsj=cBPhaG?(eJ'f_C[91&-n0cON%=H?3K:Hd=GEL6YcAjIiO#\6rf4PCFK:aX@K@eGFF\0q@DSB?V>Ka^kp3S*!gnd:,M)QS"=Mpf)#N"K:!1mek5j`i\W7N!q=fm]h1%%G88UC=S3)U<KKT^m7L3I51k6hMHIoSsX:;G3Mke=@MM0)do%jrJ0Y-Rop=T\.,O"-h,k@afhkT#iG6sMoE4qEfrFV?:+L3*\]7P%Bu]gX4bl)rkF5]s+9J+(9iqDf]9`E&8Cl$rAR-@iA)8>/FJs@=mu%'Gj,0m)F^:N=/)gJ3<:tduIb8*/(3`L``;1a=9QfnDP1KtA%FN3p0jOWRO#N:O8[CId,j&(u8#9YUiZHnB[J!_3Og$D*Y\5S&M8I>l43(p1-OclKO(EFIJ'Lp`uEB%.^D>]7dD3&2+]Q&t\XT_`[%B#q5Cejgl&C,u+Qn>Ja'Z.Y%jE8pgR@TI2FRARP&D(Ubpj,9lRnX1`5L?!*1\t5;>0B$Cf#Ebs7G#rY_0Fdn!j+mq=+A)Q_-Xr@b%'6@F^><ba*WB4.G+=2M2a8Wsj4k#.>BDJWF>$<FZ_Ld.W^CP.d0eb,$<rUgZr'iQ?qA%lEZYjUDgU!:H9h%9=>gNR4GO]QOP0?MN%qihFon*F3JU%FaE*e0;1>>C`8>pX?]_uVd*jEiJ8/515M)6YN$eWJi]gM/&ecZ.$;jZt;4_^7=p@ln;i_T&c;Mr\$Whb(73pA(>?%pGcoUrm$l^qb?CYU#Zeg$A$DI2!8g/=&U!Y)*/pPUD.:RCg)>%Au4Wt:gp;(j3Og<MJgclrm.>lq(O51iY9G\T0I_pDc:iWbIVd$%7oCq@Zs_U\ff[9u$'(02qK.J9B!'UjlEEFKnE:=_[;o<f`00aCGq-u,>AblNAWP]tTK,egVqjm'2h(@BogZ"]5I9R!>A$A/.KE1G%W.VfJ9=H539ZmgAoZZA2,AC21arI=uc9`h[3L<PY*fCi[<+Q4[A)m)$1VrG#=pZjWo#K@T!Qud@>e\hrDF6%"!nWatdocg5a)7K*%:f,;@EPl=q:Q;$ZUaVO`p1/'Wg6nXCT!de$d(o?XS8;aVL#99IY#FK?r/Zmm!Y#rC1g/Fklu^:pb?-AEV%]?;6*Q2.<Cto?\sNf'%;i:9ol`"trm-VVcUlYdS\*+6M96Mt:FEL'>XMe\Emo3;Zf_^[4!=$Re\Z/R6,9D2C031^$L6OB$?4d<RA.l[!c"`G<qOAdqheZYV%)@-\K&_#6ALNVEFb3*U7Y=SVkktc#NcY^b0,Gr%Q.>63.A(rJ"5b#21BI]ofj9D#4AZJt#pXb57moXRGJIpmL%6`1o<i>-%.1?pf%CW'3&U8qU[8:In[T>+U$K6`2oGOkl$dl]QL*RD3[`-PX+8;ug9HO&,VOsPN#pU.X5Yb&sWs6Dm'j[GB-[A$atZ-X4hYq\Y)ad?]H%E+=l9V8"1_ebP'8!u"V<igo2Ya9V%JTV4V[(Qf6!/;gd7qS^m-"gQSM\jpBQA9@2eB]7Y=NnjNg1"B8J+Z`_p=e/4V#HMcoi/(B"%n]pjfHt%)MM'WPR)6c!Y3(BjuAE=FJil=^sosG"n\R%M*pZj;"K!=<Zc&Ck$q?]$M>fbX@M_e"eQof^9fp-CW.@rFHXM7*S\@8S&%rNNu5CO8j;>/*ZZ$_\qk,BN4UZM&:CBbgW:s'+[T`*+^P(!)r)9oG/*n:G9B#KS&]#a$UJRsFnqZ6<7fIuTiHioDX/Gn*#I`'\g6%B/t?9(C7<@2Yi^D^F/`hA+BbbC`ukSl#Uplp;H^fZ@Ha:Hleq>/Y0Q!(FMsT%j<j\AsJC@ELGi_=7ZE>#rl5f=[Y:2F`;D_1-a$_%6hjDFm5&4c"&e6LCYh"=fr7N6R)9Be#^t6ZU`<V4M7m9*P$tNP17Yj0B3X$`hF>&tED^$i:Wt1X&[.3e@XF!@b38Ed]=]7bCiR8B%T\$iYTqHNjOVlOPp("14c]WQ=mYc8g@3K!uXaJMAXj)uZj4gjcpGF:6?&UP_[-U<$l9k,soQ<0%mlM;Ai;'*,Q5T4LB9FZ'=?i"/%K<"5NHaEAN`td_WSXlf`!*mWI7ltb[I)il`8O%VRfc2Zf#?O<d/e%#J>)<%mZ$45P+`bK#f/NuYkko\7,kF\I=gmL^rP[Qr>KL>%%ll"fJ>hQJUaT^38ZkGcl/l-n)mWN'FRl*eo*q_=>G4)o'gV:.Ej9+ls,S<(B78cYnqG(IKI]f[KLNOA&/a"\/X,:C%h9-!]_Ft/%%7C"Cf#Q[m@ZoE_li2A*cGhOJc7egrjY7Z-QN*LMQ,U0kB[Q`kbqjJR9QJlj>Bs!JBjjfpGB<-&4*UKsA;dF_-*%*'*.n,5Tj/uZQ%i#ECcMk2NB="P(N0OdOX.Hp]n[r]d>:@#F0ph[t`k\lNh/C)lp,Uo,N7/#5g\Ln<h\!"k,<R`X\h`)_T%s,Z$P0":[*CR;nUE8gA%5sn4]5]XD#HQ`VT+gCGA60fm$fkGqqQpt-AD8dJ:&*.115@JL`#fG7\#\fQW^i_m)i9(g&eemdMlj\\:%J;Yc<-^@[q18#?JppUf%=<XPM`89\n:d!*9a">Ptas]<"%B!\Z9f\=K'GHB:_Nmr-IuTi]immoS8c5.kSH\%Ilp&^SkA58\4R.U=;@R-2^h,$@jP?Ud-1Q@d%-Q"FI18Ch9*,(BR'4^RN,`*cSL=0F2fdd=u5XFH;&;$CO&-Ai,MEsBO"O6H8)R25'?(3S8&h%b<bTK(^OYk=MLS\XG-Yr<hJ&!n@%)pD)m4CkFGP1#_CCc8DkbmM:o7+NB$)Q&o9nN]2kY:Ud,O+K5<>TOVH/CWc]lp"1)-V]_j.QTT9ju:X<'jk,g>s2g=9G.]t.uR3-%j@8&X)@+mso("(h8S8+XEfBfN>V+CLE$@"n3frOI'$8hA+F%[O%?S%LXeYI,3']?;"BPsS\6''RO2Fs\0d!c'K.^SW0STYQ6_bHg%Nn$<I368&ES&]X9c9EQ99*$"1USOt!!4oUnM:fkZ@D\h4iolrX./;'H,.(Dg'^S/PGr"A0/T8?0P#U@ZV%&g#5s0jb_I/_4@n?O<%L#_f31Si)QlrTc^!5.LuK^6s?]tkiKUjC^QKrjX5CnDaLUjYeiN8U_-R&ZUGG*-+/dP7I(4?BOC=2[XA%(E&OW(PW],5Z/ohI(;j%4\CkYQc`sJIiia:O42QrZ_GCR+r%$O=E0"7Bs_]Ncl".,Xrm0bnOCu1/:BLB/or!<T9p,l1'"/Z3E4BCPkW$c.lI'kPX:ZUCZ9$.%J&Cg@2=\V4Gh![HREa%h+b[l]bY[m>!jAF3dXf$5-g'fWjahm,V4P_\eec61DO_$RekB[`iDh6<SLMRZ^Xi_72d0uiI?psKNPS-F%nMqWe3($Bo]K#qBQ2k14hdD/U?(4`kMM:-(HLW,o$*f.4[L.C8#O#hM)221n`S'../IMV_EN$H"%aZR0J\4iNQ2?gX6JWnTI:@+K%Gb89V7[<VN7AiJl(E[^Q]SZmBL)]]>WEH88\^P7.[@fL--\mEaJXfOB%Q-RLV4Yj.)DThY]CmeT'Fmcp]T/S'0(pCLk=;#1*aWe#%aE!=#Y9W$q._L(?mu^Y'R98#N0!c5eH6J2S>!@E>NBpmRRP(Ccm3m0fCZN:BC(cY\@Lo[2Fl_k2[Am`Mh7]E+T#k@_]cOXEG3_Jn%iseX^.:a_,ZCf0%f4/Bo:A+T:kp?_Fmkrp_ptem9`"YA4Yb%nm2)5qShs6)Egfr=6X6%$lZ%)CLfmL_cX-V=oB:V_bW8A=Z4Y:Ef%WdJo/>,XDC*6i6WY1&<r04B%UWKHLP'=cT3Sfk?p:&XV)jB;hi0A-.J,tKefJ6_oH58]j^ru@$3fW\m_1MMk9"#iQLZ4_]GHE"5[%j4tQrPtgnO):MJ*]T-ZNG!`S-<t^gbB'Kj=/Z<T40DEf']0NsLQ/3_,/hcLcVP'Vo\kc<rNj!;(6rA'ml:\<pm+kG*#;W?ecHcC<%`#tm[^Y*IHJt5<JMoF[4rcTK7WnH,4f(RZt3VM'\]r=3Ap(C399&u*9D2<S&\,Li@42<>fOb`1WWM[X[I>-W<c9"B:<r@j@>:q2>%Aa6g_2KXIKdi)Pn,*>8+e;k@\Is(<7+kU(SYeaVq'72P,h@a#Lo<pE0l_YL20dhf+<X@d.N1P1T,PD='Y54,da(\AF[oBoA/?=EX%),K$?3jQLibi=_npaA_V1+&IAn1aP4&'I9%\t1K-]#p][2nJH>-Jj#1Qu:Pk$Ecd9BE97O4DP<GWfD>_4L$itB&9MnjD8?+Xn!-^%-H':SYkK/rk'pcLUUkkn,&?PI=U#p!2<9M'LJd>#<j$Za^&<]uAXqAnGqC[rR(0nL=G\jimjBIQINLgqB:$Nr`p:=,0(VL)f8.+I%IQQ0C?8Af[?BsCJ>2UFt`83GS\,LqYZ@H6<99@!!>>%%uDe[8KYH*`YOtg4To$?j\Ii)*R>"RLk*&RR$LmPY+Q4A\q"_l5X:e,(X%hUeU:2+gT('g5rCYbb(i?8@r9j&Z&6\-]2#"+&jthY7V_b]-MUHh&aX<HkmO,PRLIbe80AYEHBRMV:9"E;s?C4k.;;dk[5XQ(dW5%<aEiHl4'dpj#1+C)GJ?-aHC[%F[TU8`)N'CAgM;!-$=IQYG1_066#XMLqR_/DuTnQR5E(+r^H&ajUZ^GX!@AIG3o1=H?kc<8*m>U%Et%db`q;@Gip`SoA$?[u;LSK!0eT\71MSm"?&]<Sd=K+$K70"ILZbc;L<t\P@,K_hZ"X+=Ou+BMlhS@l4E36Z,PS'Ylos!%a`G,?%g-8&G*s_IugcM!5;mQUVq"G5UA1[12'Ur?`M$!N>OHlOi:YYgR)6l+;/>%ud,bi'(INhG+5QgYm6+ue!C^G<ao6\md.P'3&WfGk=%g+i?UICr1D_faQ03Ipu;KDL$fm0WfEB&DbTGI8Ah*'5@Tg7dE`d;2_>DTTQZ6B7ckj^iS70_9rLeu7(-SiCFC`,DXie4;qmO1LB(%GWpMId^@/0,irUIbd)C:.2nWu;^706IQ:`!CRD("&g'(agk)anWBI<=Nbc%>6Z.IC?Sj8j^KsX[rNaEd(+VSU=:09C]gMAfj)mZ,%7N6_S<i,hs-E#&Lq!ERKc;$Qgo+u^[Xg]5Fhslh77+tc4YD19`%6GMUoPei8VE0rEF-F<0cS!hBcTI!ElUB\(HlG+dF<s)iqsaS.%7W)2\-WH9Edi&2JZ93Y.(4SX/G^7gpfrT[O.=b^+3@+;%Lkt)l`KSmeh'>N8TA5.,h7rQep5i7[:1Td\$40Tu-*q=(Qg,@\+^Q@a%o8csCU]Mf2]h_OIqTs:%j)7tR-bB>PYCs6>%eQskf8<Hn*"O?MS`OVQ?S@S?ktB`)4JA4sL2pp[eeSm.L&ab;^9e-6(t17>2`<Yc%A"U^/rpa/9HLc_W,Db5jT;2iS-h7a%FB:'!*/5K5GO_d$T\<Fjf5EXef5UAJ#J1On,\3*fqCb^@A$+'710)J`>N(V\DZoU002>0.%jc$EY)/kFMr`S))&D.@e,Fca_O(nOPF[=!L[.=0]SM=oqFbApNRcehpYhgHWbC'2HaQIJa`1QRbrT3[?gT;dT4Rp+iIu/Ur?3C$K%UE3Qcji;iD=CNVlLf$/N,*QlW%3=$WEZ<n#6ps8unC8\Q">W8S"l13ZIf2F!_u8nDLU_?,8gXW4Y4#$rbD/5`c;6CrdE^n6@9i&,%Elq*BABg86J1+.RaBVgGL07]/o4VIF(coX?jl0c)`YLc1=^%g8XHkcj\WI27\^+UfN]R%WT>0Wki2l#C[dM1XXsQ"o[P]?T<sjPc%Z%'G`@VOUC2FpJQZN&U1J3U6g[b,sa:(mm4/A<%5&IQ[,X5::AL\Hki7l>ZZ!h,CB'^sF57h6jlnqMFqDtV%h)##;?cE$!m15T3(%.]F$8c63(ceRXO5Mico4?F>H)1koBA,b)i46'U+sNKho_5DR5-M&k7HA[]3M%?h"6/>BO:?5M,8=eNQ/R;FeO*(Vs(?qrs4fWd<Z%hotfj\8"$TplZh'*'JDO7PlF%>V/-c3B:K#?<-Pb.!]=k['CGrLVl,)UAsp)l%)c2)BqKDaSt^-/t7eqAjB6"YaOQC0L,T_H=\NK%>_dXnT<f0l5>eG2o0WP7#g-ZYJt2#mCi-RI$iM<pUEG@k1^5Jh/U0Z;E:ZsJP)u4k9V,u/JP!]Te-@qs$IV,OOMr30k7!45K2AR3%M]H2NGc&gEoX/YhEWZ6eIP%PSK=2I9W4Sh6pFlILWBbl`IRg.^IkQc`.>4`X\8.m2&GN$o:T=a+:KkYOO2M#?S]#I=66pE)GjClr%$TMei%V`5p3asfP>>b9].#7hACcUU&,%=;:YAXJWlVc2c.J+G&,dFlnN-Rd$TI%k/%EhdZhJ/LM"1`n4r`#TAIYkP+Cjs1UW]?3r%a%ku;dTP&PlpoC9Gb)@^WN[kYK:0F[5+^J-08u:gM0M1oi3dr&WhWt:?8kPQJMi%F?.39&X5!@M;7WN%*1aiJ/I1-I3g&1k:@)fI%=ju'pci/?`DUk1p8H\aXM`HYVoQUerAD3dldg\RNZ7>-Xq*/1NZIJ^C\m[Y;oJ/HX,0NE]nDV]97-0lnZ#@C7N#/sl:?;,^'C1YC%'j^5+ls66-U`c6HCW+W#hkjmEThMash)s-%DbhX8&#Rd8'9i*5Z=r<V,YQ@rDBC[-6Ii4Ef5JSWZp&4bOk[??ltk'PdFmg2Y!&[&%g,D%5&WeA5T%NKYZhL#X(t9pe)9B7pb.Hbi,f\Sq-j#i#/S@L-G*.:6r7m-V6#9UjnTXk11I(i?V@tsSG<ro:]qVR`6gsl9lX.^g%W))p.1[Ep<WZ<4i?]K0j7NaKMJS`'hYL`rCaEN*a;M.^BqGcjFM.coEkhLVeiX3:I3g&1K:@)fF=ju'hc`TF/>V=CH;4oDS$1kT7%!gNPf,J)sWTqZ2^ZJ:#rGE?Ad6cE"5=!bFlFoIog$%TKLnNnV!"MX9'U]5UgV$"COBDH6)7p!ug]\3+UnmJ&HqcIpM5tYjoF9;:W%3iWR$-JZtAg*(/`IpI2uB"P[h'>TrtJ0FDg^KDkiXCiR:T@[.>W41ihUUTp&5G+Ft:])Pn9UhRP+^!\aUnaRCBg(.t"WZo5S:BaU%C8;I0[7IgYCnG)"!7G"hZN*t1(LC+3J"L(.Oe26f'q>a3m*)kK9lmA8i>MTC5nYeK7>Gir$[77N$/krM"j!+.:M=fAV6c?1I!^;j%J1ou(m"6=YSHCi$\c+e-F$\3>X-2>ncQ56IeXiA.jD@(`_hVH9%OWU$b,L1pG7G85)^=i[ndOBZM&]r*7FN"n6KdMmnn"FpabSKO%M?9M@M:sJkJEpteG.+AOFLD"PGC?2ubJ5'h&1Lh.qiQUU+>nXD,6*@J2r0&GM".\#%4g"qh!1jM>i!,*i!]S9,)*l+S++>.<HB@n%O.BBkd907`o1-PZc=NPYX%lL%b;;lI]"VgZYE%-Oq#`,'E`-tMLn\68E`([Id;MY`5&1eOaWVf+]"Zc.Q.mLdjnUFk2VXI62-n;r%]bA"]eSDa"rn5'X\CM-=Hr\sSX7)i:/U+;I?t%JTMMpR*&XNPRk81R[g@hO<?9H=MpZDTSWAS?ecJS8QITJBI\UWtac6i4AY%E0,%/uG1%n=.'DfBV:VDm6eF8-Df-(&8\"Ze])\g&<HKlO)rKl/@Jb;X?b#>9s05K<_3QS`,(2Pd6V5F('__)8S/"9eK!tN.8h7\#R(8%Pq).1JXi)HlNrA0.?kj%Xi2GEe)G`lo&;<i%:T0m1q]t_U3r-X:)I_,U,FumoY/kt+p>k0a`BB\WM5oGmOF3-KU0[oXlS12Ckr]:%Zd[<3R%<@B7`L]5((('4\gn%dXrFA+#F,F;6\JrK'G_4P,Fjm;<ogB45'7dI,0+h?cS[H*m$A^64.%H;*.Q@R>_!iK+jO])Iq8kD%5\kTp<pbRBmUe9IaFThN]X.[22!NT!6N<_;8ST!Q\7E[Sj`^2)IWi1?f22F5N7Su6M'W<S8Re3G"Z.?!5Qj;eE*]7WYD,AO:rYGO%\#1Tg[duSN;<i+AMJckJYc]E^EW+!#6m6-X4X`C]dML(SU6S]i[R*R2W'_6:&>:s5Z7*aN/>Q>W=uLmg<jYe-dW!i9KIIEGKAo#<%dSn:1S"/HNfYW.hce[[;+`[e(l)OMC`]a6d.)kcrBNi`Q/Q4&Z>LD*[fh:[JEN6:McZ7'6pRNnnEH\e-6]+CM4'QEsqp*KlZfTU%%SXj8'.gM_kG4NpZjAt0k.<[Tm*UN,QG.%tNlm[+db4V==`6K-PT6GI:SaFM/)ADS1SQ"G!-$H_Aa1Sa"m-J'HMf%OWQ0i+^($hE]%QZHf;20QD:dG!8&R#D'YZ^9=t.b8h;igm4FH=nn9Zgib4CJ4\T]ls)`4$1cnZffu8R]4$-;s\<@1>^\ZJ#FfWS_]4/0Oe\@Z*PTg%@:q6uZP@N5GP2Y246=2_Qe9t?opre7c;*WZfmJUPBW4CMG;d8%,JlNH`VRkThV"V.p<LsgZ_=(PSR#];MfdN3]>`&2ignn7B8[P9%n*D?D2RTlt,?GXTkW=.bc;m$[fdV*QJ2LB7G;]nkSXmF"2(7>7.<`-(0(i]?CiM)GcBa'QSZQmDB+K@a0:3Fi#I3Rm%9:G-=L&SF%aisE:%Q&L@UWpQ=.Lm9E.qhouFR'5Ca\^Q&).-uSggC<;W(^#+*01Gp!fb:i@#A&C$7Q;lP(T5$C7Q@.Qb1UNFdC16gB_P0EOeb?%:1UWXD)\dCiHHgnQDRRmV79rl)aVX6aKC-W@Y2QWnjNi#>o>h!EN>Yl^._3L99LbP>$)beUe`g3_hK4>8)[o4#(4M29"DI&S!=jX%12[dU[Uu$.`EsFpJJu?1Ta?Tr.&L2qf-009RgbB06o&Q$:*n0c(_IKrG>?[qAtEn0'euq0<$ILQ.nL\hgl'._pbH.Igsntoqs,5k%M(4P0m=2Y-$R4!'hIb38D@s0(UN7Z6q.A4d+Y7C&(riP.ktjtSEHPqSN/1q>,_.>$Q.ib`RA)f<*hV1lKidVJn<fqhb#=gWbduVY%6D>*%k7?[/&1-rb$](0,C7cb..tT2^-G5^u9lmu#nUlR.aFu#:pAs4CP=9<4^$-<[b7mgp(ur)4"r)0fL%IVb.1h2pXa4WPR8ZUN%8LqI4T6j[%]>qK^."f2b8WWWEP'n&X&h!gO/5;Sa$A0=!#.P%OR'f6K^_ZO7arlLE?fnFoN+GN!6)F[\UWbMLeN[f<*Vtj@$>_\4%jjh@GD5&-hb*Wo)"\']=GO3<GDc1#+TB6ue^Rl't08dX[8%]08E%[ufHCIk+$,NJJj.1RI5j!mCQm_G<NS)u&2GNSJ9OOU"(4eD5%^)?e,R]Lc\O#?=Y@Q13=e<2'=&Z^!<Qr^U79[DEKD66*0V`'pG@`2O'.b>QG57!1,/\U?#B)T$bG)_l%/_:Ae[Q^oZ]2SYVWI=Vo%gui2I@?0i#b`TfugX1`c%eSg'ORl>*e$*bko/C*\>umRq,[o>4,Gt,OOr>S29X2HBL_GN)#t#\M9U#6dREI%89r.\^n7[j7)f2?:%MXchuPE?i*>dcYokp.69D/N\N&W86-<fb47SkCW6CKfcRaYpT9;S52Aj@c3j\U@!Af8-u?U_p7)8]4[A[d5[iq[[bdbbYS/e]oO_%oG``k78AJH%]1WJF"p`^ju-?n6U]5&&Q<K<P2ArYZu,:m^^;K1JkX1<Ad^LJ:d&Y'91A\6%\Ef*q1u`#lqsEDm5!7sm''VeRo:G.%3IZ,Y%>3_PJDN+H[VBjb4_$/M>&_mc3tSke#Ta5^I-YeR*et!]RRg8'/%=MTbNBEuL7-\DQlXLUjN)io8[6Fq`ldF*!lriT.8@9;%(0(J7Hq5_RSEOV(1oNF37@:&YKL+@#9G8l_Emm*9X5^mf6>GBPqeO.,J]V7fHnn=^9&5Y07486Y/1n[7!<g^"&UV::6!6lMZd''S%",!I"0G'H>4HOYP4;(H6FVTRlHV'g`C-BKWj)"'HbYUMM:NBAT.c+t7bXmrXj:.Cibps2AT\c@@Q<m4bOX*^8=RAcm4(>?"1G*-i%E*172e.P#(l/61Q0Hl5_?GTF]>E/!OU7&?+5=^UqiasQboMJ$LZfB-nUbb"p'\u+r71UqmZ=I#G%R-e<&:$mcKnl4*cAfXI`-"3t%f0p=B7nL%J$7QP3I87f]_ZY8=2UepH<[V00h]0KN0<s"/*U()+roT^*m,aK(&f-)j,H!`.\9bQYFc/'TM7G5D''IVGAQ0n<&O4/)%g+BY!0nY1+`%:A>4@%.]Xu2N@.q4'NT'KJMZ'nY.=.=MuiiUb7]0#/UZVBcpBpS..-IH.L1PS6;j*`,Sl%uqtdO/<HF3mnoM)Ff`%(]+a7_lOl1$=jJ`fogfu_2*dJ6ct^D:,0.C2OlgDN0[e/)+W<kZi%`T=I30jC$V/!,_QbB/+H<gOkb2O,8/t$(<k+hPlC*4L&2R\%o^'r^,T*=desI"qn4=aS6#FPF;f'@n2jc=r/EOn3O]i[Q)!=FEG&:P<`6E[=mdO-O[<S"%KDlO0besFtgb<6DA$2%*SrIZm@N*Ng%n_pL[0)cS:9Dh9">pf1Sa5.DTj,HE`$#P]Oe^\+rM_J%h$h4GJ(:$/E23.mT0nmc+q<:A_C(:5]-1V!)#1etYkFq1RLp1c8^+0E3%mjsY:lBF3YK<Wqd,bML8jIGEs>Cu3?:6$VqH]\1`@]jH<dOe`N-RU]^m%k44B4LsML-0D)*oo$#8uh^lMnPW#1lmR)P`IhY)E-W8%l^n=#r;[jTD3=6U]=XJ(+tL@o*"i_NgR6EF2)pEbPSO<2J<4/-*&6'Ql&j;_XUnQq.9L-&d3&SB\<(1"[1RcG3+X74/C[Dt.a00Y%ZZSBTcg*k%_BgD+bX/W;nOPdI=C=>#D^@u&^]tUg3_m]o_ZY8=j9N2_5]kc%9jl3)%Rs_)lXH8q_#\nBh$7>-GJH&8`L\pm:(C'8%j<k?*9eq0U>jaqYpms`i&/0\q,BQHB*LJ0Vq$BrY3/;c86RX.Z>2WNtZM8_cYW&]I0JJRQ\oqnA]/22doD1kr^O.4[&eF?ROQ'/d%/%O;>?V"Il,:oEbZ2ZL@9U_>fVg*]1dsp+XY84/odI;G3OhV+o=n14MT[rCPOm.Jj)h\CI8pm^g5d>d_d&Nk.'9^_aCfX<$lcFFY%RCffTZi*Zno+iTK;Q!9XUnnqi+KM4oi[miJIVEP(l3FE,Be_EmrYdLm":(o\L--K(DI'=^`kbZm[qtX>m&pG9",0YD<j#0'++ff%%L5FQ4R%1n:a;-$[6sc(#!j,;]bK%tT3q;B<FKS9mNKdG\Z67)(>4J4WI4Z^H'M$Aiq%D.tF7QG6oPXg/1(b*H#JG^>Z=j1>nkO_*%;OU[M+q!(@@hP*<hTWXu0!:0F)a.uB4Z'E;H$;A*f.U2@>VqS\C?Hqu_TL3%Wo\uR7XJOGMDPIFP4G#UFp]OBnMh?^&+egabGW)V%r3qt\2QPN?o:3_mC:9EIHQ>&EQ&Lq&L$c24+^C=6i_k4j^6AL:6T7aC=E:uU+W+R+!`#+$VU"9\@[:b0/+uak'&UbY'WWl4#s&O4%T1JR,,I;3_\6hXGn:8&q/mC#cbp?P-hE`Ij8^ssFCf/^rlO.j7(RAh^7`(A+El,jrm,RG7/[?g4o"t=?Y3kC0r1GTlWU!i1XMShF%9i.Dg\s^Z#e`-]._"9&(.rGghn[rsT"t:-]'5i9;Krlk\]I\KO8g]F37ao_B4>:Qi&d>-PLG2j5PDqf/+`0[q+7)@,3#FC#-)^+K%h4FM=\GK`O>CYc2bp,Y-A4u-u$>qGHGU/lJ[9:QmO-57ujip<.br?[>%l<9lbHZY37H$sAMe"oFElTH3pVT<n%d(m5&5l;-B,GBA%:Ws`=Ae+'9BAdt^.cF<$2@c6,4&J%[Us[0@W^mQ(^IHFIRHC&p<A,_('M*g>D6`0Qi1;j[jbTn=8BAmfmJ"^'Tp,eNX+gL+8T&^2%E+4I,?&2#1M7p`1i*Ok&b-Y;O4jM%G_u-$fLfI;<7f!Q0Du\02k]5cV,`1%fZHLJCH2&k=@_.(+)aBi(,;/(8*[W;S(1NK$mnViT%,@Fs+M@mEVhsR,(C[rd:JkqZ3OIkP85^7pqk&R3dT1[W+`%6"4&l4])fQW0aEk3P]H&/sWA&;dJ1C/loNd)h@Qpm,H0Dqk]1(gOJ%it5b]3>;9#ZXZ^1FqR*SFV4bjQ7mh!GlhJA>?d&l,IVb#0L+A#c*mK;Y7V/-qF8&Ofd@GU@e&ls<J7`FjsXl5oRQaZ'WD=?.$bNM%2QM6[-JnhZTO!8g<G[-oOR'0bX6Yh"bg*LkD7$OqH<Dns/%=u7mfP378')Z:*gJr;@3;B.8$^'4-O9J#Du`[oj>CJY]_#/VM<Dln%2%:T7#=b'_R`VP8r?h%?jOH=5Z/37eJMf@r>?.RhHK<7QXSNT2c%R>j*Zlb<aY\TMGamNG9Y8sbqq:,)<4Z7(D"#1KeK&UBZ6o-*%p@`FZR<<lu1V3P`G32cL36C0EHH0-^6mVC_RA]H^<_DbigVgc7iG*CZ.bJ:.Tg[UumG0&C,GmXS=7d,NXgGNj5XQa6%RDj:Z:d#n%NI<ouWiPf,Nu/sI8f^s71e.eM?X^4VT2cL>lG7'XppN]:eX%Sfdr@GT61HTnM.-Y4A5VZKX*S5n#5XFKd_016#+Tb`NK^XI0L:d:%a[r2%fTd=75n8Ckrt&?qRsmr)f\#DPROR!XDQTrm@Q-[N378p?3[j-F)mEXK>j?93$E;KjM1L1\+d&j>ZY=*&NL3e2?X??>['7kZ%:R16UYusm/q66D`.i[GqK!)hTCiI1a/p&r+P>92=Dd.XM_j?)h.cV2q?R,7K>9UknQaAY-<I5C>e$8p,78-sD4=HATNq_3+hqGX-%lE4XKq$GV6S5+2.\0,*G8^6=O!sB1n1h+86TWh^@K'[=njZ#Q_4rW=Ge;^MfC:J86Zc8=+9,,Kn*tqs%9anc,e2,<EQ((7*8kmB2%n%Fi8>X)R?ju8'aLfQ;N^+sOFN/[nBX]46t?$1ipC;$1[HHRTE\(GSB7,t)iaV=I`8J'K)Rub,q*cd6V=%@<XW(2/CHHmu!H>0[/%bZMl;PpT!<1O=@,:6q/%`6ICW-fTDr@QTsPo_1EXodP3WOCe7e'VB;-%j+NqKCV$a<&R$MQ-&"pj*[$E>R3&hN,CPC=:"2(97YsF%kA/!mYqk;$hI-Z$<ENO9$-9@s@-`XM<1-@/363Os42Kl<@MUfZ2Op:WWqrpa\KNsA;3W:1J.Lq-Ss[LGP,liVqnt6=cSg:Nbp5,<%o457O0uD%P,+l%NoD4'^n9/FW]<-/!E0gu?iq(FHiL@rsgf%!>9)<+5SUuJ(;GeV8,DdPa$6a11$f[NMI#XL>5:suKST.Rb@r%=P%lM5-!\4#&JQrn'[3gB^?@W,obWqK66:6cBrimZH!o'@6N,g,<n2.@VB=i7P9S59Bt7,!Sub3*C,Ia/^i-/t%#M+;u%HXLE1hjMUp%H$kOr2rDY_XY=`?+_=Q$1NX2]8Oq.;$_\5a!k%)G!c/'Qo*<"'h2poWa<=53dl.]c:WTVd(f8#h7kMZAI1UcM,IXA!@f?@!50@48%i=(1Jpfgs+%q%oSLj>Wt`L!0EWVOJ/OcgSrK]K8dCTa$eU'Vk1K0HP'Yj$Q`+c7X&%n#.r'AcJi!KO/an]Y]F[i2E)A:6L#VCZqB%,*`.$*+pP(lF,^MV0p]b%bM9B8rimK)`7EAo[Y/(5U#\E8&n#2B#I*TRmOPZ\OWge1I3F$MVcICk0tZ_-5Te4Z(a]R3)osNY7^C$%D-B%`1o7&;88V4I?`VqH3+UMNO7gFRQ@!^ZGKL^_R3++3q0;fUT5VH*$$;s-h`:dso/)S#p/j:"/-PF5+EEp)5UhWM%i6?O#-%cj%1lLmB5-[<&(?WmNdC7b,B-V7fm`JF"Qpd#CGV5ST3Jm.?:XM/=R$6+NZ[h0iU97U1,HMD]ZaJk+IS2&UIUb)J=US]RK]+nY1Q(F3%_%M/F<UJk6IUX?JdED*0-^Hm9;EDSbrF:5hq*<eSM69"I?I,f%IV.5P-H?W,@)a]tU'6>a1IT?A&1[[0"W+U<8?k_:[KP0S!L*JE%Tmmi/mM,:ZLjX2aUU]94ot`Ook3[>I7p=S:.>,aS)Su:VPBY2F-]1Zk,N`i8a&8G5`B)HL.t]W1(4(lj6j/IAHEt6%bLuR;2\ZKa%$"G@N96-I=TnhCl/O&4XiL@sh`5<\N6)D\r+L4\d/7<URY!MEmi?T]J-3Nl2og\;DJ3un",[k-fgXO:f&nbln!j/&1=V7pd%Ri:X%/s$lH6bab'Zc+(oB;YpDZ&8-rBS@se<pq=2XSu0$jo]t-nYG_QPPkf.%*BmVFB>+6mVc4%_F<pO-g*l[#>`R<"f;$7V\NM](oHb?%n/4I6Mk3n)0jE/g>m9e`KuofOP3,P!7&(TVo"Jgu`p.W?^b8TVJ%@e&go<,b$.JpMK)ZC0$[#Z1H2?dV3GL]/dmkSM"&bTIii<?Z%rH)iM[^nG[]E)<hgk@<.c><'T^0]eH<>b:&@)+*$!9mV_KqEqqlq%Z&BWeMi=O[OIgK&&8aJs\[U'f54ci^`6Z,?KGjVt5B**74X%Fg3-l)H%/B*U9q'C,FEZgVJn;B*32e5`H?2TmleWc(qWcQg5QW!phgj@WoShZY0s%hDV#ri[V\kEtL?jN1K%$$%8m&k-:@g!;24i%[,Ru\=e=c,1[9O]Zh;?3^mLVX>ZG$+oF@ZG"LdFWG2<!U.1r9qZ1'1h[5\rF-k5rZG,(K&C/mn*8b/cFP(i7QKl/G+SM?],KGrBk%D[GEg$kkn-UTH''GJrNX1so74YZ4=Q5Q3:f#=W>INV;pAZ?'Nkp(sU]ptR;qKI!$l&a^0^>`>p/==D!c/T90ITW@6Rkr#$M$ft:3%rYs!)C[2MP2IC?Vgja,M8n9)J'hUeH(A(Nu/;+&q;!uK>Ch=+#F.Bp1m&dlEk>]."0[!Ac69r1rZc-UXU&n#,F*u5BiMj`=1m`I)%-YD+cQ8-7tk/AYtlKYl9k8N.l;#=j%[;/W*b:sr7ri)2<-,b*^I$Na^o_IXjg,[;nK\)+?CJAOZApHQ['lYfcebu8ULdk<Le?lV;%6psnNUJs5U:8s<[R5.]L%_tF7E(j`Ep!R9-cq,p_:F`AFW@_7I$+beXoA=D7V<3k@+U:V;,H=`]>cZ!Unbt@n^>jG]9[:qI^8e4\%jlVRVGB*sQHIQVoPjH3T&gKTmh3PHY3^I2\9kqX6Ih90[$V,V&[>#4c-Y@!e;Ih;[jnJO_aNmET/S>Pbb,,+Urr3@fO0=sb&;9&B%&k%@7ha6G9)L-*7(,uUb?R$m>hkCCQ,ltjG9X_</WYctF<=>P0F2tsh1\c?WfRCm'B\+\$?Vq(cPaTb]4L93E"73:aR)Wmg+c_e;%aee4rLfdKZ1%[Xdj3;>3[JEQ60[3[=H=p:8"3*ZqUMZ`=g?d9qmFa>%Pjgk$Z&ke=!'BXKC9Zp$oo%ske']bs8?KFG?ciJ/1EfDD%QW<:WP=u?73SUIi_%#a5bK!k(0'r3"^WmsTcu7!OS[<;dNdpS',ruJO46tBQM1l@hJr[]XH*C)c%ZfZ?JaM>7(1"Ks98(C-cuH<a%eI*FEbm[s\eX]*"hlu9-hsA8;E]fQ+2Z&WY-2ckG;MB:-1pY`OXK#6#/^W%gX,utDTbk(#+S^Qu/=ufZ,g,r!d$m``T@6T[mUs(d%q.rqm'u-7!+B1ta$8oi6_Brno5#trs>/BJ<-,&?M1Lbo%@SJ6E:u^YM[uqR^HhH,EojS;#Vk&NCkP/HM8m$Q6WPGZR>P!;n,!J$V%]!:!5S]K!^rs?BoOP@nI`]TP/TU73^i([*Zf.BO'oI<S+Jl,!aW9K:UWo,[-.$^%<8oI4TYQ0"iZ1IjKS`>N+AVsK"&Ga?WbJXI4%$ks`BH#<O$6@!aq5;DKo,`ne^XqA"ASGu6K-0Im-^01D-?i>XcksTg3F%c0`(>2oqZ(@>Jgrb@8mo2G8N<_T]_rj5\I'`RA%K#%W%7f;*"J$h!07$ok1p,=Yh$@hN-*A/Kio9V1sC(Xurd`6*k!hq6M:R'^&7C9VY8Tb-Da7oujks-qtE7F#\ppK1D:lm-$k;IN(q0\0h%a!+]OPmY*c0./K?NOY3B`hTG-%6c!5if6"GDh57t,Y.f&j)6EG.+Q+g0q[1RM!\S`4F%EX!rit.%&GaKNf+3d8@<Y:e:?p^C^ElR%HAR/E*f?n\kajpj::Tdi:M^OMD?#/e;8d'[`?lu'fK>\A;O</or*\$&HWiq`R>+:g%\]P#,%5-m42H2S>8ZTSR:oIaqSo$lKL^_M%:ZR>A8pt$?T^`6Yq&?QZq*SLM5:TDbVWQ*$R_56B-aVm4<IA:2=Uc1u'[A,T!n?I=m#i^0m`PrJH`XT)>j-r!^K6oj*9/:[Tf+3U%ngi(JG[Bagq0\0haWK`"+cOQm+mpOK_EN&E`@jjIC\"P;=H#[tm2Wc#:0T1HbR.Sipp%,U<h+V!@'2?)k/59oRR8O$mLXO;3X,(<%.gBg>@a8'[kpI))>=+,\em#]<)tR1EXY@5*&0W+.&CoC+6jiuo5N:+\lZ*1\fEl(^"!uhq^7166&1,&]Lkg:c5/JEd\D=^,'LrGn%#31jDq<"&nRu4:W+%=H-lb>FC@/VD-MHY"f.e9?s]LCh^<p5^:l9rmq-</9qC<Q]1D$44Bg?$:2;l3RBS!_W(=c&u.#DM"h[AOJ7%g4^2E$OueY@ZjQ,/#e1A".F7@]@X1$8-[4N1qqf/cR+TB+KiajIo4)8?uA$iC3+PmEmJ^[WU)d9\fi/9$"Ll#!BT">Ni;R)F3G_f%:JNjJi\at+UiTj!-Z&K[;b3j0,mrGNp%/OHZIu@H1i9%6)fa]XJ9gh9:].e&iDteEN$&IToNl=C:[%$&7I\7>V?/-#Es-i2$c6/K%,GKQmRl;K<Kt*Lf^ig&(E'.HNlKhAaOt+</C,C"hbu'/[dZ>j=)FDS`n9Y_-;l2<WEK2[UJu5]!2Q]-#p5/04XJtfIO](5tR%<qU%m1*Emp`!^+0TVL?/$..3P%mKR6KAVoVQ!W$1s$uU2Xgl=je4J-HIDU/baVZpU+0)$G]iN*[9%H60j"$G;9rPq$ZC(qB84$7Eb>Xb%UP/7rnGs$C!$XL.G`1%tLCNl=B%rH6'0/-WM_sL%0)3HRW'd)TTp*=_66\.E%*H]"/-G#9*co#/d?@t?X923?M(\N1>,&Ss*rY=S%DgPqGN1t8Y:'^Aj2.`HrB4GsG$UO!]=Op#oIq*h5/X@8/+sC._R&Q=(E6WaO^9PEMPB3Cu"WpMYVaUs`Z@9;+Q']$_7QiJm&_X3D%(TY1%Vk!Nu3;>V=h-:s2II-I=[*TR9b2;WW@ofQ1MS*"-7-lUHQ/[>]S468Ud>"Mf\O:iVB<Xs=cI6_.k!Y`B'<t!3)-ClRWuZDa%VOiEp@>a*RkO60Z85U`H:V@JTPS0n[jE8A%isPg6Zg.R\eb62Eh0/AsX&<-c1AL%`V<;&@-2la:_4.JbiIki;$<cFWeo\[hLYXK'%:X`FkG$NOHYg)kHLgW^fA^cqP#Z#dQmA,gc^9$<)Y@J_D_(J"+0WLj-If&n`VU\Ru/s:Wtm`AC2Vm]RLY&jiI^U6O1)dhiNT`n1\%BBc6kMQB,J.GeK*s6fa)<eG]aVLT.7q/e'4NMk&Ls([$BcA.\A2e$u*Pn_*rN`dVs3_Hu,_TCK$1Sj:Oe>DiLjHJRqes!Vr10e<M%.#)[7^!g2HV&Ef*0]G+i7DjAk(__n_2Qt\SSa?W%^6-iQ<LtO]=`uOZLcGJQP'g\]1RDbl-7%G7g`Z^BX7MoiOAi+.#h-7CWc4ms%%HeJ?/if,gWRXo[m'Y=,M:ojAmkR\`R_fXo?FMlt"Lf0D=BX(XOG2'.K]r"_q7`f'*3jIF0/5XrW.^6GTr2jG&MfTmmVoJ(m37$h%If:prH!=f"j<\JTO0:c6i@C'-M+c5oV-#Qmb\u^8/0uR0d8`B1#es1=XPL/CW*(6\WNk=4%Yf:[ShS2(*_32R"fX6GWG[oX(=;1A%L/2WpIuhM[H/7F-e#l9K"2c9.Oum0*1dBTB3N'd?f@i)d[5V)/3U+"OEAQI9X0ZXdr,F[P-`4ntCH+7f2V0XYWmLZ9aD\EN^Z!]0%^i;KL+aFZqW(hh3O.rpROZ>\7mW$T=^hPCM!r`@kFs7.Ee;<#ee2ir#Gi>rA3E"XI,e.'<Ht&e4Q54WuXjWFB12gUk.W:#5]\,RD%)BGJ!cmND.Y/.-<K@JUO1\IRU4BEC`dF*HY4B<l>.\ZOG*G!4DN!:D?p3)+8f5pW'p*W?&89<S0,RrfH=WD7UY'ifLMHDr4g5!MM%"iYkDh@dDMC@+["-RU]2%+p$LWepK7Tdc!,8MXu)o^[[V'QtZh`fp&54@utu[32Bd%6,fi(6Y$7[=WLY'9[Zih]$V?3N57V_i])o%CtqQ*\:O&nNmc0-U0#SLf^<Y'gXIj7r:HeHV8h5pMp%_Jkjsd=3eK[37*H.*&R';gLlSR""f+,O>caEI'X7J)qcQIWSg3A\*eH2n%GZm-S+8R<h\R%+Sa32dVc_b5sNTc3Le)k$Xe8aoV/aYo'5p9`%M_:W(/3FVu8L<rP`hAR%'ikjZRJb=@HXf?7J_?56pLpj(+K[p5%H^$e(l-t]-d)*I>)[+W#WBnI)p&O`hCbVfjk,pl)[cW,-JMjK7[aK<NOmOu2RTFY<k&t.FYs#>VnhOJ+6EFM$W2c*Ik?>F87.22^%M="CaSj%i7k,?[LK"b@,W+P@nHh[En%f?f^,=$clXI3VpfVu%*F6L(dHE-n;:2.M.$6"&K9TAh6,iiDQ9(rL[U9K"i*m5uR<<+er%YBi68V.cRK'@k6+-`3-FW_Q2gXI`N^"t@_K_:h<5:mGK`+h)n)6k6Z;C@]@aX]3QC<]<#d6jCcG;:B^o.p&cdKPXBN3+=M">0GnV%'r6#-/7'Dh5u_J*>2_<Bh0%'XdR_bJl,7OQqPbZ+HT[oahjdi!c4%=Ol[BpHo.qYU8Y\5USdL@(26oUdrok'&!]B[`D>Yb98NP[@%N/9)U'It*>5_S%kXc+g^E-f"l7$/i39%Tp$fVh"@\O%hk5&TQrIn#HU>*@jD.64P`WdIkGQKgGZIe+IBs/`!gYG=?'>I48sSlYJ@%ICM:k=6u9+Z.]t.;7ULRRZ`@ae#bJXQ#6V\Ai@NiH1j$d@b"@L[9W9qq`<$EGsW2<FilWS>PK?KPaV!^Fk<<9B$(rc'Fb9JUF2DH%A[N/qC;KT7S(IH,'1D*BEQqiK5LDf/-A-bYrN$S64`jmiBRW!d?&+C8I&84[9PTPMdChI/Tm`I=X4>c7`p]OqW_^drSL%ZS8cHZZ%/[>^ss!a^9QqW6JZ3pJgYba9b<AZb>U\Cp?K2)t?hYSo(c/k/?[SHKKRi^0$<19[rlsV[<ec2cVjbmGBjPJA&<=f]I>:$]o2c:B/%J7m*NV9&X>N<S4F[UGZX8a6tmg=b/1-snmcLSZ!rOcQbYe#f^GXi66a/7O()!:-T]3P<;F[<0isWnkF'DF=O\.69K862<.q#C63s%*^UQ:M4]P25Y8_*o6$EC/!uL5eSsu;Ku\\/K5=.FU5+]:3AfXqQHY,\f""?1"+uD9D&k,YB),SpWb@5TYf&JOfM1`KaA4DeL%e7<%UeFe_/8fo`W06qekfZ9tM<(0nMh!8*K2N4[C8@82.F:jVHAB6#]__Qeim654ff=(8LtafV6f\5eri"=Ob6h>HU+'!Af_4B^3P,j6%!S[+1Z343pB]&,@9T@OccG<befYHAeV"Ng42eG3];>Mn>I^duGYMp,]qFc+K:5k\q,jJ#ER"nQgioA$<rgGoGO'gr=bnkEJUJ*]Y%;hA5g5h:p9G`*r7,F+&2$,4Y510J7^:fBLAJ@UnUo@[.h%o?gmWaHFY7hB]s!]N#\<pkOK*GC%&ad#tHb[Ws:+cK;R`_*QLfA9Gl%P6(MXH:(H8oB=Xq99"J_q?:o1WYukXH\IQ<LfehopPF,5Ss[PJ9agB<k;3DFZ.o.CI"kGWdQ-tC>1@>`g17P^+UACOI_j*s.B[^Z%ViW2B=dRno`h(i.6&J<*LLtVa)_Hp`+1KOBUBNG:65EEicLf:@o`*Ht9?<^G%Y?3kr])5\YOnme$,*!6Y=`Z\pJ[cJPHWl*TBOW+%=!##r!Gi1*aUBK\7Wm<,dKO5OPT3""U"_3<Q"!N?.`Dt][i;:r2mU"<g@I+J^A0Vb@,e-Fm*u_Q0t5[>O8W%1C/>330f*84m%/O5%Wb1fn_VBTM3sW,3rlc14S[KIX%7OHp@$btnjD/^5M?sLI91UuF#AjDq@uO/<H+>&?9YpEQ"CE5:R51Li7,@$^m6&(le)hR<+WqZL%?r]M@D)+6gLa`hP@nk::5WfWSb[YoqS9J^GQ'a(Tp0?XupjD[ahR#KS<tb"q-)%CU[u<T\X\f!B.2%=PM2$M5)L`;]-]Y3]>DGa$%E?,dlDSh_OWeqE=p/@Y(=Zp(I7?+J1a*nY-UW]\$GZIK3g0:/70Tge:.^+mOp9CrQIe+KX?5<WgHKri4->0:V1;/lVl;_Z,El%[4%L)Fa>-$R4XEBk0KfpfhgonF8LXZI$7WareHF'PW1?<%o?ofHX5;AUg^:a"F![jk/,VN+MF:dm%:6uo>+LukYt/hQOaj#d0c=UU_k%l_MhFd4+gV?"@E;3D:P[aRT-WUR%8E:cMF5$</#K43Yi7D9&Z<)hc:^?&EJc@C+,uX,8/9*u:;A\YlL.6>(*jEA/e,oCsqu[M_`<%,c`C^c-1jN*/bG/ob0lYTAR<#^GS19:ommtbEgH'59g%3-b(AZG!1;`U2:X[j6BTKHHU/3paJ_2l`t[I(i$_**CWOM'9oR1e)YG)%fj7A,_,d+:b%gjUW*jH21UZeEC!Wklh;V'>jOBrhfW)i)r-MQT(tga(kB)HB;#so:e]\@;f=]+kU/5(5j\.NZPb,S[I)cM5/@:M2%o'@#>OYg-NBh>9',TjgWee\0@5#E_OY=]>Obs,CfI6b[^`puTQ:J;;3W9)RUDdGc:6bB!(SN*VBrT1T?MJk<k,SW"f]jKOB=bN!N%jU%nA%Ui11-AIUlH.n&K`p?)=/-**mF*pmF,)!`bLshmf%&#,0fZkt#B2XdtRM-I68CLO^c:t$`r`gCl;pMDX8[AV@[JG^H`[^?b%V:rN0*f3;iRTk8-%!*U6lA=oPZeJ5]G?-*e#r1W6qbqmVq)n*-0KG+d>qMhE>lDi:Y,PCT4%3-JT+:CJe3(CJCP&N27@R5EbZ6)j%%@BY#*;rha2q)bCMSgcr'/+#>!?r+s^`m^i0]A+X6%;:sYB"[>&[OL@4ncP*GnYIJr%TM(n)+0;#im_hr6r#+P=r9N,ha3f@'B71%9dR)RT:![iU?rf='LUD]i;!O?hgC^GGsgmrlLsQk2tDXC*2nrDcTTC)WNJjmJSi#P$<$&+^I]X0C(ipfVGgurfFI%-W%r;"-pPLZ%crKMH;5/V"UBb6%JF09cTu*`Ki0gN#FfgSoFXf5t$W\o`POm%t>#8^,,_kp8T%G)EBNkZsWAEmeao/3jWL:/EXpc];Z(@<roiUst%4(i2co8=oa-/nhX5/ZP<1$EAuQddA1?%,osOqSC,WktsMR&<hQ>Fi>.-a_/HdeirjSsUV,naJ&'6ul]%<0bWoo.1pefkEclN1l'M%e&sV,8QZ5!J"B"]$):m&#ScS#_;c31+>CnC+mepu)DNUIP6n@849XKqPHs;t@jYm)+A^;JMr5Rf--85p,-e^#R"p8=j)HFI<ff=B%lLSM5^A1$A2L+1,0N$[TX:p>c,cn.gKK""s"i^t7^sbDD)W(!J>K"7IQrAW/Tg`j;Gn#_HaJq-Ef:YTT7L6OG5%4)fS*5FOEh5=9%/9:6<2X,d$RW4U%hU2Dn[ZJJ+n0L+]N&=uYJIBN8,#VCg;5!AZA.WQ400_>V!nnR[fOT&qJ1'=WKm[H+?hYSA=7N&C00GWGT&8Q!%c1cM<GR?u$P?s4R`I@15AV_FZS5aAZTH50f+gTR/#Mq/blt1TRY)4a9S.]l+P8(."g2$m%0:[8!<0#NC"(^<H/@QBWI'?.P;rm)d%H]9BdAh#N=B34.(Qj`7aQLe]l+qI:-^F>,Djod"a4f>.ThApeEaJGN3J-q,)mcJL[\tXjO/r;]m(GWcG$Pn?R*%O"caZ3-2$#a_]%#XU9aN9'[;%%'Tl&GB7E^=<aZf#^4(k??3ahjTh\V9#:4&Tc3hR9[\u6u-t:CSYS*ak[$>*64UA4)9>[(Z[U6>WS=K*gJCRr!GIn%V;O&'BE_I&?I/(aa22>GMd)<p*"-j%h%!#Rk1ZoQCfE#^XoWTt,kUm>24CI6#).FAPgHQ^*0^iqkk"8<d/+8@EAM/]5]F[o;)9iL%Y<d6>q2Bh8G+H;bhO%3ePVLQZ*#nQ*RmT3SUg:413=V&orCA%NYT59kiWB-ZAsWS96icnXl]W'YSNJsp//mi6H"i\(Jc`n,aj^u<%IjN/Pc^?6BA<f>]nuB6LVc^6=@5S[2F0&4U'XWQBk-H^g^g(6]36-%s4$l_s;Gr'Ed-<RUlA^(bU1@7Z/?*`mBDuN162K_UjD(q0%Q."i2`*CET29!UVGA=I3MddXUSd8Yh'_r`+.kTj607RAVO:Z0%-t8TM-L.$p\NB+dA3:defP[dRgq<=.9'KHJ@#GsXF/2?@i!_-5%jqt>\(_@3t-B]Ck^(:jHU4aaIF05][a63W["4JeamY(Q&M;/9bk8WAklEC1-;c"#&\m[TM"sM99Nd?tl%SfiZF[U=ODp3L#/2&0h%\<]L^l4d.R8-f22PoN59m-5@8,IT[E%B#OH8g)(lZXt;Ck5(4<N,4Y^>cd\q)R8*IiT.O!$ik.Eph]N`4@PDfN%bR_G1u+p`&q'?%c)X`Y)c&cf,n.Q2+kF!_dWn33rb9/k6L\cFJh%"7YNF$@e]KAq9M)aqA,mum?R@RV@QT6W1`Q%WHH4S\'i:YUHUOKkTUHB`FOq,Z%?Wc#CQM^2=7],t.(,`:)Hu0iL7qR[@^<tfaDXOo+ePWdP:rp5Jg/ID8GiIc(B]6d1lMS(&doaj/@??WpEK=ffkCGDF88,R]lTj%c%21^>C@hdNrpeF#-*&lOVIB<&Q[r([Rc_gGlI:>8U"b_u`%g5,XXN;*!)YL$q'T0XY\,k=d$i1[<_'!3ggAgFU6Fi/+O(+.i25?eI%&bG"9lU[MfFXCSZ.b.bS>gZ1u;<W[8h+;t3qL%Ps8\HU^X_(3>6A;\*#^oheoB$IK(Dj4j0[=ab,cLsf004J@S6V\):,AM^EtmZp%.pqEuj.)#\9k*?;]$8b5Yq"Rc)bHrmTNsIJHc,tN>UqdC?AL;:RTj*,9K=Wdfg=G.MNClOgYjmeI#XN>ctQgW_7\""T<"/:9i?k#%>,"+/dt)UA8Q.0dS[e_QF;V771C`R\R#sMGOI66ak?&72B.@Na'sB]mL"Ir!W::b>`oigEKYa0j#QAa>m'7QB$;mJH2!?X-AK&KW%'0Wo\.'%?f@GAIMgPKf_5S*D,*b)>.KIPIa'uHpJFbYir`:bR561I4qSadW33H:sXFiQV1/%'E%ZcKIHRh3$@iYlp"/"tP?d91\/%G![#b<M%;MFAT=@OH/TZqDlEG5ltJP+R]DqK6<$@j+*BP6O!X,ShrUQqW;G*"t*OafH/]=KN(i???1pD1Kmr-Au:,?d+qJFCZ<SR%@;j5>DjVkbnBJYF8:Q5E^G^9K,)g9-hTl!!gW=OmY:*((EhT>N5Nck?dXC]W3-k=i][RCRCiQWN85ZUE5:tJ%CP&WZA3JV:FU$&B%IkRkXgJQt@cW5\Snlq@hkFsH2d,*Cr=C8FWo:C8R;0#Ima5;=@^TeU^*ha;0mrX@rCotLZFd=t$lP-uVAll]fZ#T00$mHG`Tek(1%g,kfP6ZBD^^.(e+XhgDY$jU*6SPO&FX.H1gD6fU+;N"WD'D'(]@?]-/gdih!_!or@XJ84bYa2Fp-^OfBR$TnYKcWHK^,nj_C?f,2%Z=%HDlPZfAYl2cDGpa\M_;`,<54^loR2H8G3temm^mrGR1&\U<a5Qldq<(ijbXBgY?1[R&e`rl!`Th`pm'*5rI(tg],S19Uag4Jn%X4;`'VkV+,?de(tEfcqp9"g/..^oOqI<#k/ce"!?:+B7m/[]o's6HQ"1g/F?4+h?Tqm.>#?qrGEH?j:KD[:3#'FT%$eC'Z#P]Abq%o+DS$`_rUEEA%2FlbJTL()e0P*l'glRL3WOkA/$0^_WQoI&+[8\b_?5JlP*bedtkYEus+em?C8r$^IL#_6tbtXja*g:F\tKXbo6U%QQ*WCSJ24$'\Wns@8l7g<>IV/#R2`K@4pF:PW2ic5-YZhNT*Tro<&\&SMh_?Xu-t>j^?@$q>p1imL1h(ha#M!2,=Ls?W20P:6DpW%q&6N/pU1R1kJE"Sg^^qM=3&?DK<&:kSZ?YD1fe[a3]SbYK@l^&FU7YJinTdm[9=^2`Rdq)9LIq25t`=f7Ca^g0rF@Ao19()AsV4[%Qgd%a5i+[4/n#cjC([/A\DgRQ?I4'G.tlrcJ]#@/8b0g4XX>lQVgbq.'QG]OL%L*Dc$cQ-o(a3/Yk&To^>6>SHVNf2P*+^jqL!@+%orLdcJen/_c`D84R`$[r72^e]s"k_D5HU(g3N<rU/%btmo=7f]F139^'!u%9#ZCGb*1OP8+sKN"$NB@r[_?J5fH-EOOETT)`ms:A%%&N98oHe835j[&>0]u<!(+1\%H@a='=mou2&nCu$AA3RX'D$:@X8ltKhj8sU.OjCDb/a!+52U`12_86dW`Z?0Mj&oEac=gjb+.gQ%eui-grJLAHeNOcJo$B:%OEiD$;*mc2G>=KSh6qcTVB)5hW#Skf&%u5%Chk$MFN,2kh8Ea?2cPB%UFS(U''pe-5Uo:kk9*1X%_<2'%cGSCbL?HM[O>)u^0u*@h`S\pi6Zj#,9Yqh(R7p0$Y1o16;m#JN,Vab#cSsaXIkC!F3\(s!p".X%"HFbtq#R3l`7QD\A;e3h:fC_W%T@6_(^a\AY3QGIN5u@hQ$uU-ndj%#\rTh$n`>,>s&9^P1SNEApMB[dZT\'YnYl0R+*HPSHU3aZ>Ukri`(]_KjRWV5?PruC`7XW#L%OV->!^,>cP\RSk.Zn5bAlQplpl+tO:^im0rL&[P.'lI6dauqC(2m)U/'7-.^2mrt"poLFAT?ji6">BU6>MWUH9BlM&Mn&/?b`(b0%XD/aGV(mF!\UK8r<'MpJ"Cb@ldMtJY,IRgm_;&!QPc[NZce2OU9pfVXI^8T/Z.NkNCD>^aHFICRMB+L9?3#p**Vk)BR"mG^qu'9I%K4+mi@i%?'f&rP$eor9ZHa4qsG2u@g7oW`/OQrJhDiPJ*&<4+.+?=8(2\rSk6*7@0VjR-jq&qJSM,HeK+K/(*/C$f=,mY4hf3qWK%:S@sC0H,UP_tde,0n4"T4n<@I)hCP"njG`qa9bP1Ot+#r5PGi_F&Ce'N$aHu<7EBS291+'g2O92lgsefp,@/dh2]f"oAl[kh19_*%:*;a?*K!4h[dA7m&jFXK>)E`HiA7WtB;PgZ`(AMXU4SJMrsK$o.B2.B;PQ[Mdf5Tq.H]n(K<'#NPI]D(gE&-K%IHEs3*_&fA&;)D%U!7_m:l+uC^q8E-E&D%80qGLW*\M-668m:1419G:bmd]`UcT7mD:K=U:o?RpPcK"=/^UlJV62[GF*%'4M!\PqY@d0=FmEee)$q=j%Tb>+=,?sns*((1f1";_CO)(]OVlHuhnj2Id,uMsW*?rl5AAiXF\.L_A[D.B^p521aI3_FMiu7,U4k::q==)[98.mEm+sbr!c%uQi%EoHeNN8Dn4L`Ktsk-a=XAFh*m-8B//kUM!)-*nM\^bO=Xg:tQ?OHOH_GT)UG>IPNR'rB$Ue\)]]m%adYf)Y2FWd?5?T:>,(2&\pl%+=Np9.T:='L1$r!TOStH<'ffFm&EGA<#^qSr*/s#QY:Af!hZXsg:u.W67#L\D:L4jh#u_>*fKf+;?\1!o,-X"m=Oha"&7R)c^qnZ%8(E_OY6Gaaf`SU2d;U]UU'b/5#>7070dm%a/"&A`ELma%*0PFH>5E)N.j\S]E?WM,3a@B;@t6ZMlHp<b$VL38PB.7p,AR1Z7`?-n%;ih5ts+7&N[0qS\0q4EDI3,5T,tHNE2kM.a>nE;"3<)un>'c\ua)[oi0'E-'%+$_(k<kTR;njA9E.lQf)4)o(m*d.1_8PqsGT7V7%d7$BVY%hTj2M\qj%6L4W>tr<1L@u!q[@-pn5o!,d9Jgol1Ij[:l=9%7BX>=1Xs!:U'+D%(P:Hu`>u4d<qY;$PSNjkbRg_<6+t4o1%V/4(2V)kX(Ob+Q.+8Q_m3,_>7FYk"TW`<$hm1a>K:?L46GYZNam5J^!<)4s,f]/\mK-54C%6tDhi1YNcN8qRe>hj'"g3!\AHLh$F%E6GbW94'd?Rl"2M5YEq!+^7ee>/bfM!V.Dn-?pcUcB:tmo-)0MeM-#+.=*%BAN[]LH$lU*Ge;e?7ScLnQ("k=ar3JY7?@Un*2dmQ%YSBaB7,AGp.b!r('8qp.]9ijpCJYs+Y8=)0BA"LAIU3RlVY?[j:4kB448m^&#]]38X_^%NUJ.\sW3>*7qKe$FAS\3b^B2U*6<32d%3rK'>V9@psQan6*8,%Su*!U'UaZ)_L\/j3(Fpo[GM7$JBK4<InAG#5W,KE5bS[=k3_J-(6,IY@lf!2+6-;B]D_X<Ju=SL%6XX;Y:%(!@=,KgCIb`cbiA$O7nU:N-'^!3T[bDtJTBd`HIrR"n;.U:K*j3-.rQR=tklq=BU*N&;ph"bi^r8a3%c^aO6]8uTd1;@\,BfVgj_%X$<)0iYE=m%G2.`XE?.\aqsiYAp;n&E>oA;QUoU_@N0'tFNu7T#bP3Z<Y9&ro_DCF@G*!j77jVXekW-r)`u&;NM68q/0;q>PZFIK%H:r-Q:_i6JZBZBomuIQf^lFU5"o$2s<Jfi1e3fJPY)7%0\8$%OQBMg!2g1/1o4DE*UBF%TkOREDE$g@0C8NPT3c^0:@)lAKo[XtY%g=9"AK4\0gY-W8pW)>du)R*^&-"Q)YKWnEf[YqB<"ZP`c>HT3k8-=$oUsa<>Z-GG-S#MMA%#:d1^c;_D5]P-7&Ne!1a.?kI%74;.%<X`G?e8L1(UI6Ig,LEBLfHHTG%o;%^a(Eba>GM^DCE3?o/.Zd_@\40m7TrSG`@B4!Z+oYI;@?DLlcr-KL#a"c_T+nD[Ke-0k_[\Z%L6NmY"!9<A`_V,d#&4.DMNfra@$i%/*Q\$\0]Yhf<SF,;IBja_oOG,7dOs%]I)M&M7*W?8XYEGFKRY0QV0l`$16h+V@UEXW:QF(F%X@uC^UIu>t0l(oD2Q:+OE;l#eD/[mZ`M_?4++t(&R2uKn%0B%oO9ALqY">\7H=Iko7Qpk!]#""@G;r0GPf$hn.Zh\S$g\][/YToq%G6sXNN0\er9r7JdNF9":?^]:/#&FMhKjGV7_c>YT3Wb*KP(RR$?6B:bOs:0%,FpR1beIkiU<O@tP#cn`cOg>*m.%lOTu>cs7%DMG%[U;a]hsjMtW-f,PDK=f=-dNad_.]RC;ppqSlFfPP7QmF$SMGUs)_!tB$#kol`[X_Fj^^`8eH/mO3,c9;^7VQZ4AOMV6SUWgkB_b[%[%0N=TN13'\'SAkkkLYhYT8[Q&Ihd+$7$lX+>07oW\E^mXB<(44(9,OrEU.VW(O,=KP@#/QVQeqOh4$IQur:!_29Dt7mXKG?FXNq%'flcg4XAT+(XW]E%S"F#0RQ2U\H:3NiP8;d-N_2#fS(o3PA%mX0N.!G/a=(qh^8(/i[Xnj&;V8<7\%0=""$a:H+upJgr,eADGc<,%M5O5Qnkr(@-<jSiG^2)+-F/"Xfi6F:nd*e97Kg+sTB[2/"5_Z?7WkL\dRStPdjnGBNDeuq]!VqAI#ZbgL?mi=-UmMI&GQaXhrbr4%ct/oFhqVJZUuH)Km@t%4Fj;8Mr>oS2<*bkbEm$:0FbINK)j3#S&<aQU<3\I<G<i)c-g0!GSrTg-\nDZJL2\J!P-!@JR:%LJ?'9'N%760W__G#lIg(nh'D[9tWFfBts%:op2-&aFWV(XR`aoKT50peLD_b`*]#_7)*1kBf!h!;\/mNR]XZe>;3R%>Ko(jR7Wb]7tQ=&n-A%d=EMZ[lV;]59UbWb)\GFDN!QWLo5\@^@5e5kZS;HR5m<+;ptU09>!4+%SdSg,l'>G3]]q&Q5`=XpashNJE3XN+FKXiELouS=i.Ws%/Uo@t0K)2ODLco`kB$>NUisObB[:9g)\i6VAWguRp)PLY'4R3*e-/^#LIaO%95)9c2orT2Y,?P1]G7[c6[f?_+RRDBCW9?7EH^n5%4,n&?L=&N-0fn&X8c>V@?&Dq!*4_]F!SY;si`6S;.g>>Di0@479j(<`Hq=419t96>"10kkjk/kbQS$jL"[Ea#PJ=9T"Ye48g9mHL%=h8KD\9Jilc%CfEp)02>bgNOa,;u!FP@a:MbOUn6Z9<H>(oGJ$ZZn>kVtmk"HB"<i+%iMl7]<i)=Xit'0#H&<AQ"4@6<W6*oS/BW%2LWTqm=(1no^\MdQp!r_Z'<)8e3MRj$9b&<<%3i:W;Yke\Z6`"PR9tY3e*c^(NuT:1&GKbFCbs2//*MVS*!Nnf7H>0;QGkG7tPbM%(cdLT0UX:We)tsN<!#C&mWLX!I_iTa#VQlqAH_iS3#1D@Q86`bM4)d#;k/$f8,+VM,6XS\8tS"+5gTgtR)[9dr6#G9<ZcA'/M0(q%OVS<C@Hp^Uce!tu;*jCt/Go3qOBI'gb.HBE3"[gi-anZ4#4FK;0#5e)L_&8#1[Z)s,C!pe(Si^oW;kF%0Z&TK%ji0Wm7D6f[@+22%[]\iYV^qR*,A)(iqE;9O5";*4(E7Z=$sPN!(`_2ro.rZ/$d(?"Bj&)/.>t-G27F`K)_"op@p8`a;mJp;@mOj[CKO7C[<J\d,-$IU%S!#;W96eB3;J>53S\-F,I+9N)RUjt]3Qu6KC`H1+$^)08G)VK7Dk.N26/;U8!)3T$">;bM>UM784'5KQ89`1XVXD=QTF\63XkHf7%j^EX#YA2"!0`35eKZ^V;EipRc@"_>fEZuRjM0Z2E?#e1P(FS/q\h]2`(&I`<eS6\^Wp$<V8@k<r*PW)#EH;W!f.f^&ML+\Z:52oa%/>Otci&$`ai/Pi#0Uo>2.PGMn6DCH+G5kG`NoDJ1/sB^"@PLo?Zu/;@k8O""6ul>@;6:Y,'[o,?Z(BT&PUPO4PR,]sAY,[a,2Ql#%YK:)1KER^<N@>jPE9f'U!sV2KZOkQ\:mbktY"kkt(@?Lf1t:Rh:Z=Pf`t<>mCZC$Yid?lKI(i(o@l^aO]Mhi+`")Et3n_Pls7p7i%\2EDupfA;8XenZi&09]4(H.]'21T3QT*I]3h2e`E7XR_BlqNHcemL98=k>WZV$6di9Pl($h_CJ1*BKYXKU,(5p8VBUd(rS)l^sZJ%>5W>nTPQD(jm`()<T_Nn!`)Z>21<DnPQG.N)4E(d&r"C&c6=R0,Lk.GW,&HalJD%FZM^A):u2nS^o/Go22ROtfCLh1Rj\Kk&`'jK%Qi+F0F,_UNl(h5Im%dO&IUC:\#6hNCGH/]_\]>@a%(NXq&p3tDJ<o1*R"3e_'4"JMhb4Jae6jDiFf?9m$i>B"K56mVQ3tG5l/uBj%i4$U$XG<gF81MrFpQ)d@n:Qm<XH<#dS-1PR8aL:#;hhTC[)E89[1W\=!M=^u.<:9&(5X4=Hk7SgGqmRD<TZ[.2&B[u=o;u8!jIR"%a;EMKSZaAc8NZTTF11B!r2!Gp2fp3i+LI!rI=Yrg^hmBH8r9^UEfY-LFUl7Va2GDQ1RmARIp94\RLt$-"_q4JhQV3u=">c:4>"r/%hQ[4.VLNK,>=U?q(gO.BS%ERR6&mi3Yl_4HRP,p%lI<9><Q`4=TVY0,6KROhIW(XWZ2@QPYV6@H;7N:4fSmTTkCn6,JU%ZegQ43e%<;U>`0A/,dV4J3ha[/fMB(XH\SRCsSNT])XhN^T8At&WNUn[nK"h(l9G9*JdJnGC4*o`<9Sq517,O6OsaL9)m;>m4@Z>CB(,f=!\%Cqs6XpAO:qjc?90WZs56-H5=Ea;4JNV/lu)8Mq=#<r2a%?mdqXnT[O:LDLQ@e6[L@=667sJHLpd7c\rVBUm]@er>8Ap(>Q'<qEfs%cu-=Lr:/%m7f/;Ii$KVX#CfJri\(QVXFX^'`XCOQ0kS2VgTdC.N-G5,QHHqEq'##EQmC/bFA[6P\u<5NLcU(!hF-2RqEhk`SZ;!Z%]jXcXVs1f]SW4iShcumNs5T``7%O)Z14-?c3ZV1e<Muc/X$I,UeOA;_>b?%n3kadd[%"!mbm28;:"7;Q;\ss_enH/#Q>TSo#M_/d%LTG"GcK0M?]`+b`A0%YE[6.uj:(GicQZ^a.AW'm#:?MO4Q%uG>>WfEAaZ?8&Zus+)\i%"U/m2h&5<i[a\*YhW-d,iNV@0]qD,4<4%)B75V?IsuE463Dq*O;HjLTnZQ:?<hhP`E)g**LprOM-m6Y`o"=dS8;lbY'+Y9@f6^=S"o2/Z,_`7%NHiYN7+rmRS.:(D``_3FtJm%Fo&Mql9j&uHFB-/W7.O:\ET__0?7/+7%Ipt?KR`Udk!M!TaMSu>RHfm(HlR%K6I>")h#<>0V)oVbn!An=3I"Dj/]1oN,JgKpiQ8&%S$0*VTk8M3\jRRiB58#T\$k$2+R8H;VYMS([$D#&gdI].Q,qahUq7^VQ?:#!G=jpQXlbD7'/o$"PB>MlH*0(t\'A9&?BU=$1:c3d%h:c@O+iLNt4p;r7-.Ua-3C6]CTS(D%k;J$edfHk2'LU73$qk`V#s+W!CIlu.kd6fEgm+u#X/:/Z2aO?QVW>V+T[UVW6e#>g$(94^%M)reTVqXoEph"\VU/'sXnm.=l08&GSX$q(>F_Zpt;kL)Q6JRAih2i^XSh;UZ]^r/``/(I!%UI%M(<W,2bobFUf+cE`Gmdh>?(get%)H_n6FBuQC`#\5<$C(X0.dN3KZF7;^QKlJ\^.T4tSr&`8EO2[Hj"oi_gLsS5"Ng8Q[CCLf<o`;N_>34`6Db,6g[L`U+&l4*\NZm2%\]PImP2m0Vf&p"M;+T%g<DV)=N]BtK*@TaM?\O.##:7L=m'6cEeTsiMY,&IjK.K*G#\NiiA%+_'3idrsH:-BqNbY.V_5#:CP4>ZH%UO6m9qAQfXCalAHU$br*'iISID.<qpF4,3NfVR?nHb5pI(!H7nQ-@<Ka"7_bHR<+:U<1o!,bG:o("H.RpfkYrl>Kt;.?nRVW[dXC%-GPk7jj`O>Mg6UgdeDjn][^J.23XN7q'[;t,7q?(g&em#Q>V#:^W2.Y[J%VAQ-gLkoD.a-n3Xd5jj(0'[S[5Ka(aFuCYQM=/_[XZ%m0qW3I,CVfqF#C?>;ks(ismZ>"oOBmGP0'Co4,KU2/$36C"`/BM^c%$T00cpf/;6</-)JrlDR<p8ZZN4H&bgiL7UHd49:V:e^a-<%aKm@#CiLa>:7e=WX'/%G3Q:,XC:o^$/3O>E^ph/[bSOCA[ZnW3+]%3S,Spd,I:2e&4@R'V4%t^s!lGtS9bk;Sd+7fGY5"S4%8nu\%6G<]J%9gP@J">dCb*b]Q+X,g#hI7:tlVFi[9`:3.B1Y@F;.IR6q$BQTVUFoP;Qb`jF#0<QD0oRh)Hbe&[@79XVjT<;=K1@\nEJ*d%3/c['mDg[LcMe>5MsH3K`V'AMid)_UEBQ!Y>R%LO6)I6j1>=,`K*s#>dV1=d$VXIs1q;HlcDsYg[Pkf$r+i4H"V]D8_VC6-B27N,%5[eWJIT=R;2n5Mg-IgTU/paTOb@PUKf*>*gAT#n[[qt:c\)@8%]'b<;)KS0EG;H]84g!l.I[/Uee]ZYZYYYgK=^.U/8on*BZF0mt%k'C3867@Du=^.>713gC<-%HW$e(TD4LtV4IQ4Q]^bM%QYBaI;0MqdnKR]LC!h;5T0>FH0KX4K4eaiR>"$VkNOj3??l7_7etDSc>u%c/pjl9Hg!n]=Coa".H[AhL[%g9(fL!BH6&gqfKMVFgJg2i%!2i>D0ic5f2Hj@5bVX:l,1#SP1V(]#DqPJi64sG8a^K3+'.5D47><%EDG9H@Lc!5bE,??;[FNh[LMV4r,\b>UcFLP_bPelCCZ%Q1b.$%Q()pXPmWf"mAd;3V/rFa^>A8OZrHp)IO^Z9dXF80/g4Z&SJIQX%ju!Ild%t%VfI\^hmn1[iYdfA6YN@[P*[_dOf6GS`PD`_q\mAj0$`rEYF-5:U<8#a]d[RiioJ3t1c)j'\Fh#eeVhGda@f&(2?*nZj%FA:!2W%quqd6;D:6Em%>(M?]O/.OLR-^4IBF-Y&?GI+ge1ur)`b2b=-hJ*1WMhO&`If1t23.Y;TInVIQ@'"cZ>l<ETLN@I*go&+;%$E_bWR%rYIgauI6AgC>AdW3H/J/n"0OJuV6FK])S;u1"7$.T7n;AH:fra7hd5G<-[V5b)OF&&\a::sEP:T7MGN=+,G$`?gOEH>Xr%3!\^f9ahX5hYeoY"Dk?JD;^4BGY+SuKS?1)%PjB_Kql<!20)]5iEXH8iLJQFS5F>$p9K!>m':X!OB]p:kuHsb%=\#qH6Jf?5I_51%ENcY4qk2u,A/Gui3IaVY<S?6#RE2;W)_SiS11.&<-%t@K1a!Zb^jel!W-)UTP,Q`D?8(tS5WneO&!`C7=+[W4qLDM`joad#L\l1n%A*=oc#r?4`dcs398&Z6a%MUD$0SkT^'jF5n>8%b+l`dacMCiM1kN,UH=hn8&rLdWWOAj-4YhKD[X7DZ]r5('$qhBf^?!o&fMpj,W%6IsePTjiXs5FXKGJ<n?S@=se]^$F>2Tl;"jU2mIg+?m5sIG=E@gDWI1-T7NbqMk_B%r@;-%<TbT]5FS7o7OZ4Q+AOQd8ZVc2%:j!%ktXS#(VZr.^5mnM=ILAPBf=8=Yc(M^[j^L*0"+o:JV(!"4*>9Zd`_`,&<NFZpH/drbaY5++eh7:9nMtIT)C-Iha<CNrR$gl).;*!%6MF4Fr%[@tf$G^Krshr\ME,BkQY]i"&f'p,XJL\uB!_6Y'Fj`=XllIg*c?_R;_L[p(+&K]k6Rn%`%t(Yp$Jap$Lk$il<@-#+N,l:%^3]$HnTFPlE=s.3\5N%+qu-lZli3W%FAjMDC3&FZbcuf>I'0$-B9ON&-@#4eYr3N]6$(+f8poA6dE:fo2r>m0?e$tZq&VT+b3dLC%YQZu(@lo&?h<sVK/teis*kZ>cFTQ*1_-:Bs0m1u.%mLm38i>3:Vn->X6@/!_m'1%%a:o-n!Z</hB6\D[.qenM.JlE/b(uqeCU-UB%!T\Y[E/93e7l^:P/jgD^/eNW&GTQJ\.cEAFg18)u.9B/ee1j:DS8s@QBH_GTUTth[.Kf""L@e3%P'R2/H?J$UH]B//'k@dAa"5h-%OM"tP9KjG0YF:G&8ss*gm+'E*7E%"@A@>-XdoVrVZf]mV.R:p+_r36e">udWLe?LR-nIh`d-7Rb8OC0([m&WCDTFge*BVSWok/EM%c5)SFbV>MHMWXLoC)Jb)p$."'3*3LLo[qHlPs&9_T5!p9\*8,iOk.RX+>9URdgYX[VR"m&`,q.o<@djK$59m2/7;L_\QQ_TE!^/4%,c*iQ?`&O^DH"T,eS!&f0o8i]6@-n1'bYNq5pX^spP#Q+UL\#j`8MTIFns!fM9mgm8dWhfm>0AoM&:`TBlHRKSdVA$p&i&+2meZE%3#LYT')D9L+PM\FEZ^9(=[Ab)96[;4f-^)Ra)b0+-R>TL3kIORC.P)DR<J^KK/5+YZDLOHJQr#\k=Cd)A88BR]?;Mo?Us0OktCDu%;*;qPG#_7KJ7[4)W(h.YlZ]]!?_aoj=n2cJme`GW17h_M!;,&VCFS&t;lN5a"'2@$;soHj_T)ee#C%_aptX/>3r9>_ZY6MBg*O72%KMdd["@=8l"M(&PC70q.3>+@o9\rXfYdNVoaqgn>-/KYVU.k0,-\h'LOh.\+Qb;P,TbHYXFPjR7LmPX9[N<*38@dH[-cO7s%Z%im%;BL=1pu,KKFPgS.Ai%P<]eq>7Us#Y)Mq$A_o_l:Y22S#-*dLnBU8E4J?WI&H/nLD$"s(+>Y=!$l+*_rR"\uOqHYe4d8RK@@46TCf%Hm<i&-NEIAAl$2?h;<^ii$b(DqjXeL)uk($]DVE<m&n0*<7;S1<P*c#XP0o!KE\.$IJf(#861dqG=QJ=]Ipc)j2H$:=A[:jlm,F'%&N,LrfX<6Z<p:hH_[LBcKkuCoG/EPpq.,_S;3htMOk%#')L>WGlbETITqETNGC3\0Ki-,&dM%FS%cO1.?diQI5),c1eDn"^!V1Q0%a^%TcB3)MqM;n+*B$[N@SLo<SflFo7q_[;1:SPWR%-M]CM'Ycdng@:sSO/+\[,&LOGh$:L5POtp`KdfZ3BpI;hlb";/UB:F0@r9W%hI!EmFdo3VQAOa%aW;?>o$Yk92</Q>"PN<Bg*,=>jn@Y$-*Tg3@(7OI5GO%-n6.'Gh`;QOIj,Yt%OF7qKT##V]Y3&Y=.P8]cdK&T%5.Dg:j$10UUg2>:'lU+Xr^@pN[5DHU_:'m*WmRpb/or;Fq*I8/8sK6t].2LWI2aU=2erB+ce!AB"iJ5$?,MW5,7l_^^2@&\O6@KR%@K(E'DSNZ_C1t@GIdal5I.D$(^"`G7hCRtN$g1N<VTt=Lq7QaaE0\Rlna9XXINl8q]4!E%_j;7ThhP7M_%BOJOB9"f\aOB$$E@.5%INL/ZKkA=^hRXpRF*05sf2Ybnh_igrZeU'!oC^p>-,(1@\+FjX+\VG4\ZfP7UhcbP-k!69'1mrl;")/C?$/>V_7%(kSq55>D%?D"%I@@<IqIJH4CqOMCO**VZM;2G*L;ajcTB6%AoL\fWo_#irpg<1`rn%2Fp\Q'3h]Mmj=+Bo9]ANS=5Q&D@s4a1Fn3;F%nP<Nln1T:d%5C`Uu&-)Ecl<=5.Im3kn[t"2%+91GPs3mV>ptNR]O+7#@6B5:HjhL]K?iSB#rqcZC$b'%~>%AI9_PrivateDataEnd